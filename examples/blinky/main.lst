GAS LISTING /tmp/ccEEyJiu.s 			page 1


   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.stabs	"/home/dgonz/projects/gitHome/TinyArmTroller/examples/blinky/",100,0,2,.Ltext0
   9               		.stabs	"main.c",100,0,2,.Ltext0
  10               		.text
  11               	.Ltext0:
  12               		.stabs	"gcc2_compiled.",60,0,0,0
  13               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  14               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  15               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  16               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  17               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  18               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  19               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  21               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  22               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  23               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  24               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"void:t(0,15)=(0,15)",128,0,0,0
  28               		.stabs	"/usr/lib/gcc/avr/4.5.3/../../../avr/include/avr/io.h",130,0,0,0
  29               		.stabs	"/usr/lib/gcc/avr/4.5.3/../../../avr/include/avr/sfr_defs.h",130,0,0,0
  30               		.stabs	"/usr/lib/gcc/avr/4.5.3/../../../avr/include/inttypes.h",130,0,0,0
  31               		.stabs	"/usr/lib/gcc/avr/4.5.3/include/stdint.h",130,0,0,0
  32               		.stabs	"/usr/lib/gcc/avr/4.5.3/../../../avr/include/stdint.h",130,0,0,0
  33               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  34               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  35               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  36               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  37               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  38               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  39               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  40               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  41               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  42               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  43               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  44               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  45               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  46               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  47               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  48               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  49               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  50               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  51               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  52               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  53               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  54               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  55               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  56               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  57               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
GAS LISTING /tmp/ccEEyJiu.s 			page 2


  58               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  59               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  60               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  61               		.stabn	162,0,0,0
  62               		.stabn	162,0,0,0
  63               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  64               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  65               		.stabn	162,0,0,0
  66               		.stabn	162,0,0,0
  67               		.stabs	"/usr/lib/gcc/avr/4.5.3/../../../avr/include/avr/iox16a4.h",130,0,0,0
  68               		.stabs	"register8_t:t(6,1)=(6,2)=B(5,2)",128,0,104,0
  69               		.stabs	"register16_t:t(6,3)=(6,4)=B(5,4)",128,0,105,0
  70               		.stabs	"register32_t:t(6,5)=(6,6)=B(5,6)",128,0,106,0
  71               		.stabs	"OCD_struct:T(6,7)=s2OCDR0:(6,8)=B(0,11),0,8;OCDR1:(6,8),8,8;;",128,0,0,0
  72               		.stabs	"OCD_t:t(6,9)=(6,7)",128,0,158,0
  73               		.stabs	"CCP_enum:T(6,10)=@s8;eCCP_SPM_gc:157,CCP_IOREG_gc:216,;",128,0,0,0
  74               		.stabs	"CCP_t:t(6,11)=(6,10)",128,0,166,0
  75               		.stabs	"CLK_struct:T(6,12)=s4CTRL:(6,8),0,8;PSCTRL:(6,8),8,8;LOCK:(6,8),16,8;RTCCTRL:(6,8),24,8;;"
  76               		.stabs	"CLK_t:t(6,13)=(6,12)",128,0,182,0
  77               		.stabs	"PR_struct:T(6,14)=s7PRGEN:(6,8),0,8;PRPA:(6,8),8,8;PRPB:(6,8),16,8;PRPC:(6,8),24,8;PRPD:(6
  78               		.stabs	"PR_t:t(6,15)=(6,14)",128,0,200,0
  79               		.stabs	"CLK_SCLKSEL_enum:T(6,16)=@s8;eCLK_SCLKSEL_RC2M_gc:0,CLK_SCLKSEL_RC32M_gc:1,CLK_SCLKSEL_RC3
  80               		.stabs	"CLK_SCLKSEL_t:t(6,17)=(6,16)",128,0,210,0
  81               		.stabs	"CLK_PSADIV_enum:T(6,18)=@s8;eCLK_PSADIV_1_gc:0,CLK_PSADIV_2_gc:4,CLK_PSADIV_4_gc:12,CLK_PS
  82               		.stabs	"CLK_PSADIV_t:t(6,19)=(6,18)",128,0,225,0
  83               		.stabs	"CLK_PSBCDIV_enum:T(6,20)=@s8;eCLK_PSBCDIV_1_1_gc:0,CLK_PSBCDIV_1_2_gc:1,CLK_PSBCDIV_4_1_gc
  84               		.stabs	"CLK_PSBCDIV_t:t(6,21)=(6,20)",128,0,234,0
  85               		.stabs	"CLK_RTCSRC_enum:T(6,22)=@s8;eCLK_RTCSRC_ULP_gc:0,CLK_RTCSRC_TOSC_gc:2,CLK_RTCSRC_RCOSC_gc:
  86               		.stabs	"CLK_RTCSRC_t:t(6,23)=(6,22)",128,0,243,0
  87               		.stabs	"SLEEP_struct:T(6,24)=s1CTRL:(6,8),0,8;;",128,0,0,0
  88               		.stabs	"SLEEP_t:t(6,25)=(6,24)",128,0,256,0
  89               		.stabs	"SLEEP_SMODE_enum:T(6,26)=@s8;eSLEEP_SMODE_IDLE_gc:0,SLEEP_SMODE_PDOWN_gc:4,SLEEP_SMODE_PSA
  90               		.stabs	"SLEEP_SMODE_t:t(6,27)=(6,26)",128,0,266,0
  91               		.stabs	"OSC_struct:T(6,28)=s7CTRL:(6,8),0,8;STATUS:(6,8),8,8;XOSCCTRL:(6,8),16,8;XOSCFAIL:(6,8),24
  92               		.stabs	"OSC_t:t(6,29)=(6,28)",128,0,285,0
  93               		.stabs	"OSC_FRQRANGE_enum:T(6,30)=@s8;eOSC_FRQRANGE_04TO2_gc:0,OSC_FRQRANGE_2TO9_gc:64,OSC_FRQRANG
  94               		.stabs	"OSC_FRQRANGE_t:t(6,31)=(6,30)",128,0,294,0
  95               		.stabs	"OSC_XOSCSEL_enum:T(6,32)=@s8;eOSC_XOSCSEL_EXTCLK_gc:0,OSC_XOSCSEL_32KHz_gc:2,OSC_XOSCSEL_X
  96               		.stabs	"OSC_XOSCSEL_t:t(6,33)=(6,32)",128,0,304,0
  97               		.stabs	"OSC_PLLSRC_enum:T(6,34)=@s8;eOSC_PLLSRC_RC2M_gc:0,OSC_PLLSRC_RC32M_gc:128,OSC_PLLSRC_XOSC_
  98               		.stabs	"OSC_PLLSRC_t:t(6,35)=(6,34)",128,0,312,0
  99               		.stabs	"DFLL_struct:T(6,36)=s8CTRL:(6,8),0,8;reserved_0x01:(6,8),8,8;CALA:(6,8),16,8;CALB:(6,8),24
 100               		.stabs	"DFLL_t:t(6,37)=(6,36)",128,0,332,0
 101               		.stabs	"RST_struct:T(6,38)=s2STATUS:(6,8),0,8;CTRL:(6,8),8,8;;",128,0,0,0
 102               		.stabs	"RST_t:t(6,39)=(6,38)",128,0,346,0
 103               		.stabs	"WDT_struct:T(6,40)=s3CTRL:(6,8),0,8;WINCTRL:(6,8),8,8;STATUS:(6,8),16,8;;",128,0,0,0
 104               		.stabs	"WDT_t:t(6,41)=(6,40)",128,0,361,0
 105               		.stabs	"WDT_PER_enum:T(6,42)=@s8;eWDT_PER_8CLK_gc:0,WDT_PER_16CLK_gc:4,WDT_PER_32CLK_gc:8,WDT_PER_
 106               		.stabs	"WDT_PER_t:t(6,43)=(6,42)",128,0,377,0
 107               		.stabs	"WDT_WPER_enum:T(6,44)=@s8;eWDT_WPER_8CLK_gc:0,WDT_WPER_16CLK_gc:4,WDT_WPER_32CLK_gc:8,WDT_
 108               		.stabs	"WDT_WPER_t:t(6,45)=(6,44)",128,0,393,0
 109               		.stabs	"MCU_struct:T(6,46)=s12DEVID0:(6,8),0,8;DEVID1:(6,8),8,8;DEVID2:(6,8),16,8;REVID:(6,8),24,8
 110               		.stabs	"MCU_t:t(6,47)=(6,46)",128,0,417,0
 111               		.stabs	"PMIC_struct:T(6,48)=s3STATUS:(6,8),0,8;INTPRI:(6,8),8,8;CTRL:(6,8),16,8;;",128,0,0,0
 112               		.stabs	"PMIC_t:t(6,49)=(6,48)",128,0,432,0
 113               		.stabs	"DMA_CH_struct:T(6,50)=s16CTRLA:(6,8),0,8;CTRLB:(6,8),8,8;ADDRCTRL:(6,8),16,8;TRIGSRC:(6,8)
 114               		.stabs	"DMA_CH_t:t(6,54)=(6,50)",128,0,459,0
GAS LISTING /tmp/ccEEyJiu.s 			page 3


 115               		.stabs	"DMA_struct:T(6,55)=s80CTRL:(6,8),0,8;reserved_0x01:(6,8),8,8;reserved_0x02:(6,8),16,8;INTF
 116               		.stabs	"DMA_t:t(6,58)=(6,55)",128,0,489,0
 117               		.stabs	"DMA_CH_BURSTLEN_enum:T(6,59)=@s8;eDMA_CH_BURSTLEN_1BYTE_gc:0,DMA_CH_BURSTLEN_2BYTE_gc:1,DM
 118               		.stabs	"DMA_CH_BURSTLEN_t:t(6,60)=(6,59)",128,0,498,0
 119               		.stabs	"DMA_CH_SRCRELOAD_enum:T(6,61)=@s8;eDMA_CH_SRCRELOAD_NONE_gc:0,DMA_CH_SRCRELOAD_BLOCK_gc:64
 120               		.stabs	"DMA_CH_SRCRELOAD_t:t(6,62)=(6,61)",128,0,507,0
 121               		.stabs	"DMA_CH_SRCDIR_enum:T(6,63)=@s8;eDMA_CH_SRCDIR_FIXED_gc:0,DMA_CH_SRCDIR_INC_gc:16,DMA_CH_SR
 122               		.stabs	"DMA_CH_SRCDIR_t:t(6,64)=(6,63)",128,0,515,0
 123               		.stabs	"DMA_CH_DESTRELOAD_enum:T(6,65)=@s8;eDMA_CH_DESTRELOAD_NONE_gc:0,DMA_CH_DESTRELOAD_BLOCK_gc
 124               		.stabs	"DMA_CH_DESTRELOAD_t:t(6,66)=(6,65)",128,0,524,0
 125               		.stabs	"DMA_CH_DESTDIR_enum:T(6,67)=@s8;eDMA_CH_DESTDIR_FIXED_gc:0,DMA_CH_DESTDIR_INC_gc:1,DMA_CH_
 126               		.stabs	"DMA_CH_DESTDIR_t:t(6,68)=(6,67)",128,0,532,0
 127               		.stabs	"DMA_CH_TRIGSRC_enum:T(6,69)=@s8;eDMA_CH_TRIGSRC_OFF_gc:0,DMA_CH_TRIGSRC_EVSYS_CH0_gc:1,DMA
 128               		.stabs	"DMA_CH_TRIGSRC_t:t(6,70)=(6,69)",128,0,615,0
 129               		.stabs	"DMA_DBUFMODE_enum:T(6,71)=@s8;eDMA_DBUFMODE_DISABLED_gc:0,DMA_DBUFMODE_CH01_gc:4,DMA_DBUFM
 130               		.stabs	"DMA_DBUFMODE_t:t(6,72)=(6,71)",128,0,624,0
 131               		.stabs	"DMA_PRIMODE_enum:T(6,73)=@s8;eDMA_PRIMODE_RR0123_gc:0,DMA_PRIMODE_CH0RR123_gc:1,DMA_PRIMOD
 132               		.stabs	"DMA_PRIMODE_t:t(6,74)=(6,73)",128,0,633,0
 133               		.stabs	"DMA_CH_ERRINTLVL_enum:T(6,75)=@s8;eDMA_CH_ERRINTLVL_OFF_gc:0,DMA_CH_ERRINTLVL_LO_gc:4,DMA_
 134               		.stabs	"DMA_CH_ERRINTLVL_t:t(6,76)=(6,75)",128,0,642,0
 135               		.stabs	"DMA_CH_TRNINTLVL_enum:T(6,77)=@s8;eDMA_CH_TRNINTLVL_OFF_gc:0,DMA_CH_TRNINTLVL_LO_gc:1,DMA_
 136               		.stabs	"DMA_CH_TRNINTLVL_t:t(6,78)=(6,77)",128,0,651,0
 137               		.stabs	"EVSYS_struct:T(6,79)=s18CH0MUX:(6,8),0,8;CH1MUX:(6,8),8,8;CH2MUX:(6,8),16,8;CH3MUX:(6,8),2
 138               		.stabs	"EVSYS_t:t(6,80)=(6,79)",128,0,681,0
 139               		.stabs	"EVSYS_QDIRM_enum:T(6,81)=@s8;eEVSYS_QDIRM_00_gc:0,EVSYS_QDIRM_01_gc:32,EVSYS_QDIRM_10_gc:6
 140               		.stabs	"EVSYS_QDIRM_t:t(6,82)=(6,81)",128,0,690,0
 141               		.stabs	"EVSYS_DIGFILT_enum:T(6,83)=@s8;eEVSYS_DIGFILT_1SAMPLE_gc:0,EVSYS_DIGFILT_2SAMPLES_gc:1,EVS
 142               		.stabs	"EVSYS_DIGFILT_t:t(6,84)=(6,83)",128,0,703,0
 143               		.stabs	"EVSYS_CHMUX_enum:T(6,85)=@s8;eEVSYS_CHMUX_OFF_gc:0,EVSYS_CHMUX_RTC_OVF_gc:8,EVSYS_CHMUX_RT
 144               		.stabs	"EVSYS_CHMUX_t:t(6,86)=(6,85)",128,0,829,0
 145               		.stabs	"NVM_struct:T(6,87)=s17ADDR0:(6,8),0,8;ADDR1:(6,8),8,8;ADDR2:(6,8),16,8;reserved_0x03:(6,8)
 146               		.stabs	"NVM_t:t(6,88)=(6,87)",128,0,858,0
 147               		.stabs	"NVM_LOCKBITS_struct:T(6,89)=s1LOCKBITS:(6,8),0,8;;",128,0,0,0
 148               		.stabs	"NVM_LOCKBITS_t:t(6,90)=(6,89)",128,0,870,0
 149               		.stabs	"NVM_FUSES_struct:T(6,91)=s6FUSEBYTE0:(6,8),0,8;FUSEBYTE1:(6,8),8,8;FUSEBYTE2:(6,8),16,8;re
 150               		.stabs	"NVM_FUSES_t:t(6,92)=(6,91)",128,0,887,0
 151               		.stabs	"NVM_PROD_SIGNATURES_struct:T(6,93)=s63RCOSC2M:(6,8),0,8;reserved_0x01:(6,8),8,8;RCOSC32K:(
 152               		.stabs	"NVM_PROD_SIGNATURES_t:t(6,94)=(6,93)",128,0,961,0
 153               		.stabs	"NVM_CMD_enum:T(6,95)=@s8;eNVM_CMD_NO_OPERATION_gc:0,NVM_CMD_READ_CALIB_ROW_gc:2,NVM_CMD_RE
 154               		.stabs	"NVM_CMD_t:t(6,96)=(6,95)",128,0,992,0
 155               		.stabs	"NVM_SPMLVL_enum:T(6,97)=@s8;eNVM_SPMLVL_OFF_gc:0,NVM_SPMLVL_LO_gc:4,NVM_SPMLVL_MED_gc:8,NV
 156               		.stabs	"NVM_SPMLVL_t:t(6,98)=(6,97)",128,0,1001,0
 157               		.stabs	"NVM_EELVL_enum:T(6,99)=@s8;eNVM_EELVL_OFF_gc:0,NVM_EELVL_LO_gc:1,NVM_EELVL_MED_gc:2,NVM_EE
 158               		.stabs	"NVM_EELVL_t:t(6,100)=(6,99)",128,0,1010,0
 159               		.stabs	"NVM_BLBB_enum:T(6,101)=@s8;eNVM_BLBB_NOLOCK_gc:192,NVM_BLBB_WLOCK_gc:128,NVM_BLBB_RLOCK_gc
 160               		.stabs	"NVM_BLBB_t:t(6,102)=(6,101)",128,0,1019,0
 161               		.stabs	"NVM_BLBA_enum:T(6,103)=@s8;eNVM_BLBA_NOLOCK_gc:48,NVM_BLBA_WLOCK_gc:32,NVM_BLBA_RLOCK_gc:1
 162               		.stabs	"NVM_BLBA_t:t(6,104)=(6,103)",128,0,1028,0
 163               		.stabs	"NVM_BLBAT_enum:T(6,105)=@s8;eNVM_BLBAT_NOLOCK_gc:12,NVM_BLBAT_WLOCK_gc:8,NVM_BLBAT_RLOCK_g
 164               		.stabs	"NVM_BLBAT_t:t(6,106)=(6,105)",128,0,1037,0
 165               		.stabs	"NVM_LB_enum:T(6,107)=@s8;eNVM_LB_NOLOCK_gc:3,NVM_LB_WLOCK_gc:2,NVM_LB_RWLOCK_gc:0,;",128,0
 166               		.stabs	"NVM_LB_t:t(6,108)=(6,107)",128,0,1045,0
 167               		.stabs	"BOOTRST_enum:T(6,109)=@s8;eBOOTRST_BOOTLDR_gc:0,BOOTRST_APPLICATION_gc:64,;",128,0,0,0
 168               		.stabs	"BOOTRST_t:t(6,110)=(6,109)",128,0,1052,0
 169               		.stabs	"BOD_enum:T(6,111)=@s8;eBOD_INSAMPLEDMODE_gc:1,BOD_CONTINOUSLY_gc:2,BOD_DISABLED_gc:3,;",12
 170               		.stabs	"BOD_t:t(6,112)=(6,111)",128,0,1060,0
 171               		.stabs	"WD_enum:T(6,113)=@s8;eWD_8CLK_gc:0,WD_16CLK_gc:16,WD_32CLK_gc:32,WD_64CLK_gc:48,WD_128CLK_
GAS LISTING /tmp/ccEEyJiu.s 			page 4


 172               		.stabs	"WD_t:t(6,114)=(6,113)",128,0,1076,0
 173               		.stabs	"SUT_enum:T(6,115)=@s8;eSUT_0MS_gc:12,SUT_4MS_gc:4,SUT_64MS_gc:0,;",128,0,0,0
 174               		.stabs	"SUT_t:t(6,116)=(6,115)",128,0,1084,0
 175               		.stabs	"BODLVL_enum:T(6,117)=@s8;eBODLVL_1V6_gc:7,BODLVL_1V9_gc:6,BODLVL_2V1_gc:5,BODLVL_2V4_gc:4,
 176               		.stabs	"BODLVL_t:t(6,118)=(6,117)",128,0,1096,0
 177               		.stabs	"AC_struct:T(6,119)=s8AC0CTRL:(6,8),0,8;AC1CTRL:(6,8),8,8;AC0MUXCTRL:(6,8),16,8;AC1MUXCTRL:
 178               		.stabs	"AC_t:t(6,120)=(6,119)",128,0,1116,0
 179               		.stabs	"AC_INTMODE_enum:T(6,121)=@s8;eAC_INTMODE_BOTHEDGES_gc:0,AC_INTMODE_FALLING_gc:128,AC_INTMO
 180               		.stabs	"AC_INTMODE_t:t(6,122)=(6,121)",128,0,1124,0
 181               		.stabs	"AC_INTLVL_enum:T(6,123)=@s8;eAC_INTLVL_OFF_gc:0,AC_INTLVL_LO_gc:16,AC_INTLVL_MED_gc:32,AC_
 182               		.stabs	"AC_INTLVL_t:t(6,124)=(6,123)",128,0,1133,0
 183               		.stabs	"AC_HYSMODE_enum:T(6,125)=@s8;eAC_HYSMODE_NO_gc:0,AC_HYSMODE_SMALL_gc:2,AC_HYSMODE_LARGE_gc
 184               		.stabs	"AC_HYSMODE_t:t(6,126)=(6,125)",128,0,1141,0
 185               		.stabs	"AC_MUXPOS_enum:T(6,127)=@s8;eAC_MUXPOS_PIN0_gc:0,AC_MUXPOS_PIN1_gc:8,AC_MUXPOS_PIN2_gc:16,
 186               		.stabs	"AC_MUXPOS_t:t(6,128)=(6,127)",128,0,1154,0
 187               		.stabs	"AC_MUXNEG_enum:T(6,129)=@s8;eAC_MUXNEG_PIN0_gc:0,AC_MUXNEG_PIN1_gc:1,AC_MUXNEG_PIN3_gc:2,A
 188               		.stabs	"AC_MUXNEG_t:t(6,130)=(6,129)",128,0,1167,0
 189               		.stabs	"AC_WINTMODE_enum:T(6,131)=@s8;eAC_WINTMODE_ABOVE_gc:0,AC_WINTMODE_INSIDE_gc:4,AC_WINTMODE_
 190               		.stabs	"AC_WINTMODE_t:t(6,132)=(6,131)",128,0,1176,0
 191               		.stabs	"AC_WINTLVL_enum:T(6,133)=@s8;eAC_WINTLVL_OFF_gc:0,AC_WINTLVL_LO_gc:1,AC_WINTLVL_MED_gc:2,A
 192               		.stabs	"AC_WINTLVL_t:t(6,134)=(6,133)",128,0,1185,0
 193               		.stabs	"AC_WSTATE_enum:T(6,135)=@s8;eAC_WSTATE_ABOVE_gc:0,AC_WSTATE_INSIDE_gc:64,AC_WSTATE_BELOW_g
 194               		.stabs	"AC_WSTATE_t:t(6,136)=(6,135)",128,0,1193,0
 195               		.stabs	"ADC_CH_struct:T(6,137)=s8CTRL:(6,8),0,8;MUXCTRL:(6,8),8,8;INTCTRL:(6,8),16,8;INTFLAGS:(6,8
 196               		.stabs	"ADC_CH_t:t(6,140)=(6,137)",128,0,1212,0
 197               		.stabs	"ADC_struct:T(6,141)=s64CTRLA:(6,8),0,8;CTRLB:(6,8),8,8;REFCTRL:(6,8),16,8;EVCTRL:(6,8),24,
 198               		.stabs	"ADC_t:t(6,154)=(6,141)",128,0,1253,0
 199               		.stabs	"ADC_CH_MUXPOS_enum:T(6,155)=@s8;eADC_CH_MUXPOS_PIN0_gc:0,ADC_CH_MUXPOS_PIN1_gc:8,ADC_CH_MU
 200               		.stabs	"ADC_CH_MUXPOS_t:t(6,156)=(6,155)",128,0,1266,0
 201               		.stabs	"ADC_CH_MUXINT_enum:T(6,157)=@s8;eADC_CH_MUXINT_TEMP_gc:0,ADC_CH_MUXINT_BANDGAP_gc:8,ADC_CH
 202               		.stabs	"ADC_CH_MUXINT_t:t(6,158)=(6,157)",128,0,1275,0
 203               		.stabs	"ADC_CH_MUXNEG_enum:T(6,159)=@s8;eADC_CH_MUXNEG_PIN0_gc:0,ADC_CH_MUXNEG_PIN1_gc:1,ADC_CH_MU
 204               		.stabs	"ADC_CH_MUXNEG_t:t(6,160)=(6,159)",128,0,1288,0
 205               		.stabs	"ADC_CH_INPUTMODE_enum:T(6,161)=@s8;eADC_CH_INPUTMODE_INTERNAL_gc:0,ADC_CH_INPUTMODE_SINGLE
 206               		.stabs	"ADC_CH_INPUTMODE_t:t(6,162)=(6,161)",128,0,1297,0
 207               		.stabs	"ADC_CH_GAIN_enum:T(6,163)=@s8;eADC_CH_GAIN_1X_gc:0,ADC_CH_GAIN_2X_gc:4,ADC_CH_GAIN_4X_gc:8
 208               		.stabs	"ADC_CH_GAIN_t:t(6,164)=(6,163)",128,0,1309,0
 209               		.stabs	"ADC_RESOLUTION_enum:T(6,165)=@s8;eADC_RESOLUTION_12BIT_gc:0,ADC_RESOLUTION_8BIT_gc:4,ADC_R
 210               		.stabs	"ADC_RESOLUTION_t:t(6,166)=(6,165)",128,0,1317,0
 211               		.stabs	"ADC_REFSEL_enum:T(6,167)=@s8;eADC_REFSEL_INT1V_gc:0,ADC_REFSEL_VCC_gc:16,ADC_REFSEL_AREFA_
 212               		.stabs	"ADC_REFSEL_t:t(6,168)=(6,167)",128,0,1326,0
 213               		.stabs	"ADC_SWEEP_enum:T(6,169)=@s8;eADC_SWEEP_0_gc:0,ADC_SWEEP_01_gc:64,ADC_SWEEP_012_gc:128,ADC_
 214               		.stabs	"ADC_SWEEP_t:t(6,170)=(6,169)",128,0,1335,0
 215               		.stabs	"ADC_EVSEL_enum:T(6,171)=@s8;eADC_EVSEL_0123_gc:0,ADC_EVSEL_1234_gc:8,ADC_EVSEL_2345_gc:16,
 216               		.stabs	"ADC_EVSEL_t:t(6,172)=(6,171)",128,0,1348,0
 217               		.stabs	"ADC_EVACT_enum:T(6,173)=@s8;eADC_EVACT_NONE_gc:0,ADC_EVACT_CH0_gc:1,ADC_EVACT_CH01_gc:2,AD
 218               		.stabs	"ADC_EVACT_t:t(6,174)=(6,173)",128,0,1360,0
 219               		.stabs	"ADC_CH_INTMODE_enum:T(6,175)=@s8;eADC_CH_INTMODE_COMPLETE_gc:0,ADC_CH_INTMODE_BELOW_gc:4,A
 220               		.stabs	"ADC_CH_INTMODE_t:t(6,176)=(6,175)",128,0,1368,0
 221               		.stabs	"ADC_CH_INTLVL_enum:T(6,177)=@s8;eADC_CH_INTLVL_OFF_gc:0,ADC_CH_INTLVL_LO_gc:1,ADC_CH_INTLV
 222               		.stabs	"ADC_CH_INTLVL_t:t(6,178)=(6,177)",128,0,1377,0
 223               		.stabs	"ADC_DMASEL_enum:T(6,179)=@s8;eADC_DMASEL_OFF_gc:0,ADC_DMASEL_CH01_gc:64,ADC_DMASEL_CH012_g
 224               		.stabs	"ADC_DMASEL_t:t(6,180)=(6,179)",128,0,1386,0
 225               		.stabs	"ADC_PRESCALER_enum:T(6,181)=@s8;eADC_PRESCALER_DIV4_gc:0,ADC_PRESCALER_DIV8_gc:1,ADC_PRESC
 226               		.stabs	"ADC_PRESCALER_t:t(6,182)=(6,181)",128,0,1399,0
 227               		.stabs	"DAC_struct:T(6,183)=s28CTRLA:(6,8),0,8;CTRLB:(6,8),8,8;CTRLC:(6,8),16,8;EVCTRL:(6,8),24,8;
 228               		.stabs	"DAC_t:t(6,188)=(6,183)",128,0,1437,0
GAS LISTING /tmp/ccEEyJiu.s 			page 5


 229               		.stabs	"DAC_CHSEL_enum:T(6,189)=@s8;eDAC_CHSEL_SINGLE_gc:0,DAC_CHSEL_DUAL_gc:64,;",128,0,0,0
 230               		.stabs	"DAC_CHSEL_t:t(6,190)=(6,189)",128,0,1444,0
 231               		.stabs	"DAC_REFSEL_enum:T(6,191)=@s8;eDAC_REFSEL_INT1V_gc:0,DAC_REFSEL_AVCC_gc:8,DAC_REFSEL_AREFA_
 232               		.stabs	"DAC_REFSEL_t:t(6,192)=(6,191)",128,0,1453,0
 233               		.stabs	"DAC_EVSEL_enum:T(6,193)=@s8;eDAC_EVSEL_0_gc:0,DAC_EVSEL_1_gc:1,DAC_EVSEL_2_gc:2,DAC_EVSEL_
 234               		.stabs	"DAC_EVSEL_t:t(6,194)=(6,193)",128,0,1466,0
 235               		.stabs	"DAC_CONINTVAL_enum:T(6,195)=@s8;eDAC_CONINTVAL_1CLK_gc:0,DAC_CONINTVAL_2CLK_gc:16,DAC_CONI
 236               		.stabs	"DAC_CONINTVAL_t:t(6,196)=(6,195)",128,0,1479,0
 237               		.stabs	"DAC_REFRESH_enum:T(6,197)=@s8;eDAC_REFRESH_16CLK_gc:0,DAC_REFRESH_32CLK_gc:1,DAC_REFRESH_6
 238               		.stabs	"DAC_REFRESH_t:t(6,198)=(6,197)",128,0,1498,0
 239               		.stabs	"RTC_struct:T(6,199)=s14CTRL:(6,8),0,8;STATUS:(6,8),8,8;INTCTRL:(6,8),16,8;INTFLAGS:(6,8),2
 240               		.stabs	"RTC_t:t(6,206)=(6,199)",128,0,1521,0
 241               		.stabs	"RTC_PRESCALER_enum:T(6,207)=@s8;eRTC_PRESCALER_OFF_gc:0,RTC_PRESCALER_DIV1_gc:1,RTC_PRESCA
 242               		.stabs	"RTC_PRESCALER_t:t(6,208)=(6,207)",128,0,1534,0
 243               		.stabs	"RTC_COMPINTLVL_enum:T(6,209)=@s8;eRTC_COMPINTLVL_OFF_gc:0,RTC_COMPINTLVL_LO_gc:4,RTC_COMPI
 244               		.stabs	"RTC_COMPINTLVL_t:t(6,210)=(6,209)",128,0,1543,0
 245               		.stabs	"RTC_OVFINTLVL_enum:T(6,211)=@s8;eRTC_OVFINTLVL_OFF_gc:0,RTC_OVFINTLVL_LO_gc:1,RTC_OVFINTLV
 246               		.stabs	"RTC_OVFINTLVL_t:t(6,212)=(6,211)",128,0,1552,0
 247               		.stabs	"EBI_CS_struct:T(6,213)=s4CTRLA:(6,8),0,8;CTRLB:(6,8),8,8;:(6,214)=u2BASEADDR:(6,52),0,16;:
 248               		.stabs	"EBI_CS_t:t(6,216)=(6,213)",128,0,1567,0
 249               		.stabs	"EBI_struct:T(6,217)=s32CTRL:(6,8),0,8;SDRAMCTRLA:(6,8),8,8;reserved_0x02:(6,8),16,8;reserv
 250               		.stabs	"EBI_t:t(6,222)=(6,217)",128,0,1596,0
 251               		.stabs	"EBI_CS_ASIZE_enum:T(6,223)=@s8;eEBI_CS_ASIZE_256B_gc:0,EBI_CS_ASIZE_512B_gc:4,EBI_CS_ASIZE
 252               		.stabs	"EBI_CS_ASIZE_t:t(6,224)=(6,223)",128,0,1618,0
 253               		.stabs	"EBI_CS_SRWS_enum:T(6,225)=@s8;eEBI_CS_SRWS_0CLK_gc:0,EBI_CS_SRWS_1CLK_gc:1,EBI_CS_SRWS_2CL
 254               		.stabs	"EBI_CS_SRWS_t:t(6,226)=(6,225)",128,0,1631,0
 255               		.stabs	"EBI_CS_MODE_enum:T(6,227)=@s8;eEBI_CS_MODE_DISABLED_gc:0,EBI_CS_MODE_SRAM_gc:1,EBI_CS_MODE
 256               		.stabs	"EBI_CS_MODE_t:t(6,228)=(6,227)",128,0,1640,0
 257               		.stabs	"EBI_CS_SDMODE_enum:T(6,229)=@s8;eEBI_CS_SDMODE_NORMAL_gc:0,EBI_CS_SDMODE_LOAD_gc:1,;",128,
 258               		.stabs	"EBI_CS_SDMODE_t:t(6,230)=(6,229)",128,0,1647,0
 259               		.stabs	"EBI_SDDATAW_enum:T(6,231)=@s8;eEBI_SDDATAW_4BIT_gc:0,EBI_SDDATAW_8BIT_gc:64,;",128,0,0,0
 260               		.stabs	"EBI_SDDATAW_t:t(6,232)=(6,231)",128,0,1654,0
 261               		.stabs	"EBI_LPCMODE_enum:T(6,233)=@s8;eEBI_LPCMODE_ALE1_gc:0,EBI_LPCMODE_ALE12_gc:32,;",128,0,0,0
 262               		.stabs	"EBI_LPCMODE_t:t(6,234)=(6,233)",128,0,1661,0
 263               		.stabs	"EBI_SRMODE_enum:T(6,235)=@s8;eEBI_SRMODE_ALE1_gc:0,EBI_SRMODE_ALE2_gc:4,EBI_SRMODE_ALE12_g
 264               		.stabs	"EBI_SRMODE_t:t(6,236)=(6,235)",128,0,1670,0
 265               		.stabs	"EBI_IFMODE_enum:T(6,237)=@s8;eEBI_IFMODE_DISABLED_gc:0,EBI_IFMODE_3PORT_gc:1,EBI_IFMODE_4P
 266               		.stabs	"EBI_IFMODE_t:t(6,238)=(6,237)",128,0,1679,0
 267               		.stabs	"EBI_SDCOL_enum:T(6,239)=@s8;eEBI_SDCOL_8BIT_gc:0,EBI_SDCOL_9BIT_gc:1,EBI_SDCOL_10BIT_gc:2,
 268               		.stabs	"EBI_SDCOL_t:t(6,240)=(6,239)",128,0,1688,0
 269               		.stabs	"EBI_MRDLY_enum:T(6,241)=@s8;eEBI_MRDLY_0CLK_gc:0,EBI_MRDLY_1CLK_gc:64,EBI_MRDLY_2CLK_gc:12
 270               		.stabs	"EBI_MRDLY_t:t(6,242)=(6,241)",128,0,1697,0
 271               		.stabs	"EBI_ROWCYCDLY_enum:T(6,243)=@s8;eEBI_ROWCYCDLY_0CLK_gc:0,EBI_ROWCYCDLY_1CLK_gc:8,EBI_ROWCY
 272               		.stabs	"EBI_ROWCYCDLY_t:t(6,244)=(6,243)",128,0,1710,0
 273               		.stabs	"EBI_RPDLY_enum:T(6,245)=@s8;eEBI_RPDLY_0CLK_gc:0,EBI_RPDLY_1CLK_gc:1,EBI_RPDLY_2CLK_gc:2,E
 274               		.stabs	"EBI_RPDLY_t:t(6,246)=(6,245)",128,0,1723,0
 275               		.stabs	"EBI_WRDLY_enum:T(6,247)=@s8;eEBI_WRDLY_0CLK_gc:0,EBI_WRDLY_1CLK_gc:64,EBI_WRDLY_2CLK_gc:12
 276               		.stabs	"EBI_WRDLY_t:t(6,248)=(6,247)",128,0,1732,0
 277               		.stabs	"EBI_ESRDLY_enum:T(6,249)=@s8;eEBI_ESRDLY_0CLK_gc:0,EBI_ESRDLY_1CLK_gc:8,EBI_ESRDLY_2CLK_gc
 278               		.stabs	"EBI_ESRDLY_t:t(6,250)=(6,249)",128,0,1745,0
 279               		.stabs	"EBI_ROWCOLDLY_enum:T(6,251)=@s8;eEBI_ROWCOLDLY_0CLK_gc:0,EBI_ROWCOLDLY_1CLK_gc:1,EBI_ROWCO
 280               		.stabs	"EBI_ROWCOLDLY_t:t(6,252)=(6,251)",128,0,1758,0
 281               		.stabs	"TWI_MASTER_struct:T(6,253)=s7CTRLA:(6,8),0,8;CTRLB:(6,8),8,8;CTRLC:(6,8),16,8;STATUS:(6,8)
 282               		.stabs	"TWI_MASTER_t:t(6,254)=(6,253)",128,0,1777,0
 283               		.stabs	"TWI_SLAVE_struct:T(6,255)=s6CTRLA:(6,8),0,8;CTRLB:(6,8),8,8;STATUS:(6,8),16,8;ADDR:(6,8),2
 284               		.stabs	"TWI_SLAVE_t:t(6,256)=(6,255)",128,0,1794,0
 285               		.stabs	"TWI_struct:T(6,257)=s14CTRL:(6,8),0,8;MASTER:(6,254),8,56;SLAVE:(6,256),64,48;;",128,0,0,0
GAS LISTING /tmp/ccEEyJiu.s 			page 6


 286               		.stabs	"TWI_t:t(6,258)=(6,257)",128,0,1808,0
 287               		.stabs	"TWI_MASTER_INTLVL_enum:T(6,259)=@s8;eTWI_MASTER_INTLVL_OFF_gc:0,TWI_MASTER_INTLVL_LO_gc:64
 288               		.stabs	"TWI_MASTER_INTLVL_t:t(6,260)=(6,259)",128,0,1817,0
 289               		.stabs	"TWI_MASTER_TIMEOUT_enum:T(6,261)=@s8;eTWI_MASTER_TIMEOUT_DISABLED_gc:0,TWI_MASTER_TIMEOUT_
 290               		.stabs	"TWI_MASTER_TIMEOUT_t:t(6,262)=(6,261)",128,0,1826,0
 291               		.stabs	"TWI_MASTER_CMD_enum:T(6,263)=@s8;eTWI_MASTER_CMD_NOACT_gc:0,TWI_MASTER_CMD_REPSTART_gc:1,T
 292               		.stabs	"TWI_MASTER_CMD_t:t(6,264)=(6,263)",128,0,1835,0
 293               		.stabs	"TWI_MASTER_BUSSTATE_enum:T(6,265)=@s8;eTWI_MASTER_BUSSTATE_UNKNOWN_gc:0,TWI_MASTER_BUSSTAT
 294               		.stabs	"TWI_MASTER_BUSSTATE_t:t(6,266)=(6,265)",128,0,1844,0
 295               		.stabs	"TWI_SLAVE_INTLVL_enum:T(6,267)=@s8;eTWI_SLAVE_INTLVL_OFF_gc:0,TWI_SLAVE_INTLVL_LO_gc:64,TW
 296               		.stabs	"TWI_SLAVE_INTLVL_t:t(6,268)=(6,267)",128,0,1853,0
 297               		.stabs	"TWI_SLAVE_CMD_enum:T(6,269)=@s8;eTWI_SLAVE_CMD_NOACT_gc:0,TWI_SLAVE_CMD_COMPTRANS_gc:2,TWI
 298               		.stabs	"TWI_SLAVE_CMD_t:t(6,270)=(6,269)",128,0,1861,0
 299               		.stabs	"PORTCFG_struct:T(6,271)=s5MPCMASK:(6,8),0,8;reserved_0x01:(6,8),8,8;VPCTRLA:(6,8),16,8;VPC
 300               		.stabs	"PORTCFG_t:t(6,272)=(6,271)",128,0,1878,0
 301               		.stabs	"VPORT_struct:T(6,273)=s4DIR:(6,8),0,8;OUT:(6,8),8,8;IN:(6,8),16,8;INTFLAGS:(6,8),24,8;;",1
 302               		.stabs	"VPORT_t:t(6,274)=(6,273)",128,0,1893,0
 303               		.stabs	"PORT_struct:T(6,275)=s24DIR:(6,8),0,8;DIRSET:(6,8),8,8;DIRCLR:(6,8),16,8;DIRTGL:(6,8),24,8
 304               		.stabs	"PORT_t:t(6,276)=(6,275)",128,0,1928,0
 305               		.stabs	"PORTCFG_VP0MAP_enum:T(6,277)=@s8;ePORTCFG_VP0MAP_PORTA_gc:0,PORTCFG_VP0MAP_PORTB_gc:1,PORT
 306               		.stabs	"PORTCFG_VP0MAP_t:t(6,278)=(6,277)",128,0,1949,0
 307               		.stabs	"PORTCFG_VP1MAP_enum:T(6,279)=@s8;ePORTCFG_VP1MAP_PORTA_gc:0,PORTCFG_VP1MAP_PORTB_gc:16,POR
 308               		.stabs	"PORTCFG_VP1MAP_t:t(6,280)=(6,279)",128,0,1970,0
 309               		.stabs	"PORTCFG_VP2MAP_enum:T(6,281)=@s8;ePORTCFG_VP2MAP_PORTA_gc:0,PORTCFG_VP2MAP_PORTB_gc:1,PORT
 310               		.stabs	"PORTCFG_VP2MAP_t:t(6,282)=(6,281)",128,0,1991,0
 311               		.stabs	"PORTCFG_VP3MAP_enum:T(6,283)=@s8;ePORTCFG_VP3MAP_PORTA_gc:0,PORTCFG_VP3MAP_PORTB_gc:16,POR
 312               		.stabs	"PORTCFG_VP3MAP_t:t(6,284)=(6,283)",128,0,2012,0
 313               		.stabs	"PORTCFG_CLKOUT_enum:T(6,285)=@s8;ePORTCFG_CLKOUT_OFF_gc:0,PORTCFG_CLKOUT_PC7_gc:1,PORTCFG_
 314               		.stabs	"PORTCFG_CLKOUT_t:t(6,286)=(6,285)",128,0,2021,0
 315               		.stabs	"PORTCFG_EVOUT_enum:T(6,287)=@s8;ePORTCFG_EVOUT_OFF_gc:0,PORTCFG_EVOUT_PC7_gc:16,PORTCFG_EV
 316               		.stabs	"PORTCFG_EVOUT_t:t(6,288)=(6,287)",128,0,2030,0
 317               		.stabs	"PORT_INT0LVL_enum:T(6,289)=@s8;ePORT_INT0LVL_OFF_gc:0,PORT_INT0LVL_LO_gc:1,PORT_INT0LVL_ME
 318               		.stabs	"PORT_INT0LVL_t:t(6,290)=(6,289)",128,0,2039,0
 319               		.stabs	"PORT_INT1LVL_enum:T(6,291)=@s8;ePORT_INT1LVL_OFF_gc:0,PORT_INT1LVL_LO_gc:4,PORT_INT1LVL_ME
 320               		.stabs	"PORT_INT1LVL_t:t(6,292)=(6,291)",128,0,2048,0
 321               		.stabs	"PORT_OPC_enum:T(6,293)=@s8;ePORT_OPC_TOTEM_gc:0,PORT_OPC_BUSKEEPER_gc:8,PORT_OPC_PULLDOWN_
 322               		.stabs	"PORT_OPC_t:t(6,294)=(6,293)",128,0,2061,0
 323               		.stabs	"PORT_ISC_enum:T(6,295)=@s8;ePORT_ISC_BOTHEDGES_gc:0,PORT_ISC_RISING_gc:1,PORT_ISC_FALLING_
 324               		.stabs	"PORT_ISC_t:t(6,296)=(6,295)",128,0,2071,0
 325               		.stabs	"TC0_struct:T(6,297)=s64CTRLA:(6,8),0,8;CTRLB:(6,8),8,8;CTRLC:(6,8),16,8;CTRLD:(6,8),24,8;C
 326               		.stabs	"TC0_t:t(6,320)=(6,297)",128,0,2136,0
 327               		.stabs	"TC1_struct:T(6,321)=s60CTRLA:(6,8),0,8;CTRLB:(6,8),8,8;CTRLC:(6,8),16,8;CTRLD:(6,8),24,8;C
 328               		.stabs	"TC1_t:t(6,336)=(6,321)",128,0,2200,0
 329               		.stabs	"AWEX_struct:T(6,337)=s13CTRL:(6,8),0,8;reserved_0x01:(6,8),8,8;FDEMASK:(6,8),16,8;FDCTRL:(
 330               		.stabs	"AWEX_t:t(6,338)=(6,337)",128,0,2224,0
 331               		.stabs	"HIRES_struct:T(6,339)=s1CTRLA:(6,8),0,8;;",128,0,0,0
 332               		.stabs	"HIRES_t:t(6,340)=(6,339)",128,0,2236,0
 333               		.stabs	"TC_CLKSEL_enum:T(6,341)=@s8;eTC_CLKSEL_OFF_gc:0,TC_CLKSEL_DIV1_gc:1,TC_CLKSEL_DIV2_gc:2,TC
 334               		.stabs	"TC_CLKSEL_t:t(6,342)=(6,341)",128,0,2257,0
 335               		.stabs	"TC_WGMODE_enum:T(6,343)=@s8;eTC_WGMODE_NORMAL_gc:0,TC_WGMODE_FRQ_gc:1,TC_WGMODE_SS_gc:3,TC
 336               		.stabs	"TC_WGMODE_t:t(6,344)=(6,343)",128,0,2268,0
 337               		.stabs	"TC_EVACT_enum:T(6,345)=@s8;eTC_EVACT_OFF_gc:0,TC_EVACT_CAPT_gc:32,TC_EVACT_UPDOWN_gc:64,TC
 338               		.stabs	"TC_EVACT_t:t(6,346)=(6,345)",128,0,2280,0
 339               		.stabs	"TC_EVSEL_enum:T(6,347)=@s8;eTC_EVSEL_OFF_gc:0,TC_EVSEL_CH0_gc:8,TC_EVSEL_CH1_gc:9,TC_EVSEL
 340               		.stabs	"TC_EVSEL_t:t(6,348)=(6,347)",128,0,2294,0
 341               		.stabs	"TC_ERRINTLVL_enum:T(6,349)=@s8;eTC_ERRINTLVL_OFF_gc:0,TC_ERRINTLVL_LO_gc:4,TC_ERRINTLVL_ME
 342               		.stabs	"TC_ERRINTLVL_t:t(6,350)=(6,349)",128,0,2303,0
GAS LISTING /tmp/ccEEyJiu.s 			page 7


 343               		.stabs	"TC_OVFINTLVL_enum:T(6,351)=@s8;eTC_OVFINTLVL_OFF_gc:0,TC_OVFINTLVL_LO_gc:1,TC_OVFINTLVL_ME
 344               		.stabs	"TC_OVFINTLVL_t:t(6,352)=(6,351)",128,0,2312,0
 345               		.stabs	"TC_CCDINTLVL_enum:T(6,353)=@s8;eTC_CCDINTLVL_OFF_gc:0,TC_CCDINTLVL_LO_gc:64,TC_CCDINTLVL_M
 346               		.stabs	"TC_CCDINTLVL_t:t(6,354)=(6,353)",128,0,2321,0
 347               		.stabs	"TC_CCCINTLVL_enum:T(6,355)=@s8;eTC_CCCINTLVL_OFF_gc:0,TC_CCCINTLVL_LO_gc:16,TC_CCCINTLVL_M
 348               		.stabs	"TC_CCCINTLVL_t:t(6,356)=(6,355)",128,0,2330,0
 349               		.stabs	"TC_CCBINTLVL_enum:T(6,357)=@s8;eTC_CCBINTLVL_OFF_gc:0,TC_CCBINTLVL_LO_gc:4,TC_CCBINTLVL_ME
 350               		.stabs	"TC_CCBINTLVL_t:t(6,358)=(6,357)",128,0,2339,0
 351               		.stabs	"TC_CCAINTLVL_enum:T(6,359)=@s8;eTC_CCAINTLVL_OFF_gc:0,TC_CCAINTLVL_LO_gc:1,TC_CCAINTLVL_ME
 352               		.stabs	"TC_CCAINTLVL_t:t(6,360)=(6,359)",128,0,2348,0
 353               		.stabs	"TC_CMD_enum:T(6,361)=@s8;eTC_CMD_NONE_gc:0,TC_CMD_UPDATE_gc:4,TC_CMD_RESTART_gc:8,TC_CMD_R
 354               		.stabs	"TC_CMD_t:t(6,362)=(6,361)",128,0,2357,0
 355               		.stabs	"AWEX_FDACT_enum:T(6,363)=@s8;eAWEX_FDACT_NONE_gc:0,AWEX_FDACT_CLEAROE_gc:1,AWEX_FDACT_CLEA
 356               		.stabs	"AWEX_FDACT_t:t(6,364)=(6,363)",128,0,2365,0
 357               		.stabs	"HIRES_HREN_enum:T(6,365)=@s8;eHIRES_HREN_NONE_gc:0,HIRES_HREN_TC0_gc:1,HIRES_HREN_TC1_gc:2
 358               		.stabs	"HIRES_HREN_t:t(6,366)=(6,365)",128,0,2374,0
 359               		.stabs	"USART_struct:T(6,367)=s8DATA:(6,8),0,8;STATUS:(6,8),8,8;reserved_0x02:(6,8),16,8;CTRLA:(6,
 360               		.stabs	"USART_t:t(6,368)=(6,367)",128,0,2394,0
 361               		.stabs	"USART_RXCINTLVL_enum:T(6,369)=@s8;eUSART_RXCINTLVL_OFF_gc:0,USART_RXCINTLVL_LO_gc:16,USART
 362               		.stabs	"USART_RXCINTLVL_t:t(6,370)=(6,369)",128,0,2403,0
 363               		.stabs	"USART_TXCINTLVL_enum:T(6,371)=@s8;eUSART_TXCINTLVL_OFF_gc:0,USART_TXCINTLVL_LO_gc:4,USART_
 364               		.stabs	"USART_TXCINTLVL_t:t(6,372)=(6,371)",128,0,2412,0
 365               		.stabs	"USART_DREINTLVL_enum:T(6,373)=@s8;eUSART_DREINTLVL_OFF_gc:0,USART_DREINTLVL_LO_gc:1,USART_
 366               		.stabs	"USART_DREINTLVL_t:t(6,374)=(6,373)",128,0,2421,0
 367               		.stabs	"USART_CHSIZE_enum:T(6,375)=@s8;eUSART_CHSIZE_5BIT_gc:0,USART_CHSIZE_6BIT_gc:1,USART_CHSIZE
 368               		.stabs	"USART_CHSIZE_t:t(6,376)=(6,375)",128,0,2431,0
 369               		.stabs	"USART_CMODE_enum:T(6,377)=@s8;eUSART_CMODE_ASYNCHRONOUS_gc:0,USART_CMODE_SYNCHRONOUS_gc:64
 370               		.stabs	"USART_CMODE_t:t(6,378)=(6,377)",128,0,2440,0
 371               		.stabs	"USART_PMODE_enum:T(6,379)=@s8;eUSART_PMODE_DISABLED_gc:0,USART_PMODE_EVEN_gc:32,USART_PMOD
 372               		.stabs	"USART_PMODE_t:t(6,380)=(6,379)",128,0,2448,0
 373               		.stabs	"SPI_struct:T(6,381)=s4CTRL:(6,8),0,8;INTCTRL:(6,8),8,8;STATUS:(6,8),16,8;DATA:(6,8),24,8;;
 374               		.stabs	"SPI_t:t(6,382)=(6,381)",128,0,2464,0
 375               		.stabs	"SPI_MODE_enum:T(6,383)=@s8;eSPI_MODE_0_gc:0,SPI_MODE_1_gc:4,SPI_MODE_2_gc:8,SPI_MODE_3_gc:
 376               		.stabs	"SPI_MODE_t:t(6,384)=(6,383)",128,0,2473,0
 377               		.stabs	"SPI_PRESCALER_enum:T(6,385)=@s8;eSPI_PRESCALER_DIV4_gc:0,SPI_PRESCALER_DIV16_gc:1,SPI_PRES
 378               		.stabs	"SPI_PRESCALER_t:t(6,386)=(6,385)",128,0,2482,0
 379               		.stabs	"SPI_INTLVL_enum:T(6,387)=@s8;eSPI_INTLVL_OFF_gc:0,SPI_INTLVL_LO_gc:1,SPI_INTLVL_MED_gc:2,S
 380               		.stabs	"SPI_INTLVL_t:t(6,388)=(6,387)",128,0,2491,0
 381               		.stabs	"IRCOM_struct:T(6,389)=s3CTRL:(6,8),0,8;TXPLCTRL:(6,8),8,8;RXPLCTRL:(6,8),16,8;;",128,0,0,0
 382               		.stabs	"IRCOM_t:t(6,390)=(6,389)",128,0,2506,0
 383               		.stabs	"IRDA_EVSEL_enum:T(6,391)=@s8;eIRDA_EVSEL_OFF_gc:0,IRDA_EVSEL_0_gc:8,IRDA_EVSEL_1_gc:9,IRDA
 384               		.stabs	"IRDA_EVSEL_t:t(6,392)=(6,391)",128,0,2520,0
 385               		.stabs	"AES_struct:T(6,393)=s5CTRL:(6,8),0,8;STATUS:(6,8),8,8;STATE:(6,8),16,8;KEY:(6,8),24,8;INTC
 386               		.stabs	"AES_t:t(6,394)=(6,393)",128,0,2537,0
 387               		.stabs	"AES_INTLVL_enum:T(6,395)=@s8;eAES_INTLVL_OFF_gc:0,AES_INTLVL_LO_gc:1,AES_INTLVL_MED_gc:2,A
 388               		.stabs	"AES_INTLVL_t:t(6,396)=(6,395)",128,0,2546,0
 389               		.stabn	162,0,0,0
 390               		.stabs	"/usr/lib/gcc/avr/4.5.3/../../../avr/include/avr/fuse.h",130,0,0,0
 391               		.stabs	"__fuse_t:t(7,1)=(7,2)=s6byte:(7,3)=ar(7,4)=r(7,4);0;0177777;;0;5;(0,11),0,48;;",128,0,234,
 392               		.stabn	162,0,0,0
 393               		.stabn	162,0,0,0
 394               		.stabs	"requiredFiles/avr_compiler.h",130,0,0,0
 395               		.stabs	"/usr/lib/gcc/avr/4.5.3/../../../avr/include/stdlib.h",130,0,0,0
 396               		.stabs	"/usr/lib/gcc/avr/4.5.3/include/stddef.h",130,0,0,0
 397               		.stabs	"size_t:t(10,1)=(0,4)",128,0,211,0
 398               		.stabs	"wchar_t:t(10,2)=(0,1)",128,0,323,0
 399               		.stabn	162,0,0,0
GAS LISTING /tmp/ccEEyJiu.s 			page 8


 400               		.stabs	"div_t:t(9,1)=(9,2)=s4quot:(0,1),0,16;rem:(0,1),16,16;;",128,0,71,0
 401               		.stabs	"ldiv_t:t(9,3)=(9,4)=s8quot:(0,3),0,32;rem:(0,3),32,32;;",128,0,77,0
 402               		.stabs	"__compar_fn_t:t(9,5)=(9,6)=*(9,7)=f(0,1)",128,0,80,0
 403               		.stabn	162,0,0,0
 404               		.stabs	"/usr/lib/gcc/avr/4.5.3/../../../avr/include/avr/pgmspace.h",130,0,0,0
 405               		.stabs	"prog_void:t(11,1)=(11,2)=(11,2)",128,0,217,0
 406               		.stabs	"prog_char:t(11,3)=(11,4)=@s8;r(11,4);0;255;",128,0,218,0
 407               		.stabs	"prog_uchar:t(11,5)=(11,6)=@s8;r(11,6);0;255;",128,0,219,0
 408               		.stabs	"prog_int8_t:t(11,7)=(11,8)=(0,10)",128,0,221,0
 409               		.stabs	"prog_uint8_t:t(11,9)=(11,10)=(0,11)",128,0,222,0
 410               		.stabs	"prog_int16_t:t(11,11)=(11,12)=(0,1)",128,0,223,0
 411               		.stabs	"prog_uint16_t:t(11,13)=(11,14)=(0,4)",128,0,224,0
 412               		.stabs	"prog_int32_t:t(11,15)=(11,16)=(0,3)",128,0,225,0
 413               		.stabs	"prog_uint32_t:t(11,17)=(11,18)=(0,5)",128,0,226,0
 414               		.stabs	"prog_int64_t:t(11,19)=(11,20)=(0,6)",128,0,228,0
 415               		.stabs	"prog_uint64_t:t(11,21)=(11,22)=(0,7)",128,0,229,0
 416               		.stabn	162,0,0,0
 417               		.stabn	162,0,0,0
 418               		.stabs	"CCPWrite:F(0,15)",36,0,77,CCPWrite
 419               		.stabs	"address:P(0,16)=*(6,2)",64,0,77,24
 420               		.stabs	"value:P(5,2)",64,0,77,22
 421               	.global	CCPWrite
 422               		.type	CCPWrite, @function
 423               	CCPWrite:
 424               		.stabd	46,0,0
 425               		.stabs	"requiredFiles/clksys_driver.c",132,0,0,.Ltext1
 426               	.Ltext1:
   1:requiredFiles/clksys_driver.c **** /* This file has been prepared for Doxygen automatic documentation generation.*/
   2:requiredFiles/clksys_driver.c **** /*! \file *********************************************************************
   3:requiredFiles/clksys_driver.c ****  *
   4:requiredFiles/clksys_driver.c ****  * \brief  XMEGA Clock System driver source file.
   5:requiredFiles/clksys_driver.c ****  *
   6:requiredFiles/clksys_driver.c ****  *      This file contains the function implementations for the XMEGA Clock
   7:requiredFiles/clksys_driver.c ****  *      System driver.
   8:requiredFiles/clksys_driver.c ****  *
   9:requiredFiles/clksys_driver.c ****  *      The driver is not intended for size and/or speed critical code, since
  10:requiredFiles/clksys_driver.c ****  *      most functions are just a few lines of code, and the function call
  11:requiredFiles/clksys_driver.c ****  *      overhead would decrease code performance. The driver is intended for
  12:requiredFiles/clksys_driver.c ****  *      rapid prototyping and documentation purposes for getting started with
  13:requiredFiles/clksys_driver.c ****  *      the XMEGA Clock System.
  14:requiredFiles/clksys_driver.c ****  *
  15:requiredFiles/clksys_driver.c ****  *      For size and/or speed critical code, it is recommended to copy the
  16:requiredFiles/clksys_driver.c ****  *      function contents directly into your application instead of making
  17:requiredFiles/clksys_driver.c ****  *      a function call.
  18:requiredFiles/clksys_driver.c ****  *
  19:requiredFiles/clksys_driver.c ****  *      Several functions use the following construct:
  20:requiredFiles/clksys_driver.c ****  *          "some_register = ... | (some_parameter ? SOME_BIT_bm : 0) | ..."
  21:requiredFiles/clksys_driver.c ****  *      Although the use of the ternary operator ( if ? then : else ) is
  22:requiredFiles/clksys_driver.c ****  *      discouraged, in some occasions the operator makes it possible to
  23:requiredFiles/clksys_driver.c ****  *      write pretty clean and neat code. In this driver, the construct is
  24:requiredFiles/clksys_driver.c ****  *      used to set or not set a configuration bit based on a boolean input
  25:requiredFiles/clksys_driver.c ****  *      parameter, such as the "some_parameter" in the example above.
  26:requiredFiles/clksys_driver.c ****  *
  27:requiredFiles/clksys_driver.c ****  * \par Application note:
  28:requiredFiles/clksys_driver.c ****  *      AVR1003: Using the XMEGA Clock System
  29:requiredFiles/clksys_driver.c ****  *
  30:requiredFiles/clksys_driver.c ****  * \par Documentation
GAS LISTING /tmp/ccEEyJiu.s 			page 9


  31:requiredFiles/clksys_driver.c ****  *      For comprehensive code documentation, supported compilers, compiler
  32:requiredFiles/clksys_driver.c ****  *      settings and supported devices see readme.html
  33:requiredFiles/clksys_driver.c ****  *
  34:requiredFiles/clksys_driver.c ****  * \author
  35:requiredFiles/clksys_driver.c ****  *      Atmel Corporation: http://www.atmel.com \n
  36:requiredFiles/clksys_driver.c ****  *      Support email: avr@atmel.com
  37:requiredFiles/clksys_driver.c ****  *
  38:requiredFiles/clksys_driver.c ****  * $Revision: 2771 $
  39:requiredFiles/clksys_driver.c ****  * $Date: 2009-09-11 11:54:26 +0200 (fr, 11 sep 2009) $  \n
  40:requiredFiles/clksys_driver.c ****  *
  41:requiredFiles/clksys_driver.c ****  * Copyright (c) 2008, Atmel Corporation All rights reserved.
  42:requiredFiles/clksys_driver.c ****  *
  43:requiredFiles/clksys_driver.c ****  * Redistribution and use in source and binary forms, with or without
  44:requiredFiles/clksys_driver.c ****  * modification, are permitted provided that the following conditions are met:
  45:requiredFiles/clksys_driver.c ****  *
  46:requiredFiles/clksys_driver.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  47:requiredFiles/clksys_driver.c ****  * this list of conditions and the following disclaimer.
  48:requiredFiles/clksys_driver.c ****  *
  49:requiredFiles/clksys_driver.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  50:requiredFiles/clksys_driver.c ****  * this list of conditions and the following disclaimer in the documentation
  51:requiredFiles/clksys_driver.c ****  * and/or other materials provided with the distribution.
  52:requiredFiles/clksys_driver.c ****  *
  53:requiredFiles/clksys_driver.c ****  * 3. The name of ATMEL may not be used to endorse or promote products derived
  54:requiredFiles/clksys_driver.c ****  * from this software without specific prior written permission.
  55:requiredFiles/clksys_driver.c ****  *
  56:requiredFiles/clksys_driver.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  57:requiredFiles/clksys_driver.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  58:requiredFiles/clksys_driver.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY AND
  59:requiredFiles/clksys_driver.c ****  * SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT,
  60:requiredFiles/clksys_driver.c ****  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  61:requiredFiles/clksys_driver.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  62:requiredFiles/clksys_driver.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  63:requiredFiles/clksys_driver.c ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  64:requiredFiles/clksys_driver.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  65:requiredFiles/clksys_driver.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  66:requiredFiles/clksys_driver.c ****  *****************************************************************************/
  67:requiredFiles/clksys_driver.c **** #include "clksys_driver.h"
  68:requiredFiles/clksys_driver.c **** 
  69:requiredFiles/clksys_driver.c **** /*! \brief CCP write helper function written in assembly.
  70:requiredFiles/clksys_driver.c ****  *
  71:requiredFiles/clksys_driver.c ****  *  This function is written in assembly because of the timecritial
  72:requiredFiles/clksys_driver.c ****  *  operation of writing to the registers.
  73:requiredFiles/clksys_driver.c ****  *
  74:requiredFiles/clksys_driver.c ****  *  \param address A pointer to the address to write to.
  75:requiredFiles/clksys_driver.c ****  *  \param value   The value to put in to the register.
  76:requiredFiles/clksys_driver.c ****  */
  77:requiredFiles/clksys_driver.c **** void CCPWrite( volatile uint8_t * address, uint8_t value )
  78:requiredFiles/clksys_driver.c **** {
 427               		.stabn	68,0,78,.LM0-.LFBB1
 428               	.LM0:
 429               	.LFBB1:
 430 0000 0F93      		push r16
 431 0002 DF93      		push r29
 432 0004 CF93      		push r28
 433 0006 0F92      		push __tmp_reg__
 434 0008 CDB7      		in r28,__SP_L__
 435 000a DEB7      		in r29,__SP_H__
GAS LISTING /tmp/ccEEyJiu.s 			page 10


 436               	/* prologue: function */
 437               	/* frame size = 1 */
 438               	/* stack size = 4 */
 439               	.L__stack_usage = 4
  79:requiredFiles/clksys_driver.c **** #ifdef __ICCAVR__
  80:requiredFiles/clksys_driver.c **** 
  81:requiredFiles/clksys_driver.c **** 	// Store global interrupt setting in scratch register and disable interrupts.
  82:requiredFiles/clksys_driver.c ****         asm("in  R1, 0x3F \n"
  83:requiredFiles/clksys_driver.c **** 	    "cli"
  84:requiredFiles/clksys_driver.c **** 	    );
  85:requiredFiles/clksys_driver.c **** 
  86:requiredFiles/clksys_driver.c **** 	// Move destination address pointer to Z pointer registers.
  87:requiredFiles/clksys_driver.c **** 	asm("movw r30, r16");
  88:requiredFiles/clksys_driver.c **** #ifdef RAMPZ
  89:requiredFiles/clksys_driver.c **** 	asm("ldi  R16, 0 \n"
  90:requiredFiles/clksys_driver.c ****             "out  0x3B, R16"
  91:requiredFiles/clksys_driver.c **** 	    );
  92:requiredFiles/clksys_driver.c **** 
  93:requiredFiles/clksys_driver.c **** #endif
  94:requiredFiles/clksys_driver.c **** 	asm("ldi  r16,  0xD8 \n"
  95:requiredFiles/clksys_driver.c **** 	    "out  0x34, r16  \n"
  96:requiredFiles/clksys_driver.c **** #if (__MEMORY_MODEL__ == 1)
  97:requiredFiles/clksys_driver.c **** 	    "st     Z,  r17  \n");
  98:requiredFiles/clksys_driver.c **** #elif (__MEMORY_MODEL__ == 2)
  99:requiredFiles/clksys_driver.c **** 	    "st     Z,  r18  \n");
 100:requiredFiles/clksys_driver.c **** #else /* (__MEMORY_MODEL__ == 3) || (__MEMORY_MODEL__ == 5) */
 101:requiredFiles/clksys_driver.c **** 	    "st     Z,  r19  \n");
 102:requiredFiles/clksys_driver.c **** #endif /* __MEMORY_MODEL__ */
 103:requiredFiles/clksys_driver.c **** 
 104:requiredFiles/clksys_driver.c **** 	// Restore global interrupt setting from scratch register.
 105:requiredFiles/clksys_driver.c ****         asm("out  0x3F, R1");
 106:requiredFiles/clksys_driver.c **** 
 107:requiredFiles/clksys_driver.c **** #elif defined __GNUC__
 108:requiredFiles/clksys_driver.c **** 	AVR_ENTER_CRITICAL_REGION( );
 440               		.stabn	68,0,108,.LM1-.LFBB1
 441               	.LM1:
 442 000c 2FB7      		in r18,__SREG__
 443 000e 2983      		std Y+1,r18
 444               	/* #APP */
 445               	 ;  108 "requiredFiles/clksys_driver.c" 1
 446 0010 F894      		cli
 447               	 ;  0 "" 2
 109:requiredFiles/clksys_driver.c **** 	volatile uint8_t * tmpAddr = address;
 110:requiredFiles/clksys_driver.c **** #ifdef RAMPZ
 111:requiredFiles/clksys_driver.c **** 	RAMPZ = 0;
 448               		.stabn	68,0,111,.LM2-.LFBB1
 449               	.LM2:
 450               	/* #NOAPP */
 451 0012 1BBE      		out 59-0,__zero_reg__
 112:requiredFiles/clksys_driver.c **** #endif
 113:requiredFiles/clksys_driver.c **** 	asm volatile(
 452               		.stabn	68,0,113,.LM3-.LFBB1
 453               	.LM3:
 454               	/* #APP */
 455               	 ;  113 "requiredFiles/clksys_driver.c" 1
 456 0014 FC01      		movw r30,  r24
 457 0016 08ED      		ldi  r16,  216
GAS LISTING /tmp/ccEEyJiu.s 			page 11


 458 0018 04BF      		out   52, r16
 459 001a 6083      		st     Z,  r22
 460               		
 461               	 ;  0 "" 2
 114:requiredFiles/clksys_driver.c **** 		"movw r30,  %0"	      "\n\t"
 115:requiredFiles/clksys_driver.c **** 		"ldi  r16,  %2"	      "\n\t"
 116:requiredFiles/clksys_driver.c **** 		"out   %3, r16"	      "\n\t"
 117:requiredFiles/clksys_driver.c **** 		"st     Z,  %1"       "\n\t"
 118:requiredFiles/clksys_driver.c **** 		:
 119:requiredFiles/clksys_driver.c **** 		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
 120:requiredFiles/clksys_driver.c **** 		: "r16", "r30", "r31"
 121:requiredFiles/clksys_driver.c **** 		);
 122:requiredFiles/clksys_driver.c **** 
 123:requiredFiles/clksys_driver.c **** 	AVR_LEAVE_CRITICAL_REGION( );
 462               		.stabn	68,0,123,.LM4-.LFBB1
 463               	.LM4:
 464               	/* #NOAPP */
 465 001c 8981      		ldd r24,Y+1
 466 001e 8FBF      		out __SREG__,r24
 467               	/* epilogue start */
 124:requiredFiles/clksys_driver.c **** #endif
 125:requiredFiles/clksys_driver.c **** }
 468               		.stabn	68,0,125,.LM5-.LFBB1
 469               	.LM5:
 470 0020 0F90      		pop __tmp_reg__
 471 0022 CF91      		pop r28
 472 0024 DF91      		pop r29
 473 0026 0F91      		pop r16
 474 0028 0895      		ret
 475               		.size	CCPWrite, .-CCPWrite
 476               		.stabs	"saved_sreg:(6,2)",128,0,108,1
 477               		.stabn	192,0,0,.LFBB1-.LFBB1
 478               		.stabn	224,0,0,.Lscope1-.LFBB1
 479               	.Lscope1:
 480               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 481               		.stabd	78,0,0
 482               		.stabs	"CLKSYS_XOSC_Config:F(0,15)",36,0,141,CLKSYS_XOSC_Config
 483               		.stabs	"freqRange:P(6,31)",64,0,141,24
 484               		.stabs	"lowPower32kHz:P(0,17)=@s8;-16;",64,0,142,22
 485               		.stabs	"xoscModeSelection:P(6,33)",64,0,143,20
 486               	.global	CLKSYS_XOSC_Config
 487               		.type	CLKSYS_XOSC_Config, @function
 488               	CLKSYS_XOSC_Config:
 489               		.stabd	46,0,0
 126:requiredFiles/clksys_driver.c **** 
 127:requiredFiles/clksys_driver.c **** /*! \brief This function configures the external oscillator.
 128:requiredFiles/clksys_driver.c ****  *
 129:requiredFiles/clksys_driver.c ****  *  \note Note that the oscillator cannot be used as a main system clock
 130:requiredFiles/clksys_driver.c ****  *        source without being enabled and stable first. Check the ready flag
 131:requiredFiles/clksys_driver.c ****  *        before using the clock. The macro CLKSYS_IsReady( _oscSel )
 132:requiredFiles/clksys_driver.c ****  *        can be used to check this.
 133:requiredFiles/clksys_driver.c ****  *
 134:requiredFiles/clksys_driver.c ****  *  \param  freqRange          Frequency range for high-frequency crystal, does
 135:requiredFiles/clksys_driver.c ****  *                             not apply for external clock or 32kHz crystals.
 136:requiredFiles/clksys_driver.c ****  *  \param  lowPower32kHz      True of high-quality watch crystals are used and
 137:requiredFiles/clksys_driver.c ****  *                             low-power oscillator is desired.
 138:requiredFiles/clksys_driver.c ****  *  \param  xoscModeSelection  Combined selection of oscillator type (or
GAS LISTING /tmp/ccEEyJiu.s 			page 12


 139:requiredFiles/clksys_driver.c ****  *                             external clock) and startup times.
 140:requiredFiles/clksys_driver.c ****  */
 141:requiredFiles/clksys_driver.c **** void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
 142:requiredFiles/clksys_driver.c ****                          bool lowPower32kHz,
 143:requiredFiles/clksys_driver.c ****                          OSC_XOSCSEL_t xoscModeSelection )
 144:requiredFiles/clksys_driver.c **** {
 490               		.stabn	68,0,144,.LM6-.LFBB2
 491               	.LM6:
 492               	.LFBB2:
 493               	/* prologue: function */
 494               	/* frame size = 0 */
 495               	/* stack size = 0 */
 496               	.L__stack_usage = 0
 145:requiredFiles/clksys_driver.c **** 	OSC.XOSCCTRL = (uint8_t) freqRange |
 497               		.stabn	68,0,145,.LM7-.LFBB2
 498               	.LM7:
 499 002a 6623      		tst r22
 500 002c 01F0      		breq .L4
 501 002e 90E2      		ldi r25,lo8(32)
 502 0030 00C0      		rjmp .L3
 503               	.L4:
 504 0032 90E0      		ldi r25,lo8(0)
 505               	.L3:
 506               		.stabn	68,0,145,.LM8-.LFBB2
 507               	.LM8:
 508 0034 842B      		or r24,r20
 509 0036 892B      		or r24,r25
 510 0038 E0E5      		ldi r30,lo8(80)
 511 003a F0E0      		ldi r31,hi8(80)
 512 003c 8283      		std Z+2,r24
 513               	/* epilogue start */
 146:requiredFiles/clksys_driver.c **** 	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
 147:requiredFiles/clksys_driver.c **** 	               xoscModeSelection;
 148:requiredFiles/clksys_driver.c **** }
 514               		.stabn	68,0,148,.LM9-.LFBB2
 515               	.LM9:
 516 003e 0895      		ret
 517               		.size	CLKSYS_XOSC_Config, .-CLKSYS_XOSC_Config
 518               	.Lscope2:
 519               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 520               		.stabd	78,0,0
 521               		.stabs	"CLKSYS_PLL_Config:F(0,15)",36,0,167,CLKSYS_PLL_Config
 522               		.stabs	"clockSource:P(6,35)",64,0,167,24
 523               		.stabs	"factor:P(5,2)",64,0,167,22
 524               	.global	CLKSYS_PLL_Config
 525               		.type	CLKSYS_PLL_Config, @function
 526               	CLKSYS_PLL_Config:
 527               		.stabd	46,0,0
 149:requiredFiles/clksys_driver.c **** 
 150:requiredFiles/clksys_driver.c **** 
 151:requiredFiles/clksys_driver.c **** /*! \brief This function configures the internal high-frequency PLL.
 152:requiredFiles/clksys_driver.c ****  *
 153:requiredFiles/clksys_driver.c ****  *  Configuration of the internal high-frequency PLL to the correct
 154:requiredFiles/clksys_driver.c ****  *  values. It is used to define the input of the PLL and the factor of
 155:requiredFiles/clksys_driver.c ****  *  multiplication of the input clock source.
 156:requiredFiles/clksys_driver.c ****  *
 157:requiredFiles/clksys_driver.c ****  *  \note Note that the oscillator cannot be used as a main system clock
GAS LISTING /tmp/ccEEyJiu.s 			page 13


 158:requiredFiles/clksys_driver.c ****  *        source without being enabled and stable first. Check the ready flag
 159:requiredFiles/clksys_driver.c ****  *        before using the clock. The macro CLKSYS_IsReady( _oscSel )
 160:requiredFiles/clksys_driver.c ****  *        can be used to check this.
 161:requiredFiles/clksys_driver.c ****  *
 162:requiredFiles/clksys_driver.c ****  *  \param  clockSource Reference clock source for the PLL,
 163:requiredFiles/clksys_driver.c ****  *                      must be above 0.4MHz.
 164:requiredFiles/clksys_driver.c ****  *  \param  factor      PLL multiplication factor, must be
 165:requiredFiles/clksys_driver.c ****  *                      from 1 to 31, inclusive.
 166:requiredFiles/clksys_driver.c ****  */
 167:requiredFiles/clksys_driver.c **** void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
 168:requiredFiles/clksys_driver.c **** {
 528               		.stabn	68,0,168,.LM10-.LFBB3
 529               	.LM10:
 530               	.LFBB3:
 531               	/* prologue: function */
 532               	/* frame size = 0 */
 533               	/* stack size = 0 */
 534               	.L__stack_usage = 0
 169:requiredFiles/clksys_driver.c **** 	factor &= OSC_PLLFAC_gm;
 535               		.stabn	68,0,169,.LM11-.LFBB3
 536               	.LM11:
 537 0040 6F71      		andi r22,lo8(31)
 170:requiredFiles/clksys_driver.c **** 	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
 538               		.stabn	68,0,170,.LM12-.LFBB3
 539               	.LM12:
 540 0042 682B      		or r22,r24
 541 0044 E0E5      		ldi r30,lo8(80)
 542 0046 F0E0      		ldi r31,hi8(80)
 543 0048 6583      		std Z+5,r22
 544               	/* epilogue start */
 171:requiredFiles/clksys_driver.c **** }
 545               		.stabn	68,0,171,.LM13-.LFBB3
 546               	.LM13:
 547 004a 0895      		ret
 548               		.size	CLKSYS_PLL_Config, .-CLKSYS_PLL_Config
 549               	.Lscope3:
 550               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 551               		.stabd	78,0,0
 552               		.stabs	"CLKSYS_Disable:F(5,2)",36,0,187,CLKSYS_Disable
 553               		.stabs	"oscSel:P(5,2)",64,0,187,24
 554               	.global	CLKSYS_Disable
 555               		.type	CLKSYS_Disable, @function
 556               	CLKSYS_Disable:
 557               		.stabd	46,0,0
 172:requiredFiles/clksys_driver.c **** 
 173:requiredFiles/clksys_driver.c **** 
 174:requiredFiles/clksys_driver.c **** /*! \brief This function disables the selected oscillator.
 175:requiredFiles/clksys_driver.c ****  *
 176:requiredFiles/clksys_driver.c ****  *  This function will disable the selected oscillator if possible.
 177:requiredFiles/clksys_driver.c ****  *  If it is currently used as a main system clock source, hardware will
 178:requiredFiles/clksys_driver.c ****  *  disregard the disable attempt, and this function will return zero.
 179:requiredFiles/clksys_driver.c ****  *  If it fails, change to another main system clock source and try again.
 180:requiredFiles/clksys_driver.c ****  *
 181:requiredFiles/clksys_driver.c ****  *  \param oscSel  Bitmask of selected clock. Can be one of the following
 182:requiredFiles/clksys_driver.c ****  *                 OSC_RC2MEN_bm, OSC_RC32MEN_bm, OSC_RC32KEN_bm,
 183:requiredFiles/clksys_driver.c ****  *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 184:requiredFiles/clksys_driver.c ****  *
GAS LISTING /tmp/ccEEyJiu.s 			page 14


 185:requiredFiles/clksys_driver.c ****  *  \return  Non-zero if oscillator was disabled successfully.
 186:requiredFiles/clksys_driver.c ****  */
 187:requiredFiles/clksys_driver.c **** uint8_t CLKSYS_Disable( uint8_t oscSel )
 188:requiredFiles/clksys_driver.c **** {
 558               		.stabn	68,0,188,.LM14-.LFBB4
 559               	.LM14:
 560               	.LFBB4:
 561               	/* prologue: function */
 562               	/* frame size = 0 */
 563               	/* stack size = 0 */
 564               	.L__stack_usage = 0
 189:requiredFiles/clksys_driver.c **** 	OSC.CTRL &= ~oscSel;
 565               		.stabn	68,0,189,.LM15-.LFBB4
 566               	.LM15:
 567 004c E0E5      		ldi r30,lo8(80)
 568 004e F0E0      		ldi r31,hi8(80)
 569 0050 2081      		ld r18,Z
 570 0052 982F      		mov r25,r24
 571 0054 9095      		com r25
 572 0056 9223      		and r25,r18
 573 0058 9083      		st Z,r25
 190:requiredFiles/clksys_driver.c **** 	uint8_t clkEnabled = OSC.CTRL & oscSel;
 574               		.stabn	68,0,190,.LM16-.LFBB4
 575               	.LM16:
 576 005a 9081      		ld r25,Z
 191:requiredFiles/clksys_driver.c **** 	return clkEnabled;
 192:requiredFiles/clksys_driver.c **** }
 577               		.stabn	68,0,192,.LM17-.LFBB4
 578               	.LM17:
 579 005c 8923      		and r24,r25
 580               	/* epilogue start */
 581 005e 0895      		ret
 582               		.size	CLKSYS_Disable, .-CLKSYS_Disable
 583               	.Lscope4:
 584               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 585               		.stabd	78,0,0
 586               		.stabs	"CLKSYS_Prescalers_Config:F(0,15)",36,0,206,CLKSYS_Prescalers_Config
 587               		.stabs	"PSAfactor:P(6,19)",64,0,206,24
 588               		.stabs	"PSBCfactor:P(6,21)",64,0,207,22
 589               	.global	CLKSYS_Prescalers_Config
 590               		.type	CLKSYS_Prescalers_Config, @function
 591               	CLKSYS_Prescalers_Config:
 592               		.stabd	46,0,0
 193:requiredFiles/clksys_driver.c **** 
 194:requiredFiles/clksys_driver.c **** 
 195:requiredFiles/clksys_driver.c **** /*! \brief This function changes the prescaler configuration.
 196:requiredFiles/clksys_driver.c ****  *
 197:requiredFiles/clksys_driver.c ****  *  Change the configuration of the three system clock
 198:requiredFiles/clksys_driver.c ****  *  prescaler is one single operation. The user must make sure that
 199:requiredFiles/clksys_driver.c ****  *  the main CPU clock does not exceed recommended limits.
 200:requiredFiles/clksys_driver.c ****  *
 201:requiredFiles/clksys_driver.c ****  *  \param  PSAfactor   Prescaler A division factor, OFF or 2 to 512 in
 202:requiredFiles/clksys_driver.c ****  *                      powers of two.
 203:requiredFiles/clksys_driver.c ****  *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 204:requiredFiles/clksys_driver.c ****  *                      of (1,1), (1,2), (4,1) or (2,2).
 205:requiredFiles/clksys_driver.c ****  */
 206:requiredFiles/clksys_driver.c **** void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
GAS LISTING /tmp/ccEEyJiu.s 			page 15


 207:requiredFiles/clksys_driver.c ****                                CLK_PSBCDIV_t PSBCfactor )
 208:requiredFiles/clksys_driver.c **** {
 593               		.stabn	68,0,208,.LM18-.LFBB5
 594               	.LM18:
 595               	.LFBB5:
 596               	/* prologue: function */
 597               	/* frame size = 0 */
 598               	/* stack size = 0 */
 599               	.L__stack_usage = 0
 209:requiredFiles/clksys_driver.c **** 	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
 600               		.stabn	68,0,209,.LM19-.LFBB5
 601               	.LM19:
 602 0060 682B      		or r22,r24
 210:requiredFiles/clksys_driver.c **** 	CCPWrite( &CLK.PSCTRL, PSconfig );
 603               		.stabn	68,0,210,.LM20-.LFBB5
 604               	.LM20:
 605 0062 81E4      		ldi r24,lo8(65)
 606 0064 90E0      		ldi r25,hi8(65)
 607 0066 0E94 0000 		call CCPWrite
 608               	/* epilogue start */
 211:requiredFiles/clksys_driver.c **** }
 609               		.stabn	68,0,211,.LM21-.LFBB5
 610               	.LM21:
 611 006a 0895      		ret
 612               		.size	CLKSYS_Prescalers_Config, .-CLKSYS_Prescalers_Config
 613               	.Lscope5:
 614               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 615               		.stabd	78,0,0
 616               		.stabs	"CLKSYS_Main_ClockSource_Select:F(5,2)",36,0,225,CLKSYS_Main_ClockSource_Select
 617               		.stabs	"clockSource:P(6,17)",64,0,225,17
 618               	.global	CLKSYS_Main_ClockSource_Select
 619               		.type	CLKSYS_Main_ClockSource_Select, @function
 620               	CLKSYS_Main_ClockSource_Select:
 621               		.stabd	46,0,0
 212:requiredFiles/clksys_driver.c **** 
 213:requiredFiles/clksys_driver.c **** 
 214:requiredFiles/clksys_driver.c **** /*! \brief This function selects the main system clock source.
 215:requiredFiles/clksys_driver.c ****  *
 216:requiredFiles/clksys_driver.c ****  *  Hardware will disregard any attempts to select a clock source that is not
 217:requiredFiles/clksys_driver.c ****  *  enabled or not stable. If the change fails, make sure the source is ready
 218:requiredFiles/clksys_driver.c ****  *  and running and try again.
 219:requiredFiles/clksys_driver.c ****  *
 220:requiredFiles/clksys_driver.c ****  *  \param  clockSource  Clock source to use as input for the system clock
 221:requiredFiles/clksys_driver.c ****  *                       prescaler block.
 222:requiredFiles/clksys_driver.c ****  *
 223:requiredFiles/clksys_driver.c ****  *  \return  Non-zero if change was successful.
 224:requiredFiles/clksys_driver.c ****  */
 225:requiredFiles/clksys_driver.c **** uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
 226:requiredFiles/clksys_driver.c **** {
 622               		.stabn	68,0,226,.LM22-.LFBB6
 623               	.LM22:
 624               	.LFBB6:
 625 006c 1F93      		push r17
 626 006e CF93      		push r28
 627 0070 DF93      		push r29
 628               	/* prologue: function */
 629               	/* frame size = 0 */
GAS LISTING /tmp/ccEEyJiu.s 			page 16


 630               	/* stack size = 3 */
 631               	.L__stack_usage = 3
 632 0072 182F      		mov r17,r24
 227:requiredFiles/clksys_driver.c **** 	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
 633               		.stabn	68,0,227,.LM23-.LFBB6
 634               	.LM23:
 635 0074 C0E4      		ldi r28,lo8(64)
 636 0076 D0E0      		ldi r29,hi8(64)
 637 0078 6881      		ld r22,Y
 638 007a 687F      		andi r22,lo8(-8)
 639 007c 682B      		or r22,r24
 228:requiredFiles/clksys_driver.c **** 	CCPWrite( &CLK.CTRL, clkCtrl );
 640               		.stabn	68,0,228,.LM24-.LFBB6
 641               	.LM24:
 642 007e 80E4      		ldi r24,lo8(64)
 643 0080 90E0      		ldi r25,hi8(64)
 644 0082 0E94 0000 		call CCPWrite
 229:requiredFiles/clksys_driver.c **** 	clkCtrl = ( CLK.CTRL & clockSource );
 645               		.stabn	68,0,229,.LM25-.LFBB6
 646               	.LM25:
 647 0086 8881      		ld r24,Y
 230:requiredFiles/clksys_driver.c **** 	return clkCtrl;
 231:requiredFiles/clksys_driver.c **** }
 648               		.stabn	68,0,231,.LM26-.LFBB6
 649               	.LM26:
 650 0088 8123      		and r24,r17
 651               	/* epilogue start */
 652 008a DF91      		pop r29
 653 008c CF91      		pop r28
 654 008e 1F91      		pop r17
 655 0090 0895      		ret
 656               		.size	CLKSYS_Main_ClockSource_Select, .-CLKSYS_Main_ClockSource_Select
 657               	.Lscope6:
 658               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 659               		.stabd	78,0,0
 660               		.stabs	"CLKSYS_RTC_ClockSource_Enable:F(0,15)",36,0,241,CLKSYS_RTC_ClockSource_Enable
 661               		.stabs	"clockSource:P(6,23)",64,0,241,24
 662               	.global	CLKSYS_RTC_ClockSource_Enable
 663               		.type	CLKSYS_RTC_ClockSource_Enable, @function
 664               	CLKSYS_RTC_ClockSource_Enable:
 665               		.stabd	46,0,0
 232:requiredFiles/clksys_driver.c **** 
 233:requiredFiles/clksys_driver.c **** 
 234:requiredFiles/clksys_driver.c **** /*! \brief This function selects a Real-Time Counter clock source.
 235:requiredFiles/clksys_driver.c ****  *
 236:requiredFiles/clksys_driver.c ****  *  Selects the clock source for use by the Real-Time Counter (RTC)
 237:requiredFiles/clksys_driver.c ****  *  and enables clock signal routing to the RTC module.
 238:requiredFiles/clksys_driver.c ****  *
 239:requiredFiles/clksys_driver.c ****  *  \param  clockSource  Clock source to use for the RTC.
 240:requiredFiles/clksys_driver.c ****  */
 241:requiredFiles/clksys_driver.c **** void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
 242:requiredFiles/clksys_driver.c **** {
 666               		.stabn	68,0,242,.LM27-.LFBB7
 667               	.LM27:
 668               	.LFBB7:
 669               	/* prologue: function */
 670               	/* frame size = 0 */
GAS LISTING /tmp/ccEEyJiu.s 			page 17


 671               	/* stack size = 0 */
 672               	.L__stack_usage = 0
 243:requiredFiles/clksys_driver.c **** 	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
 673               		.stabn	68,0,243,.LM28-.LFBB7
 674               	.LM28:
 675 0092 E0E4      		ldi r30,lo8(64)
 676 0094 F0E0      		ldi r31,hi8(64)
 677 0096 9381      		ldd r25,Z+3
 678 0098 917F      		andi r25,lo8(-15)
 679 009a 9160      		ori r25,lo8(1)
 680 009c 982B      		or r25,r24
 681 009e 9383      		std Z+3,r25
 682               	/* epilogue start */
 244:requiredFiles/clksys_driver.c **** 	              clockSource |
 245:requiredFiles/clksys_driver.c **** 	              CLK_RTCEN_bm;
 246:requiredFiles/clksys_driver.c **** }
 683               		.stabn	68,0,246,.LM29-.LFBB7
 684               	.LM29:
 685 00a0 0895      		ret
 686               		.size	CLKSYS_RTC_ClockSource_Enable, .-CLKSYS_RTC_ClockSource_Enable
 687               	.Lscope7:
 688               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 689               		.stabd	78,0,0
 690               		.stabs	"CLKSYS_AutoCalibration_Enable:F(0,15)",36,0,260,CLKSYS_AutoCalibration_Enable
 691               		.stabs	"clkSource:P(5,2)",64,0,260,24
 692               		.stabs	"extReference:P(0,17)",64,0,260,22
 693               	.global	CLKSYS_AutoCalibration_Enable
 694               		.type	CLKSYS_AutoCalibration_Enable, @function
 695               	CLKSYS_AutoCalibration_Enable:
 696               		.stabd	46,0,0
 247:requiredFiles/clksys_driver.c **** 
 248:requiredFiles/clksys_driver.c **** 
 249:requiredFiles/clksys_driver.c **** /*! \brief This function enables automatic calibration of the selected internal
 250:requiredFiles/clksys_driver.c ****  *         oscillator.
 251:requiredFiles/clksys_driver.c ****  *
 252:requiredFiles/clksys_driver.c ****  *  Either the internal 32kHz RC oscillator or an external 32kHz
 253:requiredFiles/clksys_driver.c ****  *  crystal can be used as a calibration reference. The user must make sure
 254:requiredFiles/clksys_driver.c ****  *  that the selected reference is ready and running.
 255:requiredFiles/clksys_driver.c ****  *
 256:requiredFiles/clksys_driver.c ****  *  \param  clkSource    Clock source to calibrate, either OSC_RC2MCREF_bm or
 257:requiredFiles/clksys_driver.c ****  *                       OSC_RC32MCREF_bm.
 258:requiredFiles/clksys_driver.c ****  *  \param  extReference True if external crystal should be used as reference.
 259:requiredFiles/clksys_driver.c ****  */
 260:requiredFiles/clksys_driver.c **** void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
 261:requiredFiles/clksys_driver.c **** {
 697               		.stabn	68,0,261,.LM30-.LFBB8
 698               	.LM30:
 699               	.LFBB8:
 700               	/* prologue: function */
 701               	/* frame size = 0 */
 702               	/* stack size = 0 */
 703               	.L__stack_usage = 0
 262:requiredFiles/clksys_driver.c **** 	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
 704               		.stabn	68,0,262,.LM31-.LFBB8
 705               	.LM31:
 706 00a2 3091 5600 		lds r19,86
 707 00a6 282F      		mov r18,r24
GAS LISTING /tmp/ccEEyJiu.s 			page 18


 708 00a8 982F      		mov r25,r24
 709 00aa 9095      		com r25
 710 00ac 9323      		and r25,r19
 711 00ae 6623      		tst r22
 712 00b0 01F4      		brne .L11
 713 00b2 20E0      		ldi r18,lo8(0)
 714               	.L11:
 715               		.stabn	68,0,262,.LM32-.LFBB8
 716               	.LM32:
 717 00b4 922B      		or r25,r18
 718 00b6 E0E5      		ldi r30,lo8(80)
 719 00b8 F0E0      		ldi r31,hi8(80)
 720 00ba 9683      		std Z+6,r25
 263:requiredFiles/clksys_driver.c **** 	               ( extReference ? clkSource : 0 );
 264:requiredFiles/clksys_driver.c **** 	if (clkSource == OSC_RC2MCREF_bm) {
 721               		.stabn	68,0,264,.LM33-.LFBB8
 722               	.LM33:
 723 00bc 8130      		cpi r24,lo8(1)
 724 00be 01F4      		brne .L12
 265:requiredFiles/clksys_driver.c **** 		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
 725               		.stabn	68,0,265,.LM34-.LFBB8
 726               	.LM34:
 727 00c0 8091 6800 		lds r24,104
 728 00c4 8160      		ori r24,lo8(1)
 729 00c6 8093 6800 		sts 104,r24
 730 00ca 0895      		ret
 731               	.L12:
 266:requiredFiles/clksys_driver.c **** 	} else if (clkSource == OSC_RC32MCREF_bm) {
 732               		.stabn	68,0,266,.LM35-.LFBB8
 733               	.LM35:
 734 00cc 8230      		cpi r24,lo8(2)
 735 00ce 01F4      		brne .L10
 267:requiredFiles/clksys_driver.c **** 		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
 736               		.stabn	68,0,267,.LM36-.LFBB8
 737               	.LM36:
 738 00d0 8091 6000 		lds r24,96
 739 00d4 8160      		ori r24,lo8(1)
 740 00d6 8093 6000 		sts 96,r24
 741               	.L10:
 742 00da 0895      		ret
 743               		.size	CLKSYS_AutoCalibration_Enable, .-CLKSYS_AutoCalibration_Enable
 744               	.Lscope8:
 745               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 746               		.stabd	78,0,0
 747               		.stabs	"CLKSYS_XOSC_FailureDetection_Enable:F(0,15)",36,0,280,CLKSYS_XOSC_FailureDetection_Enable
 748               	.global	CLKSYS_XOSC_FailureDetection_Enable
 749               		.type	CLKSYS_XOSC_FailureDetection_Enable, @function
 750               	CLKSYS_XOSC_FailureDetection_Enable:
 751               		.stabd	46,0,0
 268:requiredFiles/clksys_driver.c **** 	}
 269:requiredFiles/clksys_driver.c **** }
 270:requiredFiles/clksys_driver.c **** 
 271:requiredFiles/clksys_driver.c **** 
 272:requiredFiles/clksys_driver.c **** /*! \brief This function enables the External Oscillator Failure Detection
 273:requiredFiles/clksys_driver.c ****  *         (XOSCFD) feature.
 274:requiredFiles/clksys_driver.c ****  *
 275:requiredFiles/clksys_driver.c ****  *  The feature will stay enabled until next reset. Note that the
GAS LISTING /tmp/ccEEyJiu.s 			page 19


 276:requiredFiles/clksys_driver.c ****  *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 277:requiredFiles/clksys_driver.c ****  *  any interrupt priorities and settings. Therefore, make sure that a handler
 278:requiredFiles/clksys_driver.c ****  *  is implemented for the XOSCF NMI when you enable it.
 279:requiredFiles/clksys_driver.c ****  */
 280:requiredFiles/clksys_driver.c **** void CLKSYS_XOSC_FailureDetection_Enable( void )
 281:requiredFiles/clksys_driver.c **** {
 752               		.stabn	68,0,281,.LM37-.LFBB9
 753               	.LM37:
 754               	.LFBB9:
 755               	/* prologue: function */
 756               	/* frame size = 0 */
 757               	/* stack size = 0 */
 758               	.L__stack_usage = 0
 282:requiredFiles/clksys_driver.c **** 	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
 759               		.stabn	68,0,282,.LM38-.LFBB9
 760               	.LM38:
 761 00dc 83E5      		ldi r24,lo8(83)
 762 00de 90E0      		ldi r25,hi8(83)
 763 00e0 63E0      		ldi r22,lo8(3)
 764 00e2 0E94 0000 		call CCPWrite
 765               	/* epilogue start */
 283:requiredFiles/clksys_driver.c **** }
 766               		.stabn	68,0,283,.LM39-.LFBB9
 767               	.LM39:
 768 00e6 0895      		ret
 769               		.size	CLKSYS_XOSC_FailureDetection_Enable, .-CLKSYS_XOSC_FailureDetection_Enable
 770               	.Lscope9:
 771               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 772               		.stabd	78,0,0
 773               		.stabs	"CLKSYS_Configuration_Lock:F(0,15)",36,0,292,CLKSYS_Configuration_Lock
 774               	.global	CLKSYS_Configuration_Lock
 775               		.type	CLKSYS_Configuration_Lock, @function
 776               	CLKSYS_Configuration_Lock:
 777               		.stabd	46,0,0
 284:requiredFiles/clksys_driver.c **** 
 285:requiredFiles/clksys_driver.c **** 
 286:requiredFiles/clksys_driver.c **** /*! \brief This function lock the entire clock system configuration.
 287:requiredFiles/clksys_driver.c ****  *
 288:requiredFiles/clksys_driver.c ****  *  This will lock the configuration until the next reset, or until the
 289:requiredFiles/clksys_driver.c ****  *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 290:requiredFiles/clksys_driver.c ****  *  and switches to internal 2MHz RC oscillator.
 291:requiredFiles/clksys_driver.c ****  */
 292:requiredFiles/clksys_driver.c **** void CLKSYS_Configuration_Lock( void )
 293:requiredFiles/clksys_driver.c **** {
 778               		.stabn	68,0,293,.LM40-.LFBB10
 779               	.LM40:
 780               	.LFBB10:
 781               	/* prologue: function */
 782               	/* frame size = 0 */
 783               	/* stack size = 0 */
 784               	.L__stack_usage = 0
 294:requiredFiles/clksys_driver.c **** 	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
 785               		.stabn	68,0,294,.LM41-.LFBB10
 786               	.LM41:
 787 00e8 82E4      		ldi r24,lo8(66)
 788 00ea 90E0      		ldi r25,hi8(66)
 789 00ec 61E0      		ldi r22,lo8(1)
GAS LISTING /tmp/ccEEyJiu.s 			page 20


 790 00ee 0E94 0000 		call CCPWrite
 791               	/* epilogue start */
 295:requiredFiles/clksys_driver.c **** }
 792               		.stabn	68,0,295,.LM42-.LFBB10
 793               	.LM42:
 794 00f2 0895      		ret
 795               		.size	CLKSYS_Configuration_Lock, .-CLKSYS_Configuration_Lock
 796               	.Lscope10:
 797               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 798               		.stabd	78,0,0
 799               		.stabs	"delay_ms:F(0,15)",36,0,29,delay_ms
 800               	.global	delay_ms
 801               		.type	delay_ms, @function
 802               	delay_ms:
 803               		.stabd	46,0,0
 804               		.stabs	"main.c",132,0,0,.Ltext2
 805               	.Ltext2:
   1:main.c        **** /* Blinky: an atxmega16a4 example
   2:main.c        ****  * Daniel J. Gonzalez July 2012
   3:main.c        ****  * dgonz@mit.edu
   4:main.c        ****  * yameb.blogspot.com
   5:main.c        ****  * 
   6:main.c        ****  * MCU: atxmega16a4u
   7:main.c        ****  * Board: TinyArmTroller REV2
   8:main.c        ****  * Setup: Button between C3 and GND, Resistor and LED between E0 and GND
   9:main.c        ****  * 
  10:main.c        ****  * The purpose of this program has been to learn how to do the following:
  11:main.c        ****  * -Set the CPU Speed to 32MHz
  12:main.c        ****  * -Implement robust delay
  13:main.c        ****  * -Implement outputs and set outputs to HIGH and LOW
  14:main.c        ****  * -Implement inputs and detect of an input pin is driven LOW
  15:main.c        ****  * 
  16:main.c        ****  * Specifically, this program blinks an LED on port E0 in a certain pattern 
  17:main.c        ****  * if a button between port C3 and GND is pressed. 
  18:main.c        ****  */
  19:main.c        **** 
  20:main.c        **** #define F_CPU 	32000000UL //32 MHz Internal Oscillator
  21:main.c        **** 
  22:main.c        **** #include <avr/io.h>
  23:main.c        **** #include <util/delay.h>
  24:main.c        **** #include "requiredFiles/avr_compiler.h"
  25:main.c        **** #include "requiredFiles/clksys_driver.h"
  26:main.c        **** #include "requiredFiles/clksys_driver.c"
  27:main.c        **** 
  28:main.c        **** 
  29:main.c        **** void delay_ms(int ms) //My own Delay function, because the built-in _delay_ms() can delay for only 
  30:main.c        **** { 
 806               		.stabn	68,0,30,.LM43-.LFBB11
 807               	.LM43:
 808               	.LFBB11:
 809               	/* prologue: function */
 810               	/* frame size = 0 */
 811               	/* stack size = 0 */
 812               	.L__stack_usage = 0
 813               		.stabn	68,0,30,.LM44-.LFBB11
 814               	.LM44:
 815 00f4 282F      		mov r18,r24
GAS LISTING /tmp/ccEEyJiu.s 			page 21


 816 00f6 392F      		mov r19,r25
 817 00f8 C901      		movw r24,r18
  31:main.c        ****     while (ms--) 
 818               		.stabn	68,0,31,.LM45-.LFBB11
 819               	.LM45:
 820 00fa 00C0      		rjmp .L17
 821               	.L18:
 822               	.LBB6:
 823               	.LBB7:
 824               		.stabs	"/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h",132,0,0,.Ltext3
 825               	.Ltext3:
   1:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2189 2010-10-13 09:39:34Z aboyapati $ */
  34:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \file */
GAS LISTING /tmp/ccEEyJiu.s 			page 22


  47:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /**
  99:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    \ingroup util_delay
 100:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 101:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 102:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 103:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
GAS LISTING /tmp/ccEEyJiu.s 			page 23


 104:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 105:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 106:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 107:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 108:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 109:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 110:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 111:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 112:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 113:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 115:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 116:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 117:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 118:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 119:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 120:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 121:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 122:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 123:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 124:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 125:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 126:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 127:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 128:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay
 129:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    although this will be deprecated in future.
 130:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 131:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  */
 132:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** void
 133:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 134:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** {
 135:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 136:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	double __tmp ; 
 137:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && !defined(__DELAY_BACKWARD_COMPATIBLE__)
 138:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 139:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 140:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 141:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 142:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 143:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 144:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 145:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 146:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 147:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 148:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#else
 149:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//round up by default
 150:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 151:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#endif
 152:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 154:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 155:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BAC
 156:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 157:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 158:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks = 1;
 159:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 160:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	{
GAS LISTING /tmp/ccEEyJiu.s 			page 24


 161:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 162:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 163:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		while(__ticks)
 164:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		{
 165:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 166:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 167:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 			__ticks --;
 168:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		}
 169:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		return;
 170:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	}
 171:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	else
 172:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 173:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 174:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
 175:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** }
 176:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 177:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /**
 178:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    \ingroup util_delay
 179:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 180:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 181:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 182:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 183:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 184:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 185:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 186:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 187:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 188:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 189:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    will not be informed about this case.
 190:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 191:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 192:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 193:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 194:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 195:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   
 196:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 197:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 198:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 199:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 200:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 201:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 202:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  
 203:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 204:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 205:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay
 206:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    although this will be deprecated in future.
 207:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 208:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  */
 209:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** void
 210:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** _delay_us(double __us)
 211:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** {
 212:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 213:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	double __tmp ; 
 214:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && !defined(__DELAY_BACKWARD_COMPATIBLE__)
 215:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 216:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 217:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
GAS LISTING /tmp/ccEEyJiu.s 			page 25


 218:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 219:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 220:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 221:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 222:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 223:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 224:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 225:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#else
 226:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//round up by default
 227:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 228:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#endif
 229:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 230:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 826               		.stabn	68,0,230,.LM46-.LFBB11
 827               	.LM46:
 828 00fc EFE3      		 ldi r30,lo8(7999)
 829 00fe FFE1      	    ldi r31,hi8(7999)
 830 0100 3197      	    1:sbiw r30,1
 831 0102 01F4      	    brne 1b
 832 0104 00C0      		rjmp .
 833 0106 0000      		nop
 834 0108 0197      		sbiw r24,1
 835               	.L17:
 836               	.LBE7:
 837               	.LBE6:
 838               		.stabs	"main.c",132,0,0,.Ltext4
 839               	.Ltext4:
 840               		.stabn	68,0,31,.LM47-.LFBB11
 841               	.LM47:
 842 010a 0097      		sbiw r24,0
 843 010c 01F4      		brne .L18
 844               	/* epilogue start */
  32:main.c        ****         _delay_us(1000);  
  33:main.c        **** } 
 845               		.stabn	68,0,33,.LM48-.LFBB11
 846               	.LM48:
 847 010e 0895      		ret
 848               		.size	delay_ms, .-delay_ms
 849               	.Lscope11:
 850               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 851               		.stabd	78,0,0
 852               		.stabs	"Config32MHzClock:F(0,15)",36,0,35,Config32MHzClock
 853               	.global	Config32MHzClock
 854               		.type	Config32MHzClock, @function
 855               	Config32MHzClock:
 856               		.stabd	46,0,0
  34:main.c        **** 
  35:main.c        **** void Config32MHzClock(void) //Set Clock Speed to 32MHz (XMega Only)
  36:main.c        **** { 
 857               		.stabn	68,0,36,.LM49-.LFBB12
 858               	.LM49:
 859               	.LFBB12:
 860               	/* prologue: function */
 861               	/* frame size = 0 */
 862               	/* stack size = 0 */
 863               	.L__stack_usage = 0
  37:main.c        **** 	CCP = CCP_IOREG_gc; //Security Signature to modify clock 
GAS LISTING /tmp/ccEEyJiu.s 			page 26


 864               		.stabn	68,0,37,.LM50-.LFBB12
 865               	.LM50:
 866 0110 88ED      		ldi r24,lo8(-40)
 867 0112 84BF      		out 52-0,r24
  38:main.c        **** 	// initialize clock source to be 32MHz internal oscillator (no PLL) 
  39:main.c        **** 	OSC.CTRL = OSC_RC32MEN_bm; // enable internal 32MHz oscillator 
 868               		.stabn	68,0,39,.LM51-.LFBB12
 869               	.LM51:
 870 0114 82E0      		ldi r24,lo8(2)
 871 0116 8093 5000 		sts 80,r24
 872               	.L20:
  40:main.c        **** 	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for oscillator ready 
 873               		.stabn	68,0,40,.LM52-.LFBB12
 874               	.LM52:
 875 011a 8091 5100 		lds r24,81
 876 011e 81FF      		sbrs r24,1
 877 0120 00C0      		rjmp .L20
  41:main.c        **** 	CCP = CCP_IOREG_gc; //Security Signature to modify clock 
 878               		.stabn	68,0,41,.LM53-.LFBB12
 879               	.LM53:
 880 0122 88ED      		ldi r24,lo8(-40)
 881 0124 84BF      		out 52-0,r24
  42:main.c        **** 	CLK.CTRL = 0x01; //select sysclock 32MHz osc 
 882               		.stabn	68,0,42,.LM54-.LFBB12
 883               	.LM54:
 884 0126 81E0      		ldi r24,lo8(1)
 885 0128 8093 4000 		sts 64,r24
 886               	/* epilogue start */
  43:main.c        **** }
 887               		.stabn	68,0,43,.LM55-.LFBB12
 888               	.LM55:
 889 012c 0895      		ret
 890               		.size	Config32MHzClock, .-Config32MHzClock
 891               	.Lscope12:
 892               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 893               		.stabd	78,0,0
 894               		.stabs	"blink:F(0,15)",36,0,45,blink
 895               		.stabs	"myVal:P(0,1)",64,0,45,28
 896               	.global	blink
 897               		.type	blink, @function
 898               	blink:
 899               		.stabd	46,0,0
  44:main.c        **** 
  45:main.c        **** void blink(int myVal){
 900               		.stabn	68,0,45,.LM56-.LFBB13
 901               	.LM56:
 902               	.LFBB13:
 903 012e FF92      		push r15
 904 0130 0F93      		push r16
 905 0132 1F93      		push r17
 906 0134 CF93      		push r28
 907 0136 DF93      		push r29
 908               	/* prologue: function */
 909               	/* frame size = 0 */
 910               	/* stack size = 5 */
 911               	.L__stack_usage = 5
 912 0138 EC01      		movw r28,r24
GAS LISTING /tmp/ccEEyJiu.s 			page 27


  46:main.c        **** 		PORTE.OUTSET = _BV(0);
 913               		.stabn	68,0,46,.LM57-.LFBB13
 914               	.LM57:
 915 013a 00E8      		ldi r16,lo8(1664)
 916 013c 16E0      		ldi r17,hi8(1664)
 917 013e FF24      		clr r15
 918 0140 F394      		inc r15
 919 0142 F801      		movw r30,r16
 920 0144 F582      		std Z+5,r15
  47:main.c        ****         delay_ms(myVal);
 921               		.stabn	68,0,47,.LM58-.LFBB13
 922               	.LM58:
 923 0146 0E94 0000 		call delay_ms
  48:main.c        ****         PORTE.OUTCLR = _BV(0);
 924               		.stabn	68,0,48,.LM59-.LFBB13
 925               	.LM59:
 926 014a F801      		movw r30,r16
 927 014c F682      		std Z+6,r15
  49:main.c        ****         delay_ms(myVal);
 928               		.stabn	68,0,49,.LM60-.LFBB13
 929               	.LM60:
 930 014e CE01      		movw r24,r28
 931 0150 0E94 0000 		call delay_ms
 932               	/* epilogue start */
  50:main.c        **** }
 933               		.stabn	68,0,50,.LM61-.LFBB13
 934               	.LM61:
 935 0154 DF91      		pop r29
 936 0156 CF91      		pop r28
 937 0158 1F91      		pop r17
 938 015a 0F91      		pop r16
 939 015c FF90      		pop r15
 940 015e 0895      		ret
 941               		.size	blink, .-blink
 942               	.Lscope13:
 943               		.stabs	"",36,0,0,.Lscope13-.LFBB13
 944               		.stabd	78,0,0
 945               		.stabs	"blinkQuick:F(0,15)",36,0,52,blinkQuick
 946               	.global	blinkQuick
 947               		.type	blinkQuick, @function
 948               	blinkQuick:
 949               		.stabd	46,0,0
  51:main.c        **** 
  52:main.c        **** void blinkQuick(void){
 950               		.stabn	68,0,52,.LM62-.LFBB14
 951               	.LM62:
 952               	.LFBB14:
 953               	/* prologue: function */
 954               	/* frame size = 0 */
 955               	/* stack size = 0 */
 956               	.L__stack_usage = 0
  53:main.c        **** 	blink(100);
 957               		.stabn	68,0,53,.LM63-.LFBB14
 958               	.LM63:
 959 0160 84E6      		ldi r24,lo8(100)
 960 0162 90E0      		ldi r25,hi8(100)
 961 0164 0E94 0000 		call blink
GAS LISTING /tmp/ccEEyJiu.s 			page 28


 962               	/* epilogue start */
  54:main.c        **** }
 963               		.stabn	68,0,54,.LM64-.LFBB14
 964               	.LM64:
 965 0168 0895      		ret
 966               		.size	blinkQuick, .-blinkQuick
 967               	.Lscope14:
 968               		.stabs	"",36,0,0,.Lscope14-.LFBB14
 969               		.stabd	78,0,0
 970               		.stabs	"blinkTen:F(0,15)",36,0,56,blinkTen
 971               	.global	blinkTen
 972               		.type	blinkTen, @function
 973               	blinkTen:
 974               		.stabd	46,0,0
  55:main.c        **** 
  56:main.c        **** void blinkTen(void){
 975               		.stabn	68,0,56,.LM65-.LFBB15
 976               	.LM65:
 977               	.LFBB15:
 978 016a CF93      		push r28
 979 016c DF93      		push r29
 980               	/* prologue: function */
 981               	/* frame size = 0 */
 982               	/* stack size = 2 */
 983               	.L__stack_usage = 2
 984               		.stabn	68,0,56,.LM66-.LFBB15
 985               	.LM66:
 986 016e CAE0      		ldi r28,lo8(10)
 987 0170 D0E0      		ldi r29,hi8(10)
 988               	.L25:
  57:main.c        **** 	int i;
  58:main.c        **** 	for (i=0;i<10;i++){
  59:main.c        **** 		blink(50);
 989               		.stabn	68,0,59,.LM67-.LFBB15
 990               	.LM67:
 991 0172 82E3      		ldi r24,lo8(50)
 992 0174 90E0      		ldi r25,hi8(50)
 993 0176 0E94 0000 		call blink
 994 017a 2197      		sbiw r28,1
  58:main.c        **** 	for (i=0;i<10;i++){
 995               		.stabn	68,0,58,.LM68-.LFBB15
 996               	.LM68:
 997 017c 01F4      		brne .L25
 998               	/* epilogue start */
  60:main.c        **** 	}
  61:main.c        **** }
 999               		.stabn	68,0,61,.LM69-.LFBB15
 1000               	.LM69:
 1001 017e DF91      		pop r29
 1002 0180 CF91      		pop r28
 1003 0182 0895      		ret
 1004               		.size	blinkTen, .-blinkTen
 1005               	.Lscope15:
 1006               		.stabs	"",36,0,0,.Lscope15-.LFBB15
 1007               		.stabd	78,0,0
 1008               		.stabs	"mainLoop:F(0,15)",36,0,63,mainLoop
 1009               	.global	mainLoop
GAS LISTING /tmp/ccEEyJiu.s 			page 29


 1010               		.type	mainLoop, @function
 1011               	mainLoop:
 1012               		.stabd	46,0,0
  62:main.c        **** 
  63:main.c        **** void mainLoop(void){
 1013               		.stabn	68,0,63,.LM70-.LFBB16
 1014               	.LM70:
 1015               	.LFBB16:
 1016               	/* prologue: function */
 1017               	/* frame size = 0 */
 1018               	/* stack size = 0 */
 1019               	.L__stack_usage = 0
 1020               	.L28:
  64:main.c        **** 		while(1){
  65:main.c        **** 			//if(!(PORTD.IN & _BV(4))) //if pin C3 goes LOW
  66:main.c        **** 				blinkQuick();
 1021               		.stabn	68,0,66,.LM71-.LFBB16
 1022               	.LM71:
 1023 0184 0E94 0000 		call blinkQuick
 1024 0188 00C0      		rjmp .L28
 1025               		.size	mainLoop, .-mainLoop
 1026               	.Lscope16:
 1027               		.stabs	"",36,0,0,.Lscope16-.LFBB16
 1028               		.stabd	78,0,0
 1029               		.stabs	"init:F(0,15)",36,0,74,init
 1030               	.global	init
 1031               		.type	init, @function
 1032               	init:
 1033               		.stabd	46,0,0
  67:main.c        **** 		}
  68:main.c        **** }
  69:main.c        **** 
  70:main.c        **** /* See Atmel doc8050.pdf : AVR1313: Using the XMEGA IO Pins and External Interrupts
  71:main.c        ****  * 
  72:main.c        ****  * 
  73:main.c        ****  */
  74:main.c        **** void init(void){
 1034               		.stabn	68,0,74,.LM72-.LFBB17
 1035               	.LM72:
 1036               	.LFBB17:
 1037               	/* prologue: function */
 1038               	/* frame size = 0 */
 1039               	/* stack size = 0 */
 1040               	.L__stack_usage = 0
  75:main.c        **** 		Config32MHzClock(); //Set Clock Speed to 32MHz	
 1041               		.stabn	68,0,75,.LM73-.LFBB17
 1042               	.LM73:
 1043 018a 0E94 0000 		call Config32MHzClock
  76:main.c        **** 		PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc; //Set pin D4 as INPUT and as a pullup (Detect when pulled LO
 1044               		.stabn	68,0,76,.LM74-.LFBB17
 1045               	.LM74:
 1046 018e 88E1      		ldi r24,lo8(24)
 1047 0190 E0E6      		ldi r30,lo8(1632)
 1048 0192 F6E0      		ldi r31,hi8(1632)
 1049 0194 848B      		std Z+20,r24
  77:main.c        **** 		PORTE.DIRSET |= _BV(0); //Set pin E0 as OUTPUT
 1050               		.stabn	68,0,77,.LM75-.LFBB17
GAS LISTING /tmp/ccEEyJiu.s 			page 30


 1051               	.LM75:
 1052 0196 E0E8      		ldi r30,lo8(1664)
 1053 0198 F6E0      		ldi r31,hi8(1664)
 1054 019a 8181      		ldd r24,Z+1
 1055 019c 8160      		ori r24,lo8(1)
 1056 019e 8183      		std Z+1,r24
 1057               	/* epilogue start */
  78:main.c        **** 		
  79:main.c        **** }
 1058               		.stabn	68,0,79,.LM76-.LFBB17
 1059               	.LM76:
 1060 01a0 0895      		ret
 1061               		.size	init, .-init
 1062               	.Lscope17:
 1063               		.stabs	"",36,0,0,.Lscope17-.LFBB17
 1064               		.stabd	78,0,0
 1065               		.stabs	"main:F(0,1)",36,0,81,main
 1066               	.global	main
 1067               		.type	main, @function
 1068               	main:
 1069               		.stabd	46,0,0
  80:main.c        **** 
  81:main.c        **** int main (void)
  82:main.c        **** {
 1070               		.stabn	68,0,82,.LM77-.LFBB18
 1071               	.LM77:
 1072               	.LFBB18:
 1073               	/* prologue: function */
 1074               	/* frame size = 0 */
 1075               	/* stack size = 0 */
 1076               	.L__stack_usage = 0
  83:main.c        **** 	init();	
 1077               		.stabn	68,0,83,.LM78-.LFBB18
 1078               	.LM78:
 1079 01a2 0E94 0000 		call init
  84:main.c        **** 	delay_ms(1000);
 1080               		.stabn	68,0,84,.LM79-.LFBB18
 1081               	.LM79:
 1082 01a6 88EE      		ldi r24,lo8(1000)
 1083 01a8 93E0      		ldi r25,hi8(1000)
 1084 01aa 0E94 0000 		call delay_ms
  85:main.c        ****     PORTE.OUTSET = _BV(0);
 1085               		.stabn	68,0,85,.LM80-.LFBB18
 1086               	.LM80:
 1087 01ae 81E0      		ldi r24,lo8(1)
 1088 01b0 E0E8      		ldi r30,lo8(1664)
 1089 01b2 F6E0      		ldi r31,hi8(1664)
 1090 01b4 8583      		std Z+5,r24
 1091               	.L31:
 1092               	.LBB8:
 1093               	.LBB9:
  66:main.c        **** 				blinkQuick();
 1094               		.stabn	68,0,66,.LM81-.LFBB18
 1095               	.LM81:
 1096 01b6 0E94 0000 		call blinkQuick
 1097 01ba 00C0      		rjmp .L31
 1098               	.LBE9:
GAS LISTING /tmp/ccEEyJiu.s 			page 31


 1099               	.LBE8:
 1100               		.size	main, .-main
 1101               	.Lscope18:
 1102               		.stabs	"",36,0,0,.Lscope18-.LFBB18
 1103               		.stabd	78,0,0
 1104               		.stabs	"",100,0,0,.Letext0
 1105               	.Letext0:
GAS LISTING /tmp/ccEEyJiu.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccEEyJiu.s:2      *ABS*:0000003f __SREG__
     /tmp/ccEEyJiu.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccEEyJiu.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccEEyJiu.s:5      *ABS*:00000034 __CCP__
     /tmp/ccEEyJiu.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccEEyJiu.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccEEyJiu.s:423    .text:00000000 CCPWrite
     /tmp/ccEEyJiu.s:488    .text:0000002a CLKSYS_XOSC_Config
     /tmp/ccEEyJiu.s:526    .text:00000040 CLKSYS_PLL_Config
     /tmp/ccEEyJiu.s:556    .text:0000004c CLKSYS_Disable
     /tmp/ccEEyJiu.s:591    .text:00000060 CLKSYS_Prescalers_Config
     /tmp/ccEEyJiu.s:620    .text:0000006c CLKSYS_Main_ClockSource_Select
     /tmp/ccEEyJiu.s:664    .text:00000092 CLKSYS_RTC_ClockSource_Enable
     /tmp/ccEEyJiu.s:695    .text:000000a2 CLKSYS_AutoCalibration_Enable
     /tmp/ccEEyJiu.s:750    .text:000000dc CLKSYS_XOSC_FailureDetection_Enable
     /tmp/ccEEyJiu.s:776    .text:000000e8 CLKSYS_Configuration_Lock
     /tmp/ccEEyJiu.s:802    .text:000000f4 delay_ms
     /tmp/ccEEyJiu.s:855    .text:00000110 Config32MHzClock
     /tmp/ccEEyJiu.s:898    .text:0000012e blink
     /tmp/ccEEyJiu.s:948    .text:00000160 blinkQuick
     /tmp/ccEEyJiu.s:973    .text:0000016a blinkTen
     /tmp/ccEEyJiu.s:1011   .text:00000184 mainLoop
     /tmp/ccEEyJiu.s:1032   .text:0000018a init
     /tmp/ccEEyJiu.s:1068   .text:000001a2 main

NO UNDEFINED SYMBOLS
