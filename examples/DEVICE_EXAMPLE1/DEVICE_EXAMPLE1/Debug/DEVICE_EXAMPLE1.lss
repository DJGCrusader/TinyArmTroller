
DEVICE_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000230c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00802000  0000230c  000023a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006d8  008020b4  008020b4  00002454  2**2
                  ALLOC
  3 .stab         00000750  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000550  00000000  00000000  00002c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e10  00000000  00000000  000031e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000154a  00000000  00000000  00009ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000518f  00000000  00000000  0000b53a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd0  00000000  00000000  000106cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032a0  00000000  00000000  0001129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000278e  00000000  00000000  0001453c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 00184738  00000000  00000000  00016cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d0  00000000  00000000  0019b408  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	00 c1       	rjmp	.+512    	; 0x202 <__ctors_end>
       2:	00 00       	nop
       4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
       a:	00 00       	nop
       c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
       e:	00 00       	nop
      10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
      12:	00 00       	nop
      14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
      16:	00 00       	nop
      18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
      1e:	00 00       	nop
      20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
      22:	00 00       	nop
      24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
      26:	00 00       	nop
      28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
      2e:	00 00       	nop
      30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
      32:	00 00       	nop
      34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
      36:	00 00       	nop
      38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
      3e:	00 00       	nop
      40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
      42:	00 00       	nop
      44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
      46:	00 00       	nop
      48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
      4e:	00 00       	nop
      50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
      52:	00 00       	nop
      54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
      56:	00 00       	nop
      58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
      5e:	00 00       	nop
      60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__vector_25>
      68:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__vector_26>
      6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
      6e:	00 00       	nop
      70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
      72:	00 00       	nop
      74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
      76:	00 00       	nop
      78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
      7e:	00 00       	nop
      80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
      82:	00 00       	nop
      84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
      86:	00 00       	nop
      88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
      8e:	00 00       	nop
      90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
      92:	00 00       	nop
      94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
      96:	00 00       	nop
      98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
      be:	00 00       	nop
      c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
      da:	00 00       	nop
      dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
      de:	00 00       	nop
      e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
      fe:	00 00       	nop
     100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
     102:	00 00       	nop
     104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
     106:	00 00       	nop
     108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
     10e:	00 00       	nop
     110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
     112:	00 00       	nop
     114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
     116:	00 00       	nop
     118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
     11e:	00 00       	nop
     120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
     122:	00 00       	nop
     124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
     126:	00 00       	nop
     128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
     12e:	00 00       	nop
     130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
     132:	00 00       	nop
     134:	83 c0       	rjmp	.+262    	; 0x23c <__bad_interrupt>
     136:	00 00       	nop
     138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
     13e:	00 00       	nop
     140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
     142:	00 00       	nop
     144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
     146:	00 00       	nop
     148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
     14e:	00 00       	nop
     150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
     152:	00 00       	nop
     154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
     156:	00 00       	nop
     158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
     15e:	00 00       	nop
     160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
     162:	00 00       	nop
     164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
     166:	00 00       	nop
     168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
     16e:	00 00       	nop
     170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
     172:	00 00       	nop
     174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
     176:	00 00       	nop
     178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
     17e:	00 00       	nop
     180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
     182:	00 00       	nop
     184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
     186:	00 00       	nop
     188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
     18e:	00 00       	nop
     190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
     192:	00 00       	nop
     194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
     196:	00 00       	nop
     198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_125>
     1f8:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_126>

000001fc <sleepmgr_configs>:
     1fc:	00 0e 06 0c 04 00                                   ......

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf ef       	ldi	r28, 0xFF	; 255
     208:	d7 e2       	ldi	r29, 0x27	; 39
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	10 e2       	ldi	r17, 0x20	; 32
     210:	a0 e0       	ldi	r26, 0x00	; 0
     212:	b0 e2       	ldi	r27, 0x20	; 32
     214:	ec e0       	ldi	r30, 0x0C	; 12
     216:	f3 e2       	ldi	r31, 0x23	; 35
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	a4 3b       	cpi	r26, 0xB4	; 180
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	17 e2       	ldi	r17, 0x27	; 39
     226:	a4 eb       	ldi	r26, 0xB4	; 180
     228:	b0 e2       	ldi	r27, 0x20	; 32
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	ac 38       	cpi	r26, 0x8C	; 140
     230:	b1 07       	cpc	r27, r17
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <main>
     238:	0c 94 84 11 	jmp	0x2308	; 0x2308 <_exit>

0000023c <__bad_interrupt>:
     23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	00 d0       	rcall	.+0      	; 0x244 <sysclk_init+0x6>
     244:	00 d0       	rcall	.+0      	; 0x246 <sysclk_init+0x8>
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
#endif
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	80 93 70 00 	sts	0x0070, r24
     250:	80 93 71 00 	sts	0x0071, r24
     254:	80 93 72 00 	sts	0x0072, r24
     258:	80 93 73 00 	sts	0x0073, r24
     25c:	80 93 74 00 	sts	0x0074, r24
     260:	80 93 75 00 	sts	0x0075, r24
     264:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     268:	81 e4       	ldi	r24, 0x41	; 65
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	64 e0       	ldi	r22, 0x04	; 4
     26e:	0e 94 8c 09 	call	0x1318	; 0x1318 <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	6c e1       	ldi	r22, 0x1C	; 28
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0e 94 92 09 	call	0x1324	; 0x1324 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
     27c:	8a 83       	std	Y+2, r24	; 0x02
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	6d e1       	ldi	r22, 0x1D	; 29
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	0e 94 92 09 	call	0x1324	; 0x1324 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
     288:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	2f ef       	ldi	r18, 0xFF	; 255
     290:	8f 3f       	cpi	r24, 0xFF	; 255
     292:	92 07       	cpc	r25, r18
     294:	21 f4       	brne	.+8      	; 0x29e <sysclk_init+0x60>
		cal = 0x2340;
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	93 e2       	ldi	r25, 0x23	; 35
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	9a 83       	std	Y+2, r25	; 0x02
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02
     2a2:	8b 83       	std	Y+3, r24	; 0x03
     2a4:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALA=LSB(calib);
		DFLLRC2M.CALB=MSB(calib);
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
     2a6:	e0 e6       	ldi	r30, 0x60	; 96
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
     2ac:	8c 81       	ldd	r24, Y+4	; 0x04
     2ae:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2b0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     2b2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	90 81       	ld	r25, Z
     2ba:	92 60       	ori	r25, 0x02	; 2
     2bc:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2be:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     2c0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     2c2:	81 ff       	sbrs	r24, 1
     2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <sysclk_init+0x82>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     2c6:	80 e4       	ldi	r24, 0x40	; 64
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	0e 94 8c 09 	call	0x1318	; 0x1318 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2d0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     2d2:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     2d4:	e0 e5       	ldi	r30, 0x50	; 80
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	96 81       	ldd	r25, Z+6	; 0x06
     2da:	99 7f       	andi	r25, 0xF9	; 249
     2dc:	96 83       	std	Z+6, r25	; 0x06
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     2de:	a0 e6       	ldi	r26, 0x60	; 96
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	90 e8       	ldi	r25, 0x80	; 128
     2e4:	15 96       	adiw	r26, 0x05	; 5
     2e6:	9c 93       	st	X, r25
     2e8:	15 97       	sbiw	r26, 0x05	; 5
			DFLLRC32M.COMP2 = 0xBB;
     2ea:	9b eb       	ldi	r25, 0xBB	; 187
     2ec:	16 96       	adiw	r26, 0x06	; 6
     2ee:	9c 93       	st	X, r25
     2f0:	16 97       	sbiw	r26, 0x06	; 6
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     2f2:	96 81       	ldd	r25, Z+6	; 0x06
     2f4:	94 60       	ori	r25, 0x04	; 4
     2f6:	96 83       	std	Z+6, r25	; 0x06
		}
		else {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     2f8:	9c 91       	ld	r25, X
     2fa:	91 60       	ori	r25, 0x01	; 1
     2fc:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2fe:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     300:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     302:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     304:	90 81       	ld	r25, Z
     306:	9e 7f       	andi	r25, 0xFE	; 254
     308:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     30a:	8f bf       	out	0x3f, r24	; 63

		if (!need_rc2mhz) {
			osc_disable(OSC_ID_RC2MHZ);
		}
	}
}
     30c:	24 96       	adiw	r28, 0x04	; 4
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	de bf       	out	0x3e, r29	; 62
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     318:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     31a:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     31c:	e8 2f       	mov	r30, r24
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	e0 59       	subi	r30, 0x90	; 144
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	60 95       	com	r22
     326:	80 81       	ld	r24, Z
     328:	68 23       	and	r22, r24
     32a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     32c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     32e:	08 95       	ret

00000330 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     330:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     332:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     334:	e8 2f       	mov	r30, r24
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	e0 59       	subi	r30, 0x90	; 144
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	80 81       	ld	r24, Z
     33e:	68 2b       	or	r22, r24
     340:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     342:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     344:	08 95       	ret

00000346 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     346:	86 30       	cpi	r24, 0x06	; 6
     348:	11 f4       	brne	.+4      	; 0x34e <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
     34a:	68 e1       	ldi	r22, 0x18	; 24
     34c:	01 c0       	rjmp	.+2      	; 0x350 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
     34e:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     350:	e0 e5       	ldi	r30, 0x50	; 80
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     356:	81 fd       	sbrc	r24, 1
     358:	24 c0       	rjmp	.+72     	; 0x3a2 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     35a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     35c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     35e:	90 81       	ld	r25, Z
     360:	92 60       	ori	r25, 0x02	; 2
     362:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     364:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     366:	81 81       	ldd	r24, Z+1	; 0x01
     368:	81 ff       	sbrs	r24, 1
     36a:	fd cf       	rjmp	.-6      	; 0x366 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     36c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     36e:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     370:	a0 e5       	ldi	r26, 0x50	; 80
     372:	b0 e0       	ldi	r27, 0x00	; 0
     374:	16 96       	adiw	r26, 0x06	; 6
     376:	9c 91       	ld	r25, X
     378:	16 97       	sbiw	r26, 0x06	; 6
     37a:	99 7f       	andi	r25, 0xF9	; 249
     37c:	16 96       	adiw	r26, 0x06	; 6
     37e:	9c 93       	st	X, r25
     380:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     382:	e0 e6       	ldi	r30, 0x60	; 96
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	90 e8       	ldi	r25, 0x80	; 128
     388:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     38a:	9b eb       	ldi	r25, 0xBB	; 187
     38c:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     38e:	16 96       	adiw	r26, 0x06	; 6
     390:	9c 91       	ld	r25, X
     392:	16 97       	sbiw	r26, 0x06	; 6
     394:	94 60       	ori	r25, 0x04	; 4
     396:	16 96       	adiw	r26, 0x06	; 6
     398:	9c 93       	st	X, r25
		}
		else {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     39a:	90 81       	ld	r25, Z
     39c:	91 60       	ori	r25, 0x01	; 1
     39e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3a0:	8f bf       	out	0x3f, r24	; 63
			osc_wait_ready(OSC_ID_RC32MHZ);
#ifdef CONFIG_OSC_AUTOCAL
			osc_enable_autocalibration(CONFIG_OSC_AUTOCAL,CONFIG_OSC_AUTOCAL_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     3a2:	63 60       	ori	r22, 0x03	; 3
     3a4:	84 e4       	ldi	r24, 0x44	; 68
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	b7 d7       	rcall	.+3950   	; 0x1318 <ccp_write_io>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     3ac:	60 e4       	ldi	r22, 0x40	; 64
     3ae:	b4 cf       	rjmp	.-152    	; 0x318 <sysclk_enable_module>

000003b0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
     3b6:	da 01       	movw	r26, r20
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
     3b8:	fc 01       	movw	r30, r24
     3ba:	70 96       	adiw	r30, 0x10	; 16
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     3c0:	46 2f       	mov	r20, r22
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	ca 01       	movw	r24, r20
     3c6:	02 2e       	mov	r0, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <ioport_configure_port_pin+0x1e>
     3ca:	95 95       	asr	r25
     3cc:	87 95       	ror	r24
     3ce:	0a 94       	dec	r0
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <ioport_configure_port_pin+0x1a>
     3d2:	80 fd       	sbrc	r24, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags;
     3d4:	a0 83       	st	Z, r26
     3d6:	2f 5f       	subi	r18, 0xFF	; 255
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
     3da:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     3dc:	28 30       	cpi	r18, 0x08	; 8
     3de:	31 05       	cpc	r19, r1
     3e0:	89 f7       	brne	.-30     	; 0x3c4 <ioport_configure_port_pin+0x14>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     3e2:	a0 ff       	sbrs	r26, 0
     3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     3e6:	b1 ff       	sbrs	r27, 1
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <ioport_configure_port_pin+0x3e>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     3ea:	6d 83       	std	Y+5, r22	; 0x05
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     3ee:	6e 83       	std	Y+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <ioport_configure_port_pin+0x46>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     3f4:	6a 83       	std	Y+2, r22	; 0x02
	}
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <ui_init>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     3fc:	e0 e0       	ldi	r30, 0x00	; 0
     3fe:	f6 e0       	ldi	r31, 0x06	; 6
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	85 83       	std	Z+5, r24	; 0x05
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	85 83       	std	Z+5, r24	; 0x05
     40c:	80 e1       	ldi	r24, 0x10	; 16
     40e:	85 83       	std	Z+5, r24	; 0x05
     410:	80 e2       	ldi	r24, 0x20	; 32
     412:	85 83       	std	Z+5, r24	; 0x05
     414:	80 e4       	ldi	r24, 0x40	; 64
     416:	85 83       	std	Z+5, r24	; 0x05
     418:	80 e8       	ldi	r24, 0x80	; 128
     41a:	85 83       	std	Z+5, r24	; 0x05
	LED_Off(LED2_GPIO);
	LED_Off(LED4_GPIO);
	LED_Off(LED5_GPIO);
	LED_Off(LED6_GPIO);
	LED_Off(LED7_GPIO);
}
     41c:	08 95       	ret

0000041e <ui_powerdown>:
     41e:	e0 e0       	ldi	r30, 0x00	; 0
     420:	f6 e0       	ldi	r31, 0x06	; 6
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	85 83       	std	Z+5, r24	; 0x05
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	85 83       	std	Z+5, r24	; 0x05
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	85 83       	std	Z+5, r24	; 0x05
     42e:	80 e1       	ldi	r24, 0x10	; 16
     430:	85 83       	std	Z+5, r24	; 0x05
     432:	80 e2       	ldi	r24, 0x20	; 32
     434:	85 83       	std	Z+5, r24	; 0x05
     436:	80 e4       	ldi	r24, 0x40	; 64
     438:	85 83       	std	Z+5, r24	; 0x05
     43a:	80 e8       	ldi	r24, 0x80	; 128
     43c:	85 83       	std	Z+5, r24	; 0x05
	LED_Off(LED2_GPIO);
	LED_Off(LED4_GPIO);
	LED_Off(LED5_GPIO);
	LED_Off(LED6_GPIO);
	LED_Off(LED7_GPIO);
}
     43e:	08 95       	ret

00000440 <ui_wakeup>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	e0 e0       	ldi	r30, 0x00	; 0
     444:	f6 e0       	ldi	r31, 0x06	; 6
     446:	86 83       	std	Z+6, r24	; 0x06

void ui_wakeup(void)
{
	LED_On(LED0_GPIO);
}
     448:	08 95       	ret

0000044a <ui_com_open>:
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	e0 e0       	ldi	r30, 0x00	; 0
     44e:	f6 e0       	ldi	r31, 0x06	; 6
     450:	86 83       	std	Z+6, r24	; 0x06

void ui_com_open(void)
{
	LED_On(LED2_GPIO);
}
     452:	08 95       	ret

00000454 <ui_com_close>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     454:	e0 e0       	ldi	r30, 0x00	; 0
     456:	f6 e0       	ldi	r31, 0x06	; 6
     458:	84 e0       	ldi	r24, 0x04	; 4
     45a:	85 83       	std	Z+5, r24	; 0x05
     45c:	80 e1       	ldi	r24, 0x10	; 16
     45e:	85 83       	std	Z+5, r24	; 0x05
     460:	80 e2       	ldi	r24, 0x20	; 32
     462:	85 83       	std	Z+5, r24	; 0x05
     464:	80 e4       	ldi	r24, 0x40	; 64
     466:	85 83       	std	Z+5, r24	; 0x05
     468:	80 e8       	ldi	r24, 0x80	; 128
     46a:	85 83       	std	Z+5, r24	; 0x05
	LED_Off(LED2_GPIO);
	LED_Off(LED4_GPIO);
	LED_Off(LED5_GPIO);
	LED_Off(LED6_GPIO);
	LED_Off(LED7_GPIO);
}
     46c:	08 95       	ret

0000046e <ui_com_rx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     46e:	80 e1       	ldi	r24, 0x10	; 16
     470:	e0 e0       	ldi	r30, 0x00	; 0
     472:	f6 e0       	ldi	r31, 0x06	; 6
     474:	86 83       	std	Z+6, r24	; 0x06

void ui_com_rx_start(void)
{
	LED_On(LED4_GPIO);
}
     476:	08 95       	ret

00000478 <ui_com_rx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     478:	80 e1       	ldi	r24, 0x10	; 16
     47a:	e0 e0       	ldi	r30, 0x00	; 0
     47c:	f6 e0       	ldi	r31, 0x06	; 6
     47e:	85 83       	std	Z+5, r24	; 0x05

void ui_com_rx_stop(void)
{
	LED_Off(LED4_GPIO);
}
     480:	08 95       	ret

00000482 <ui_com_tx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     482:	80 e2       	ldi	r24, 0x20	; 32
     484:	e0 e0       	ldi	r30, 0x00	; 0
     486:	f6 e0       	ldi	r31, 0x06	; 6
     488:	86 83       	std	Z+6, r24	; 0x06

void ui_com_tx_start(void)
{
	LED_On(LED5_GPIO);
}
     48a:	08 95       	ret

0000048c <ui_com_tx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     48c:	80 e2       	ldi	r24, 0x20	; 32
     48e:	e0 e0       	ldi	r30, 0x00	; 0
     490:	f6 e0       	ldi	r31, 0x06	; 6
     492:	85 83       	std	Z+5, r24	; 0x05

void ui_com_tx_stop(void)
{
	LED_Off(LED5_GPIO);
}
     494:	08 95       	ret

00000496 <ui_com_error>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     496:	80 e4       	ldi	r24, 0x40	; 64
     498:	e0 e0       	ldi	r30, 0x00	; 0
     49a:	f6 e0       	ldi	r31, 0x06	; 6
     49c:	86 83       	std	Z+6, r24	; 0x06

void ui_com_error(void)
{
	LED_On(LED6_GPIO);
}
     49e:	08 95       	ret

000004a0 <ui_com_overflow>:
     4a0:	80 e8       	ldi	r24, 0x80	; 128
     4a2:	e0 e0       	ldi	r30, 0x00	; 0
     4a4:	f6 e0       	ldi	r31, 0x06	; 6
     4a6:	86 83       	std	Z+6, r24	; 0x06

void ui_com_overflow(void)
{
	LED_On(LED7_GPIO);
}
     4a8:	08 95       	ret

000004aa <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
     4aa:	00 97       	sbiw	r24, 0x00	; 0
     4ac:	29 f4       	brne	.+10     	; 0x4b8 <ui_process+0xe>
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	e0 e0       	ldi	r30, 0x00	; 0
     4b2:	f6 e0       	ldi	r31, 0x06	; 6
     4b4:	86 83       	std	Z+6, r24	; 0x06
     4b6:	08 95       	ret
		LED_On(LED1_GPIO);
	}
	if (1000 == framenumber) {
     4b8:	23 e0       	ldi	r18, 0x03	; 3
     4ba:	88 3e       	cpi	r24, 0xE8	; 232
     4bc:	92 07       	cpc	r25, r18
     4be:	21 f4       	brne	.+8      	; 0x4c8 <ui_process+0x1e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	e0 e0       	ldi	r30, 0x00	; 0
     4c4:	f6 e0       	ldi	r31, 0x06	; 6
     4c6:	85 83       	std	Z+5, r24	; 0x05
     4c8:	08 95       	ret

000004ca <udi_cdc_data_disable>:
}
#endif

void udi_cdc_data_disable(void)
{
}
     4ca:	08 95       	ret

000004cc <udi_cdc_data_setup>:
#endif

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	08 95       	ret

000004d0 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	08 95       	ret

000004d4 <udi_cdc_ctrl_state_notify>:
	udi_cdc_ctrl_state_notify(PORT);
}


static void udi_cdc_ctrl_state_notify(uint8_t port)
{
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[PORT])
     4d8:	80 91 d9 25 	lds	r24, 0x25D9
     4dc:	88 23       	and	r24, r24
     4de:	f9 f4       	brne	.+62     	; 0x51e <udi_cdc_ctrl_state_notify+0x4a>
			&& (udi_cdc_state[PORT] != uid_cdc_state_msg[PORT].value)) {
     4e0:	20 91 bc 20 	lds	r18, 0x20BC
     4e4:	30 91 bd 20 	lds	r19, 0x20BD
     4e8:	80 91 c6 20 	lds	r24, 0x20C6
     4ec:	90 91 c7 20 	lds	r25, 0x20C7
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	a1 f0       	breq	.+40     	; 0x51e <udi_cdc_ctrl_state_notify+0x4a>
		// Fill notification message
		uid_cdc_state_msg[PORT].value = udi_cdc_state[PORT];
     4f6:	80 91 bc 20 	lds	r24, 0x20BC
     4fa:	90 91 bd 20 	lds	r25, 0x20BD
     4fe:	80 93 c6 20 	sts	0x20C6, r24
     502:	90 93 c7 20 	sts	0x20C7, r25
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[PORT] =
				udd_ep_run(UDI_CDC_COMM_EPS[PORT] ,
     506:	82 e8       	ldi	r24, 0x82	; 130
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	4e eb       	ldi	r20, 0xBE	; 190
     50c:	50 e2       	ldi	r21, 0x20	; 32
     50e:	2a e0       	ldi	r18, 0x0A	; 10
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	00 eb       	ldi	r16, 0xB0	; 176
     514:	12 e0       	ldi	r17, 0x02	; 2
     516:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <udd_ep_run>
	if ((!udi_cdc_serial_state_msg_ongoing[PORT])
			&& (udi_cdc_state[PORT] != uid_cdc_state_msg[PORT].value)) {
		// Fill notification message
		uid_cdc_state_msg[PORT].value = udi_cdc_state[PORT];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[PORT] =
     51a:	80 93 d9 25 	sts	0x25D9, r24
				false,
				(uint8_t *) & uid_cdc_state_msg[PORT],
				sizeof(uid_cdc_state_msg),
				udi_cdc_serial_state_msg_sents[PORT]);
	}
}
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	08 95       	ret

00000524 <udi_cdc_ctrl_state_change>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     524:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     526:	f8 94       	cli
{
	irqflags_t flags;

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
	if (b_set) {
     528:	66 23       	and	r22, r22
     52a:	59 f0       	breq	.+22     	; 0x542 <udi_cdc_ctrl_state_change+0x1e>
		udi_cdc_state[PORT] |= bit_mask;
     52c:	80 91 bc 20 	lds	r24, 0x20BC
     530:	90 91 bd 20 	lds	r25, 0x20BD
     534:	48 2b       	or	r20, r24
     536:	59 2b       	or	r21, r25
     538:	40 93 bc 20 	sts	0x20BC, r20
     53c:	50 93 bd 20 	sts	0x20BD, r21
     540:	0c c0       	rjmp	.+24     	; 0x55a <udi_cdc_ctrl_state_change+0x36>
	} else {
		udi_cdc_state[PORT] &= ~bit_mask;
     542:	80 91 bc 20 	lds	r24, 0x20BC
     546:	90 91 bd 20 	lds	r25, 0x20BD
     54a:	40 95       	com	r20
     54c:	50 95       	com	r21
     54e:	48 23       	and	r20, r24
     550:	59 23       	and	r21, r25
     552:	40 93 bc 20 	sts	0x20BC, r20
     556:	50 93 bd 20 	sts	0x20BD, r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     55a:	2f bf       	out	0x3f, r18	; 63
	}
	cpu_irq_restore(flags);

	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(PORT);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	ba cf       	rjmp	.-140    	; 0x4d4 <udi_cdc_ctrl_state_notify>

00000560 <udi_cdc_serial_state_msg_sent>:
     560:	10 92 d9 25 	sts	0x25D9, r1
	udi_cdc_serial_state_msg_ongoing[PORT] = false;

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[PORT] &= ~(CDC_SERIAL_STATE_BREAK |
     564:	80 91 bc 20 	lds	r24, 0x20BC
     568:	90 91 bd 20 	lds	r25, 0x20BD
     56c:	83 78       	andi	r24, 0x83	; 131
     56e:	80 93 bc 20 	sts	0x20BC, r24
     572:	90 93 bd 20 	sts	0x20BD, r25
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[PORT].value &= ~(CDC_SERIAL_STATE_BREAK |
     576:	80 91 c6 20 	lds	r24, 0x20C6
     57a:	90 91 c7 20 	lds	r25, 0x20C7
     57e:	83 78       	andi	r24, 0x83	; 131
     580:	80 93 c6 20 	sts	0x20C6, r24
     584:	90 93 c7 20 	sts	0x20C7, r25
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(PORT);
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	a4 cf       	rjmp	.-184    	; 0x4d4 <udi_cdc_ctrl_state_notify>

0000058c <udi_cdc_tx_send>:
     58c:	0f 93       	push	r16


static void udi_cdc_serial_state_msg_sent(udd_ep_status_t status, iram_size_t n)
{
	udi_cdc_serial_state_msg_sent_common(0, status, n);
}
     58e:	1f 93       	push	r17
	udi_cdc_tx_send(PORT);
}


static void udi_cdc_tx_send(uint8_t port)
{
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing[PORT]) {
     594:	80 91 b5 20 	lds	r24, 0x20B5
     598:	88 23       	and	r24, r24
     59a:	09 f0       	breq	.+2      	; 0x59e <udi_cdc_tx_send+0x12>
     59c:	6f c0       	rjmp	.+222    	; 0x67c <udi_cdc_tx_send+0xf0>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
     59e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <udd_is_high_speed>
     5a2:	88 23       	and	r24, r24
     5a4:	51 f0       	breq	.+20     	; 0x5ba <udi_cdc_tx_send+0x2e>
		if (udi_cdc_tx_sof_num[PORT] == udd_get_micro_frame_number()) {
     5a6:	c0 91 d3 20 	lds	r28, 0x20D3
     5aa:	d0 91 d4 20 	lds	r29, 0x20D4
     5ae:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <udd_get_micro_frame_number>
     5b2:	c8 17       	cp	r28, r24
     5b4:	d9 07       	cpc	r29, r25
     5b6:	59 f4       	brne	.+22     	; 0x5ce <udi_cdc_tx_send+0x42>
     5b8:	61 c0       	rjmp	.+194    	; 0x67c <udi_cdc_tx_send+0xf0>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[PORT] == udd_get_frame_number()) {
     5ba:	c0 91 d3 20 	lds	r28, 0x20D3
     5be:	d0 91 d4 20 	lds	r29, 0x20D4
     5c2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <udd_get_frame_number>
     5c6:	c8 17       	cp	r28, r24
     5c8:	d9 07       	cpc	r29, r25
     5ca:	09 f4       	brne	.+2      	; 0x5ce <udi_cdc_tx_send+0x42>
     5cc:	57 c0       	rjmp	.+174    	; 0x67c <udi_cdc_tx_send+0xf0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     5ce:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     5d0:	f8 94       	cli
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[PORT];
     5d2:	c0 91 b6 20 	lds	r28, 0x20B6
	if (!udi_cdc_tx_both_buf_to_send[PORT]) {
     5d6:	90 91 b4 20 	lds	r25, 0x20B4
     5da:	99 23       	and	r25, r25
     5dc:	31 f4       	brne	.+12     	; 0x5ea <udi_cdc_tx_send+0x5e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[PORT] = (buf_sel_trans==0)?1:0;
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	c1 11       	cpse	r28, r1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	90 93 b6 20 	sts	0x20B6, r25
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <udi_cdc_tx_send+0x66>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	c1 11       	cpse	r28, r1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	c9 2f       	mov	r28, r25
	}
	udi_cdc_tx_trans_ongoing[PORT] = true;
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	90 93 b5 20 	sts	0x20B5, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5f8:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);
	
	b_short_packet = (udi_cdc_tx_buf_nb[PORT][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     5fa:	0c 2f       	mov	r16, r28
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	f8 01       	movw	r30, r16
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	e1 53       	subi	r30, 0x31	; 49
     606:	ff 4d       	sbci	r31, 0xDF	; 223
     608:	d1 e0       	ldi	r29, 0x01	; 1
     60a:	80 81       	ld	r24, Z
     60c:	91 81       	ldd	r25, Z+1	; 0x01
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	80 34       	cpi	r24, 0x40	; 64
     612:	92 07       	cpc	r25, r18
     614:	09 f4       	brne	.+2      	; 0x618 <udi_cdc_tx_send+0x8c>
     616:	d0 e0       	ldi	r29, 0x00	; 0
	if (b_short_packet) {
     618:	dd 23       	and	r29, r29
     61a:	91 f0       	breq	.+36     	; 0x640 <udi_cdc_tx_send+0xb4>
		if (udd_is_high_speed()) {
     61c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <udd_is_high_speed>
     620:	88 23       	and	r24, r24
     622:	39 f0       	breq	.+14     	; 0x632 <udi_cdc_tx_send+0xa6>
			udi_cdc_tx_sof_num[PORT] = udd_get_micro_frame_number();
     624:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <udd_get_micro_frame_number>
     628:	80 93 d3 20 	sts	0x20D3, r24
     62c:	90 93 d4 20 	sts	0x20D4, r25
     630:	0b c0       	rjmp	.+22     	; 0x648 <udi_cdc_tx_send+0xbc>
		}else{
			udi_cdc_tx_sof_num[PORT] = udd_get_frame_number();
     632:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <udd_get_frame_number>
     636:	80 93 d3 20 	sts	0x20D3, r24
     63a:	90 93 d4 20 	sts	0x20D4, r25
     63e:	04 c0       	rjmp	.+8      	; 0x648 <udi_cdc_tx_send+0xbc>
		}
	}else{
		udi_cdc_tx_sof_num[PORT] = 0; // Force next transfer without wait SOF
     640:	10 92 d3 20 	sts	0x20D3, r1
     644:	10 92 d4 20 	sts	0x20D4, r1
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_INS[PORT],
     648:	2c 2f       	mov	r18, r28
     64a:	30 e0       	ldi	r19, 0x00	; 0
			b_short_packet,
			udi_cdc_tx_buf[PORT][buf_sel_trans],
     64c:	80 e4       	ldi	r24, 0x40	; 64
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	28 9f       	mul	r18, r24
     652:	a0 01       	movw	r20, r0
     654:	29 9f       	mul	r18, r25
     656:	50 0d       	add	r21, r0
     658:	38 9f       	mul	r19, r24
     65a:	50 0d       	add	r21, r0
     65c:	11 24       	eor	r1, r1
	}else{
		udi_cdc_tx_sof_num[PORT] = 0; // Force next transfer without wait SOF
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_INS[PORT],
     65e:	47 52       	subi	r20, 0x27	; 39
     660:	5f 4d       	sbci	r21, 0xDF	; 223
     662:	f8 01       	movw	r30, r16
     664:	ee 0f       	add	r30, r30
     666:	ff 1f       	adc	r31, r31
     668:	e1 53       	subi	r30, 0x31	; 49
     66a:	ff 4d       	sbci	r31, 0xDF	; 223
     66c:	20 81       	ld	r18, Z
     66e:	31 81       	ldd	r19, Z+1	; 0x01
     670:	81 e8       	ldi	r24, 0x81	; 129
     672:	6d 2f       	mov	r22, r29
     674:	05 e4       	ldi	r16, 0x45	; 69
     676:	13 e0       	ldi	r17, 0x03	; 3
     678:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <udd_ep_run>
			b_short_packet,
			udi_cdc_tx_buf[PORT][buf_sel_trans],
			udi_cdc_tx_buf_nb[PORT][buf_sel_trans],
			udi_cdc_data_sents[PORT]);
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <udi_cdc_data_sof_notify>:
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
	udi_cdc_tx_send(0);
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	81 cf       	rjmp	.-254    	; 0x58c <udi_cdc_tx_send>

0000068a <udi_cdc_data_sent>:
     68a:	88 23       	and	r24, r24
}
     68c:	a9 f4       	brne	.+42     	; 0x6b8 <udi_cdc_data_sent+0x2e>
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[PORT][(udi_cdc_tx_buf_sel[PORT]==0)?1:0] = 0;
     68e:	20 91 b6 20 	lds	r18, 0x20B6
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	22 23       	and	r18, r18
     698:	11 f0       	breq	.+4      	; 0x69e <udi_cdc_data_sent+0x14>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	e1 53       	subi	r30, 0x31	; 49
     6a6:	ff 4d       	sbci	r31, 0xDF	; 223
     6a8:	10 82       	st	Z, r1
     6aa:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_both_buf_to_send[PORT] = false;
     6ac:	10 92 b4 20 	sts	0x20B4, r1
	udi_cdc_tx_trans_ongoing[PORT] = false;
     6b0:	10 92 b5 20 	sts	0x20B5, r1
	udi_cdc_tx_send(PORT);
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	6a cf       	rjmp	.-300    	; 0x58c <udi_cdc_tx_send>
     6b8:	08 95       	ret

000006ba <udi_cdc_comm_setup>:
     6ba:	80 91 7c 27 	lds	r24, 0x277C



static bool udi_cdc_comm_setup_common(uint8_t port)
{
	if (Udd_setup_is_in()) {
     6be:	88 23       	and	r24, r24
     6c0:	fc f4       	brge	.+62     	; 0x700 <udi_cdc_comm_setup+0x46>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     6c2:	80 76       	andi	r24, 0x60	; 96
     6c4:	80 32       	cpi	r24, 0x20	; 32
     6c6:	09 f0       	breq	.+2      	; 0x6ca <udi_cdc_comm_setup+0x10>
     6c8:	49 c0       	rjmp	.+146    	; 0x75c <udi_cdc_comm_setup+0xa2>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     6ca:	80 91 7d 27 	lds	r24, 0x277D
     6ce:	81 32       	cpi	r24, 0x21	; 33
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <udi_cdc_comm_setup+0x1a>
     6d2:	46 c0       	rjmp	.+140    	; 0x760 <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     6d4:	80 91 82 27 	lds	r24, 0x2782
     6d8:	90 91 83 27 	lds	r25, 0x2783
     6dc:	87 30       	cpi	r24, 0x07	; 7
     6de:	91 05       	cpc	r25, r1
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <udi_cdc_comm_setup+0x2a>
     6e2:	40 c0       	rjmp	.+128    	; 0x764 <udi_cdc_comm_setup+0xaa>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
     6e4:	88 ec       	ldi	r24, 0xC8	; 200
     6e6:	90 e2       	ldi	r25, 0x20	; 32
     6e8:	80 93 84 27 	sts	0x2784, r24
     6ec:	90 93 85 27 	sts	0x2785, r25
						(uint8_t *) &
						udi_cdc_line_coding[PORT];
				udd_g_ctrlreq.payload_size =
     6f0:	87 e0       	ldi	r24, 0x07	; 7
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	80 93 86 27 	sts	0x2786, r24
     6f8:	90 93 87 27 	sts	0x2787, r25
						sizeof(usb_cdc_line_coding_t);
				return true;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	08 95       	ret
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     700:	80 76       	andi	r24, 0x60	; 96
     702:	80 32       	cpi	r24, 0x20	; 32
     704:	89 f5       	brne	.+98     	; 0x768 <udi_cdc_comm_setup+0xae>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     706:	80 91 7d 27 	lds	r24, 0x277D
     70a:	80 32       	cpi	r24, 0x20	; 32
     70c:	19 f0       	breq	.+6      	; 0x714 <udi_cdc_comm_setup+0x5a>
     70e:	82 32       	cpi	r24, 0x22	; 34
     710:	69 f5       	brne	.+90     	; 0x76c <udi_cdc_comm_setup+0xb2>
     712:	1b c0       	rjmp	.+54     	; 0x74a <udi_cdc_comm_setup+0x90>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     714:	80 91 82 27 	lds	r24, 0x2782
     718:	90 91 83 27 	lds	r25, 0x2783
     71c:	87 30       	cpi	r24, 0x07	; 7
     71e:	91 05       	cpc	r25, r1
     720:	39 f5       	brne	.+78     	; 0x770 <udi_cdc_comm_setup+0xb6>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
     722:	8a eb       	ldi	r24, 0xBA	; 186
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	80 93 88 27 	sts	0x2788, r24
     72a:	90 93 89 27 	sts	0x2789, r25
						udi_cdc_line_coding_receiveds[PORT];
				udd_g_ctrlreq.payload =
     72e:	88 ec       	ldi	r24, 0xC8	; 200
     730:	90 e2       	ldi	r25, 0x20	; 32
     732:	80 93 84 27 	sts	0x2784, r24
     736:	90 93 85 27 	sts	0x2785, r25
						(uint8_t *) &
						udi_cdc_line_coding[PORT];
				udd_g_ctrlreq.payload_size =
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	80 93 86 27 	sts	0x2786, r24
     742:	90 93 87 27 	sts	0x2787, r25
						sizeof(usb_cdc_line_coding_t);
				return true;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	08 95       	ret
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
#if UDI_CDC_PORT_NB == 1
				UDI_CDC_SET_DTR_EXT((0 !=
     74a:	90 91 7e 27 	lds	r25, 0x277E
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 ff       	sbrs	r25, 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 4d 10 	call	0x209a	; 0x209a <main_cdc_set_dtr>
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(PORT, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
#endif
				return true;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	08 95       	ret
			}
		}
	}
	return false;  // request Not supported
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	08 95       	ret
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	08 95       	ret
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	08 95       	ret
#endif
				return true;
			}
		}
	}
	return false;  // request Not supported
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	08 95       	ret
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	08 95       	ret
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
     770:	80 e0       	ldi	r24, 0x00	; 0
}

bool udi_cdc_comm_setup(void)
{
	return udi_cdc_comm_setup_common(0);
}
     772:	08 95       	ret

00000774 <udi_cdc_line_coding_received>:
#endif
static void udi_cdc_line_coding_received_common(uint8_t port)
{
	// Send line coding to component associated to CDC
#if UDI_CDC_PORT_NB == 1
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding[0]));
     774:	88 ec       	ldi	r24, 0xC8	; 200
     776:	90 e2       	ldi	r25, 0x20	; 32
     778:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <uart_config>

0000077c <udi_cdc_comm_disable>:


static void udi_cdc_line_coding_received(void)
{
	udi_cdc_line_coding_received_common(0);
}
     77c:	10 92 bb 20 	sts	0x20BB, r1

static void udi_cdc_comm_disable_common(uint8_t port)
{
#if UDI_CDC_PORT_NB == 1
	udi_cdc_running[0] = false;
	UDI_CDC_DISABLE_EXT();
     780:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <main_cdc_disable>

00000784 <udi_cdc_comm_enable>:
}

void udi_cdc_comm_disable(void)
{
	udi_cdc_comm_disable_common(0);
}
     784:	10 92 bc 20 	sts	0x20BC, r1


static bool udi_cdc_comm_enable_common(uint8_t port)
{
	// Initialize control signal management
	udi_cdc_state[PORT] = CPU_TO_LE16(0);
     788:	10 92 bd 20 	sts	0x20BD, r1

	uid_cdc_state_msg[PORT].header.bmRequestType =
     78c:	81 ea       	ldi	r24, 0xA1	; 161
     78e:	80 93 be 20 	sts	0x20BE, r24
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE,
	uid_cdc_state_msg[PORT].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE,
     792:	80 e2       	ldi	r24, 0x20	; 32
     794:	80 93 bf 20 	sts	0x20BF, r24
	uid_cdc_state_msg[PORT].header.wValue = LE16(0),
     798:	10 92 c0 20 	sts	0x20C0, r1
     79c:	10 92 c1 20 	sts	0x20C1, r1
	uid_cdc_state_msg[PORT].header.wIndex = LE16(UDI_CDC_COMM_IFACE_NUMBER),
     7a0:	10 92 c2 20 	sts	0x20C2, r1
     7a4:	10 92 c3 20 	sts	0x20C3, r1
	uid_cdc_state_msg[PORT].header.wLength = LE16(2),
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	80 93 c4 20 	sts	0x20C4, r24
     7b0:	90 93 c5 20 	sts	0x20C5, r25
	uid_cdc_state_msg[PORT].value = CPU_TO_LE16(0);
     7b4:	10 92 c6 20 	sts	0x20C6, r1
     7b8:	10 92 c7 20 	sts	0x20C7, r1

	udi_cdc_line_coding[PORT].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	92 ec       	ldi	r25, 0xC2	; 194
     7c0:	a1 e0       	ldi	r26, 0x01	; 1
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	80 93 c8 20 	sts	0x20C8, r24
     7c8:	90 93 c9 20 	sts	0x20C9, r25
     7cc:	a0 93 ca 20 	sts	0x20CA, r26
     7d0:	b0 93 cb 20 	sts	0x20CB, r27
	udi_cdc_line_coding[PORT].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     7d4:	10 92 cc 20 	sts	0x20CC, r1
	udi_cdc_line_coding[PORT].bParityType = UDI_CDC_DEFAULT_PARITY;
     7d8:	10 92 cd 20 	sts	0x20CD, r1
	udi_cdc_line_coding[PORT].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     7dc:	88 e0       	ldi	r24, 0x08	; 8
     7de:	80 93 ce 20 	sts	0x20CE, r24
	// Call application callback
	// to initialize memories or indicate that interface is enabled
#if UDI_CDC_PORT_NB == 1
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding[0]));
     7e2:	88 ec       	ldi	r24, 0xC8	; 200
     7e4:	90 e2       	ldi	r25, 0x20	; 32
     7e6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <uart_config>
	return UDI_CDC_ENABLE_EXT();
     7ea:	0c 94 44 10 	jmp	0x2088	; 0x2088 <main_cdc_enable>

000007ee <udi_cdc_signal_framing_error>:
}

bool udi_cdc_comm_enable(void)
{
	return udi_cdc_comm_enable_common(0);
}
     7ee:	80 e0       	ldi	r24, 0x00	; 0
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DSR);
}

void udi_cdc_signal_framing_error(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_FRAMING);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	40 e1       	ldi	r20, 0x10	; 16
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	96 ce       	rjmp	.-724    	; 0x524 <udi_cdc_ctrl_state_change>

000007f8 <udi_cdc_signal_overrun>:
     7f8:	80 e0       	ldi	r24, 0x00	; 0
}
     7fa:	61 e0       	ldi	r22, 0x01	; 1
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
     7fc:	40 e4       	ldi	r20, 0x40	; 64
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	91 ce       	rjmp	.-734    	; 0x524 <udi_cdc_ctrl_state_change>

00000802 <udi_cdc_multi_is_rx_ready>:
     802:	20 91 b8 20 	lds	r18, 0x20B8
}
#endif

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	uint16_t pos = udi_cdc_rx_pos[PORT];
     806:	30 91 b9 20 	lds	r19, 0x20B9
	return (pos < udi_cdc_rx_buf_nb[PORT][udi_cdc_rx_buf_sel[PORT]]);
     80a:	e0 91 ba 20 	lds	r30, 0x20BA
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	eb 52       	subi	r30, 0x2B	; 43
     816:	ff 4d       	sbci	r31, 0xDF	; 223
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	40 81       	ld	r20, Z
     81c:	51 81       	ldd	r21, Z+1	; 0x01
     81e:	24 17       	cp	r18, r20
     820:	35 07       	cpc	r19, r21
     822:	08 f0       	brcs	.+2      	; 0x826 <udi_cdc_multi_is_rx_ready+0x24>
     824:	80 e0       	ldi	r24, 0x00	; 0
}
     826:	08 95       	ret

00000828 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     830:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     832:	f8 94       	cli
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[PORT];
     834:	c0 91 ba 20 	lds	r28, 0x20BA
	if (udi_cdc_rx_trans_ongoing[PORT] ||
     838:	80 91 b7 20 	lds	r24, 0x20B7
     83c:	88 23       	and	r24, r24
     83e:	79 f4       	brne	.+30     	; 0x85e <udi_cdc_rx_start+0x36>
		(udi_cdc_rx_pos[PORT] < udi_cdc_rx_buf_nb[PORT][buf_sel_trans])) {
     840:	80 91 b8 20 	lds	r24, 0x20B8
     844:	90 91 b9 20 	lds	r25, 0x20B9
     848:	ec 2f       	mov	r30, r28
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	eb 52       	subi	r30, 0x2B	; 43
     852:	ff 4d       	sbci	r31, 0xDF	; 223
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[PORT];
	if (udi_cdc_rx_trans_ongoing[PORT] ||
     854:	20 81       	ld	r18, Z
     856:	31 81       	ldd	r19, Z+1	; 0x01
     858:	82 17       	cp	r24, r18
     85a:	93 07       	cpc	r25, r19
     85c:	18 f4       	brcc	.+6      	; 0x864 <udi_cdc_rx_start+0x3c>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     85e:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[PORT] < udi_cdc_rx_buf_nb[PORT][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	27 c0       	rjmp	.+78     	; 0x8b2 <udi_cdc_rx_start+0x8a>
	}

	// Change current buffer
	udi_cdc_rx_pos[PORT] = 0;
     864:	10 92 b8 20 	sts	0x20B8, r1
     868:	10 92 b9 20 	sts	0x20B9, r1
	udi_cdc_rx_buf_sel[PORT] = (buf_sel_trans==0)?1:0;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	c1 11       	cpse	r28, r1
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	80 93 ba 20 	sts	0x20BA, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[PORT] = true;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 93 b7 20 	sts	0x20B7, r24
     87c:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(PORT)) {
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	c0 df       	rcall	.-128    	; 0x802 <udi_cdc_multi_is_rx_ready>
     882:	88 23       	and	r24, r24
     884:	11 f0       	breq	.+4      	; 0x88a <udi_cdc_rx_start+0x62>
     886:	0e 94 ca 10 	call	0x2194	; 0x2194 <uart_rx_notify>
#if UDI_CDC_PORT_NB == 1
		UDI_CDC_RX_NOTIFY();
     88a:	d0 e0       	ldi	r29, 0x00	; 0
#else
		UDI_CDC_RX_NOTIFY(port);
#endif
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUTS[PORT],
     88c:	80 e4       	ldi	r24, 0x40	; 64
			true,
			udi_cdc_rx_buf[PORT][buf_sel_trans],
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	c8 9f       	mul	r28, r24
     892:	a0 01       	movw	r20, r0
     894:	c9 9f       	mul	r28, r25
     896:	50 0d       	add	r21, r0
     898:	d8 9f       	mul	r29, r24
     89a:	50 0d       	add	r21, r0
     89c:	11 24       	eor	r1, r1
     89e:	47 5a       	subi	r20, 0xA7	; 167
#else
		UDI_CDC_RX_NOTIFY(port);
#endif
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUTS[PORT],
     8a0:	5c 4d       	sbci	r21, 0xDC	; 220
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	20 e4       	ldi	r18, 0x40	; 64
     8a8:	31 e0       	ldi	r19, 0x01	; 1
     8aa:	0e e5       	ldi	r16, 0x5E	; 94
     8ac:	14 e0       	ldi	r17, 0x04	; 4
     8ae:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <udd_ep_run>
     8b2:	df 91       	pop	r29
			true,
			udi_cdc_rx_buf[PORT][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received_callbacks[PORT]);
}
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <udi_cdc_data_received>:
     8bc:	0f 93       	push	r16


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n)
{
     8be:	1f 93       	push	r17

static void udi_cdc_data_received_common(uint8_t port, udd_ep_status_t status, iram_size_t n)
{
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
     8c0:	88 23       	and	r24, r24
     8c2:	41 f5       	brne	.+80     	; 0x914 <udi_cdc_data_received+0x58>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[PORT]==0)?1:0;
     8c4:	80 91 ba 20 	lds	r24, 0x20BA
     8c8:	e1 e0       	ldi	r30, 0x01	; 1
     8ca:	81 11       	cpse	r24, r1
     8cc:	e0 e0       	ldi	r30, 0x00	; 0
	if (!n) {
     8ce:	61 15       	cp	r22, r1
     8d0:	71 05       	cpc	r23, r1
     8d2:	a9 f4       	brne	.+42     	; 0x8fe <udi_cdc_data_received+0x42>
		udd_ep_run( UDI_CDC_DATA_EP_OUTS[PORT],
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
				true,
				udi_cdc_rx_buf[PORT][buf_sel_trans],
     8d6:	80 e4       	ldi	r24, 0x40	; 64
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	e8 9f       	mul	r30, r24
     8dc:	a0 01       	movw	r20, r0
     8de:	e9 9f       	mul	r30, r25
     8e0:	50 0d       	add	r21, r0
     8e2:	f8 9f       	mul	r31, r24
     8e4:	50 0d       	add	r21, r0
     8e6:	11 24       	eor	r1, r1
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[PORT]==0)?1:0;
	if (!n) {
		udd_ep_run( UDI_CDC_DATA_EP_OUTS[PORT],
     8e8:	47 5a       	subi	r20, 0xA7	; 167
     8ea:	5c 4d       	sbci	r21, 0xDC	; 220
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	20 e4       	ldi	r18, 0x40	; 64
     8f2:	31 e0       	ldi	r19, 0x01	; 1
     8f4:	0e e5       	ldi	r16, 0x5E	; 94
     8f6:	14 e0       	ldi	r17, 0x04	; 4
     8f8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <udd_ep_run>
     8fc:	0b c0       	rjmp	.+22     	; 0x914 <udi_cdc_data_received+0x58>
				udi_cdc_rx_buf[PORT][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received_callbacks[PORT]);
		return;
	}
	udi_cdc_rx_buf_nb[PORT][buf_sel_trans] = n;
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	eb 52       	subi	r30, 0x2B	; 43
     906:	ff 4d       	sbci	r31, 0xDF	; 223
     908:	60 83       	st	Z, r22
     90a:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[PORT] = false;
     90c:	10 92 b7 20 	sts	0x20B7, r1
	udi_cdc_rx_start(PORT);
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	8a df       	rcall	.-236    	; 0x828 <udi_cdc_rx_start>
     914:	1f 91       	pop	r17


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n)
{
	udi_cdc_data_received_common(0, status, n);
}
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <udi_cdc_data_enable>:
     91a:	10 92 b5 20 	sts	0x20B5, r1

static bool udi_cdc_data_enable_common(uint8_t port)
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing[PORT] = false;
	udi_cdc_tx_both_buf_to_send[PORT] = false;
     91e:	10 92 b4 20 	sts	0x20B4, r1
	udi_cdc_tx_buf_sel[PORT] = 0;
     922:	10 92 b6 20 	sts	0x20B6, r1
	udi_cdc_tx_buf_nb[PORT][0] = 0;
     926:	10 92 cf 20 	sts	0x20CF, r1
     92a:	10 92 d0 20 	sts	0x20D0, r1
	udi_cdc_tx_buf_nb[PORT][1] = 0;
     92e:	10 92 d1 20 	sts	0x20D1, r1
     932:	10 92 d2 20 	sts	0x20D2, r1
	udi_cdc_tx_sof_num[PORT] = 0;
     936:	10 92 d3 20 	sts	0x20D3, r1
     93a:	10 92 d4 20 	sts	0x20D4, r1
	udi_cdc_tx_send(PORT);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	25 de       	rcall	.-950    	; 0x58c <udi_cdc_tx_send>
     942:	10 92 b7 20 	sts	0x20B7, r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[PORT] = false;
     946:	10 92 ba 20 	sts	0x20BA, r1
	udi_cdc_rx_buf_sel[PORT] = 0;
     94a:	10 92 d5 20 	sts	0x20D5, r1
	udi_cdc_rx_buf_nb[PORT][0] = 0;
     94e:	10 92 d6 20 	sts	0x20D6, r1
     952:	10 92 b8 20 	sts	0x20B8, r1
	udi_cdc_rx_pos[PORT] = 0;
     956:	10 92 b9 20 	sts	0x20B9, r1
     95a:	80 e0       	ldi	r24, 0x00	; 0
	udi_cdc_running[PORT] = udi_cdc_rx_start(PORT);
     95c:	65 df       	rcall	.-310    	; 0x828 <udi_cdc_rx_start>
     95e:	80 93 bb 20 	sts	0x20BB, r24
     962:	80 91 bb 20 	lds	r24, 0x20BB
	return udi_cdc_running[PORT];
     966:	08 95       	ret

00000968 <udi_cdc_is_rx_ready>:
     968:	80 e0       	ldi	r24, 0x00	; 0
}

bool udi_cdc_data_enable(void)
{
	return udi_cdc_data_enable_common(0);
}
     96a:	4b cf       	rjmp	.-362    	; 0x802 <udi_cdc_multi_is_rx_ready>

0000096c <udi_cdc_multi_getc>:
	return (pos < udi_cdc_rx_buf_nb[PORT][udi_cdc_rx_buf_sel[PORT]]);
}

bool udi_cdc_is_rx_ready(void)
{
	return udi_cdc_multi_is_rx_ready(0);
     96c:	ef 92       	push	r14
}
     96e:	ff 92       	push	r15

int udi_cdc_multi_getc(uint8_t port)
{
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
	int rx_data = 0;
	bool b_databit_9;
	uint16_t pos;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding[PORT].bDataBits);
     976:	11 e0       	ldi	r17, 0x01	; 1
     978:	80 91 ce 20 	lds	r24, 0x20CE
     97c:	89 30       	cpi	r24, 0x09	; 9
     97e:	09 f0       	breq	.+2      	; 0x982 <udi_cdc_multi_getc+0x16>
     980:	10 e0       	ldi	r17, 0x00	; 0
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
	int rx_data = 0;
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	70 e0       	ldi	r23, 0x00	; 0
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[PORT][buf_sel][pos];
     986:	0f 2e       	mov	r0, r31
     988:	f0 e4       	ldi	r31, 0x40	; 64
     98a:	ef 2e       	mov	r14, r31
     98c:	f1 e0       	ldi	r31, 0x01	; 1
     98e:	ff 2e       	mov	r15, r31
     990:	f0 2d       	mov	r31, r0

	b_databit_9 = (9 == udi_cdc_line_coding[PORT].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	pos = udi_cdc_rx_pos[PORT];
     992:	40 91 b8 20 	lds	r20, 0x20B8
     996:	50 91 b9 20 	lds	r21, 0x20B9
	buf_sel = udi_cdc_rx_buf_sel[PORT];
     99a:	20 91 ba 20 	lds	r18, 0x20BA
	while (pos >= udi_cdc_rx_buf_nb[PORT][buf_sel]) {
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	f9 01       	movw	r30, r18
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	eb 52       	subi	r30, 0x2B	; 43
     9a8:	ff 4d       	sbci	r31, 0xDF	; 223
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	48 17       	cp	r20, r24
     9b0:	59 07       	cpc	r21, r25
     9b2:	28 f0       	brcs	.+10     	; 0x9be <udi_cdc_multi_getc+0x52>
		if (!udi_cdc_running[PORT]) {
     9b4:	80 91 bb 20 	lds	r24, 0x20BB
     9b8:	88 23       	and	r24, r24
     9ba:	59 f7       	brne	.-42     	; 0x992 <udi_cdc_multi_getc+0x26>
     9bc:	1e c0       	rjmp	.+60     	; 0x9fa <udi_cdc_multi_getc+0x8e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[PORT][buf_sel][pos];
     9be:	2e 9d       	mul	r18, r14
     9c0:	c0 01       	movw	r24, r0
     9c2:	2f 9d       	mul	r18, r15
     9c4:	90 0d       	add	r25, r0
     9c6:	3e 9d       	mul	r19, r14
     9c8:	90 0d       	add	r25, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	84 0f       	add	r24, r20
     9ce:	95 1f       	adc	r25, r21
     9d0:	fc 01       	movw	r30, r24
     9d2:	e7 5a       	subi	r30, 0xA7	; 167
     9d4:	fc 4d       	sbci	r31, 0xDC	; 220
     9d6:	c0 81       	ld	r28, Z
     9d8:	d0 e0       	ldi	r29, 0x00	; 0
     9da:	c6 2b       	or	r28, r22
     9dc:	d7 2b       	or	r29, r23
	udi_cdc_rx_pos[PORT] = pos+1;
     9de:	4f 5f       	subi	r20, 0xFF	; 255
     9e0:	5f 4f       	sbci	r21, 0xFF	; 255
     9e2:	40 93 b8 20 	sts	0x20B8, r20
     9e6:	50 93 b9 20 	sts	0x20B9, r21

	udi_cdc_rx_start(PORT);
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	1d df       	rcall	.-454    	; 0x828 <udi_cdc_rx_start>
     9ee:	11 23       	and	r17, r17

	if (b_databit_9) {
     9f0:	31 f0       	breq	.+12     	; 0x9fe <udi_cdc_multi_getc+0x92>
     9f2:	7c 2f       	mov	r23, r28
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
     9f4:	66 27       	eor	r22, r22
     9f6:	10 e0       	ldi	r17, 0x00	; 0

	udi_cdc_rx_start(PORT);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
     9f8:	cc cf       	rjmp	.-104    	; 0x992 <udi_cdc_multi_getc+0x26>
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
     9fa:	c0 e0       	ldi	r28, 0x00	; 0
	// Check avaliable data
	pos = udi_cdc_rx_pos[PORT];
	buf_sel = udi_cdc_rx_buf_sel[PORT];
	while (pos >= udi_cdc_rx_buf_nb[PORT][buf_sel]) {
		if (!udi_cdc_running[PORT]) {
			return 0;
     9fc:	d0 e0       	ldi	r29, 0x00	; 0
     9fe:	8c 2f       	mov	r24, r28
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
     a00:	9d 2f       	mov	r25, r29
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	08 95       	ret

00000a0e <udi_cdc_getc>:
     a0e:	80 e0       	ldi	r24, 0x00	; 0

int udi_cdc_getc(void)
{
	return udi_cdc_multi_getc(0);
     a10:	ad cf       	rjmp	.-166    	; 0x96c <udi_cdc_multi_getc>

00000a12 <udi_cdc_multi_is_tx_ready>:
     a12:	e0 91 b6 20 	lds	r30, 0x20B6
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[PORT][udi_cdc_tx_buf_sel[PORT]]!=UDI_CDC_TX_BUFFERS) {
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	e1 53       	subi	r30, 0x31	; 49
     a1e:	ff 4d       	sbci	r31, 0xDF	; 223
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	80 34       	cpi	r24, 0x40	; 64
     a28:	92 07       	cpc	r25, r18
     a2a:	21 f5       	brne	.+72     	; 0xa74 <udi_cdc_multi_is_tx_ready+0x62>
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send[PORT]) {
     a2c:	80 91 b4 20 	lds	r24, 0x20B4
     a30:	88 23       	and	r24, r24
     a32:	81 f4       	brne	.+32     	; 0xa54 <udi_cdc_multi_is_tx_ready+0x42>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     a34:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     a36:	f8 94       	cli
		flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing[PORT]) {
     a38:	90 91 b5 20 	lds	r25, 0x20B5
     a3c:	99 23       	and	r25, r25
     a3e:	49 f4       	brne	.+18     	; 0xa52 <udi_cdc_multi_is_tx_ready+0x40>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send[PORT] = true;
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	90 93 b4 20 	sts	0x20B4, r25
			udi_cdc_tx_buf_sel[PORT] = (udi_cdc_tx_buf_sel[PORT]==0)?1:0;
     a46:	20 91 b6 20 	lds	r18, 0x20B6
     a4a:	21 11       	cpse	r18, r1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 b6 20 	sts	0x20B6, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a52:	8f bf       	out	0x3f, r24	; 63
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[PORT][udi_cdc_tx_buf_sel[PORT]]!=UDI_CDC_TX_BUFFERS);
     a54:	e0 91 b6 20 	lds	r30, 0x20B6
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	e1 53       	subi	r30, 0x31	; 49
     a60:	ff 4d       	sbci	r31, 0xDF	; 223
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	20 81       	ld	r18, Z
     a66:	31 81       	ldd	r19, Z+1	; 0x01
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	20 34       	cpi	r18, 0x40	; 64
     a6c:	39 07       	cpc	r19, r25
     a6e:	19 f4       	brne	.+6      	; 0xa76 <udi_cdc_multi_is_tx_ready+0x64>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	08 95       	ret

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[PORT][udi_cdc_tx_buf_sel[PORT]]!=UDI_CDC_TX_BUFFERS) {
		return true;
     a74:	81 e0       	ldi	r24, 0x01	; 1
			udi_cdc_tx_buf_sel[PORT] = (udi_cdc_tx_buf_sel[PORT]==0)?1:0;
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[PORT][udi_cdc_tx_buf_sel[PORT]]!=UDI_CDC_TX_BUFFERS);
}
     a76:	08 95       	ret

00000a78 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	cb cf       	rjmp	.-106    	; 0xa12 <udi_cdc_multi_is_tx_ready>

00000a7c <udi_cdc_multi_putc>:
     a7c:	ef 92       	push	r14
}
     a7e:	ff 92       	push	r15

int udi_cdc_multi_putc(uint8_t port, int value)
{
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	8b 01       	movw	r16, r22
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding[PORT].bDataBits);
     a88:	c1 e0       	ldi	r28, 0x01	; 1
     a8a:	80 91 ce 20 	lds	r24, 0x20CE
     a8e:	89 30       	cpi	r24, 0x09	; 9
     a90:	09 f0       	breq	.+2      	; 0xa94 <udi_cdc_multi_putc+0x18>
     a92:	c0 e0       	ldi	r28, 0x00	; 0
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[PORT];
	udi_cdc_tx_buf[PORT][buf_sel][udi_cdc_tx_buf_nb[PORT][buf_sel]++] = value;
     a94:	0f 2e       	mov	r0, r31
     a96:	f0 e4       	ldi	r31, 0x40	; 64
     a98:	ef 2e       	mov	r14, r31
     a9a:	f1 e0       	ldi	r31, 0x01	; 1
     a9c:	ff 2e       	mov	r15, r31
     a9e:	f0 2d       	mov	r31, r0

	b_databit_9 = (9 == udi_cdc_line_coding[PORT].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_multi_is_tx_ready(PORT)) {
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	b7 df       	rcall	.-146    	; 0xa12 <udi_cdc_multi_is_tx_ready>
     aa4:	88 23       	and	r24, r24
     aa6:	29 f4       	brne	.+10     	; 0xab2 <udi_cdc_multi_putc+0x36>
     aa8:	80 91 bb 20 	lds	r24, 0x20BB
		if (!udi_cdc_running[PORT]) {
     aac:	88 23       	and	r24, r24
     aae:	c1 f7       	brne	.-16     	; 0xaa0 <udi_cdc_multi_putc+0x24>
     ab0:	27 c0       	rjmp	.+78     	; 0xb00 <udi_cdc_multi_putc+0x84>
     ab2:	6f b7       	in	r22, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     ab4:	f8 94       	cli
	cpu_irq_disable();
     ab6:	20 91 b6 20 	lds	r18, 0x20B6
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[PORT];
     aba:	30 e0       	ldi	r19, 0x00	; 0
	udi_cdc_tx_buf[PORT][buf_sel][udi_cdc_tx_buf_nb[PORT][buf_sel]++] = value;
     abc:	d9 01       	movw	r26, r18
     abe:	aa 0f       	add	r26, r26
     ac0:	bb 1f       	adc	r27, r27
     ac2:	a1 53       	subi	r26, 0x31	; 49
     ac4:	bf 4d       	sbci	r27, 0xDF	; 223
     ac6:	4d 91       	ld	r20, X+
     ac8:	5c 91       	ld	r21, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	2e 9d       	mul	r18, r14
     ace:	c0 01       	movw	r24, r0
     ad0:	2f 9d       	mul	r18, r15
     ad2:	90 0d       	add	r25, r0
     ad4:	3e 9d       	mul	r19, r14
     ad6:	90 0d       	add	r25, r0
     ad8:	11 24       	eor	r1, r1
     ada:	84 0f       	add	r24, r20
     adc:	95 1f       	adc	r25, r21
     ade:	fc 01       	movw	r30, r24
     ae0:	e7 52       	subi	r30, 0x27	; 39
     ae2:	ff 4d       	sbci	r31, 0xDF	; 223
     ae4:	00 83       	st	Z, r16
     ae6:	4f 5f       	subi	r20, 0xFF	; 255
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	4d 93       	st	X+, r20
     aec:	5c 93       	st	X, r21
     aee:	11 97       	sbiw	r26, 0x01	; 1
     af0:	6f bf       	out	0x3f, r22	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     af2:	cc 23       	and	r28, r28
	cpu_irq_restore(flags);

	if (b_databit_9) {
     af4:	41 f0       	breq	.+16     	; 0xb06 <udi_cdc_multi_putc+0x8a>
     af6:	01 2f       	mov	r16, r17
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     af8:	11 0f       	add	r17, r17
     afa:	11 0b       	sbc	r17, r17
     afc:	c0 e0       	ldi	r28, 0x00	; 0
	udi_cdc_tx_buf[PORT][buf_sel][udi_cdc_tx_buf_nb[PORT][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     afe:	d0 cf       	rjmp	.-96     	; 0xaa0 <udi_cdc_multi_putc+0x24>
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     b00:	80 e0       	ldi	r24, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_multi_is_tx_ready(PORT)) {
		if (!udi_cdc_running[PORT]) {
			return false;
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <udi_cdc_multi_putc+0x8e>
     b06:	81 e0       	ldi	r24, 0x01	; 1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	cf 91       	pop	r28
}
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	08 95       	ret

00000b16 <udi_cdc_putc>:
     b16:	bc 01       	movw	r22, r24

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	b0 cf       	rjmp	.-160    	; 0xa7c <udi_cdc_multi_putc>

00000b1c <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     b1c:	e0 91 dd 25 	lds	r30, 0x25DD
     b20:	f0 91 de 25 	lds	r31, 0x25DE
     b24:	01 90       	ld	r0, Z+
     b26:	f0 81       	ld	r31, Z
     b28:	e0 2d       	mov	r30, r0
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	8e 0f       	add	r24, r30
     b30:	9f 1f       	adc	r25, r31
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
     b32:	08 95       	ret

00000b34 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	ec 01       	movw	r28, r24
     b3c:	16 2f       	mov	r17, r22
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
     b3e:	ee df       	rcall	.-36     	; 0xb1c <udc_get_eof_conf>
     b40:	9c 01       	movw	r18, r24
     b42:	88 81       	ld	r24, Y
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b44:	c8 0f       	add	r28, r24
     b46:	d1 1d       	adc	r29, r1
     b48:	c2 17       	cp	r28, r18
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     b4a:	d3 07       	cpc	r29, r19
     b4c:	a0 f4       	brcc	.+40     	; 0xb76 <udc_next_desc_in_iface+0x42>
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b50:	84 30       	cpi	r24, 0x04	; 4
     b52:	a1 f0       	breq	.+40     	; 0xb7c <udc_next_desc_in_iface+0x48>
     b54:	81 17       	cp	r24, r17
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     b56:	31 f4       	brne	.+12     	; 0xb64 <udc_next_desc_in_iface+0x30>
     b58:	16 c0       	rjmp	.+44     	; 0xb86 <udc_next_desc_in_iface+0x52>
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	89 f0       	breq	.+34     	; 0xb82 <udc_next_desc_in_iface+0x4e>
     b60:	81 17       	cp	r24, r17
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     b62:	89 f0       	breq	.+34     	; 0xb86 <udc_next_desc_in_iface+0x52>
     b64:	88 81       	ld	r24, Y
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b66:	c8 0f       	add	r28, r24
     b68:	d1 1d       	adc	r29, r1
     b6a:	c2 17       	cp	r28, r18
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     b6c:	d3 07       	cpc	r29, r19
     b6e:	a8 f3       	brcs	.-22     	; 0xb5a <udc_next_desc_in_iface+0x26>
     b70:	c0 e0       	ldi	r28, 0x00	; 0
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     b72:	d0 e0       	ldi	r29, 0x00	; 0
     b74:	08 c0       	rjmp	.+16     	; 0xb86 <udc_next_desc_in_iface+0x52>
     b76:	c0 e0       	ldi	r28, 0x00	; 0
     b78:	d0 e0       	ldi	r29, 0x00	; 0
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <udc_next_desc_in_iface+0x52>
     b7c:	c0 e0       	ldi	r28, 0x00	; 0
     b7e:	d0 e0       	ldi	r29, 0x00	; 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <udc_next_desc_in_iface+0x52>
     b82:	c0 e0       	ldi	r28, 0x00	; 0
     b84:	d0 e0       	ldi	r29, 0x00	; 0
     b86:	8c 2f       	mov	r24, r28
}
     b88:	9d 2f       	mov	r25, r29
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	08 95       	ret

00000b92 <udc_update_iface_desc>:
     b92:	0f 93       	push	r16
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	18 2f       	mov	r17, r24
     b9c:	06 2f       	mov	r16, r22
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     b9e:	80 91 dc 25 	lds	r24, 0x25DC
     ba2:	88 23       	and	r24, r24
     ba4:	89 f1       	breq	.+98     	; 0xc08 <udc_update_iface_desc+0x76>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     ba6:	e0 91 dd 25 	lds	r30, 0x25DD
     baa:	f0 91 de 25 	lds	r31, 0x25DE
     bae:	c0 81       	ld	r28, Z
     bb0:	d1 81       	ldd	r29, Z+1	; 0x01
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	18 17       	cp	r17, r24
     bb6:	50 f5       	brcc	.+84     	; 0xc0c <udc_update_iface_desc+0x7a>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     bb8:	c0 93 da 25 	sts	0x25DA, r28
     bbc:	d0 93 db 25 	sts	0x25DB, r29
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
     bc0:	ad df       	rcall	.-166    	; 0xb1c <udc_get_eof_conf>
     bc2:	c8 17       	cp	r28, r24
	while (ptr_end_desc >
     bc4:	d9 07       	cpc	r29, r25
     bc6:	20 f5       	brcc	.+72     	; 0xc10 <udc_update_iface_desc+0x7e>
     bc8:	4c 2f       	mov	r20, r28
     bca:	3d 2f       	mov	r19, r29
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <udc_update_iface_desc+0x40>
     bce:	4c 2f       	mov	r20, r28
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     bd0:	3d 2f       	mov	r19, r29
     bd2:	29 81       	ldd	r18, Y+1	; 0x01

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     bd4:	24 30       	cpi	r18, 0x04	; 4
     bd6:	61 f4       	brne	.+24     	; 0xbf0 <udc_update_iface_desc+0x5e>
     bd8:	2a 81       	ldd	r18, Y+2	; 0x02
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     bda:	21 17       	cp	r18, r17
     bdc:	49 f4       	brne	.+18     	; 0xbf0 <udc_update_iface_desc+0x5e>
     bde:	2b 81       	ldd	r18, Y+3	; 0x03
     be0:	20 17       	cp	r18, r16
     be2:	31 f4       	brne	.+12     	; 0xbf0 <udc_update_iface_desc+0x5e>
     be4:	40 93 da 25 	sts	0x25DA, r20
     be8:	30 93 db 25 	sts	0x25DB, r19
     bec:	81 e0       	ldi	r24, 0x01	; 1
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
     bee:	11 c0       	rjmp	.+34     	; 0xc12 <udc_update_iface_desc+0x80>
     bf0:	28 81       	ld	r18, Y
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     bf2:	c2 0f       	add	r28, r18
     bf4:	d1 1d       	adc	r29, r1
     bf6:	c8 17       	cp	r28, r24
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     bf8:	d9 07       	cpc	r29, r25
     bfa:	48 f3       	brcs	.-46     	; 0xbce <udc_update_iface_desc+0x3c>
     bfc:	c0 93 da 25 	sts	0x25DA, r28
     c00:	d0 93 db 25 	sts	0x25DB, r29
     c04:	80 e0       	ldi	r24, 0x00	; 0
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     c06:	05 c0       	rjmp	.+10     	; 0xc12 <udc_update_iface_desc+0x80>
     c08:	80 e0       	ldi	r24, 0x00	; 0
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
     c0a:	03 c0       	rjmp	.+6      	; 0xc12 <udc_update_iface_desc+0x80>
     c0c:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <udc_update_iface_desc+0x80>
     c10:	80 e0       	ldi	r24, 0x00	; 0
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     c12:	df 91       	pop	r29
}
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret

00000c1c <udc_valid_address>:
     c1c:	80 91 7e 27 	lds	r24, 0x277E
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     c20:	8f 77       	andi	r24, 0x7F	; 127
     c22:	2b c7       	rjmp	.+3670   	; 0x1a7a <udd_set_address>

00000c24 <udc_iface_enable>:
     c24:	1f 93       	push	r17
}
     c26:	cf 93       	push	r28
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     c28:	df 93       	push	r29
     c2a:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     c2c:	b2 df       	rcall	.-156    	; 0xb92 <udc_update_iface_desc>
     c2e:	88 23       	and	r24, r24
     c30:	41 f1       	breq	.+80     	; 0xc82 <udc_iface_enable+0x5e>
     c32:	c0 91 da 25 	lds	r28, 0x25DA

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     c36:	d0 91 db 25 	lds	r29, 0x25DB
     c3a:	ce 01       	movw	r24, r28
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c3c:	65 e0       	ldi	r22, 0x05	; 5
     c3e:	7a df       	rcall	.-268    	; 0xb34 <udc_next_desc_in_iface>
     c40:	ec 01       	movw	r28, r24
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	41 f0       	breq	.+16     	; 0xc56 <udc_iface_enable+0x32>
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     c46:	4c 81       	ldd	r20, Y+4	; 0x04
     c48:	5d 81       	ldd	r21, Y+5	; 0x05
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	6b 81       	ldd	r22, Y+3	; 0x03
     c4e:	2c d7       	rcall	.+3672   	; 0x1aa8 <udd_ep_alloc>
     c50:	88 23       	and	r24, r24
     c52:	99 f7       	brne	.-26     	; 0xc3a <udc_iface_enable+0x16>
     c54:	18 c0       	rjmp	.+48     	; 0xc86 <udc_iface_enable+0x62>
     c56:	a0 91 dd 25 	lds	r26, 0x25DD
     c5a:	b0 91 de 25 	lds	r27, 0x25DE
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     c5e:	81 2f       	mov	r24, r17
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	ed 91       	ld	r30, X+
     c6a:	fc 91       	ld	r31, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	e8 0f       	add	r30, r24
     c70:	f9 1f       	adc	r31, r25
     c72:	01 90       	ld	r0, Z+
     c74:	f0 81       	ld	r31, Z
     c76:	e0 2d       	mov	r30, r0
     c78:	01 90       	ld	r0, Z+
     c7a:	f0 81       	ld	r31, Z
     c7c:	e0 2d       	mov	r30, r0
     c7e:	09 95       	icall
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <udc_iface_enable+0x64>
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <udc_iface_enable+0x64>
     c86:	80 e0       	ldi	r24, 0x00	; 0
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
     c8c:	1f 91       	pop	r17
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
     c8e:	08 95       	ret

00000c90 <udc_iface_disable>:
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     c96:	df 93       	push	r29
     c98:	c8 2f       	mov	r28, r24
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	7a df       	rcall	.-268    	; 0xb92 <udc_update_iface_desc>
     c9e:	88 23       	and	r24, r24
     ca0:	81 f1       	breq	.+96     	; 0xd02 <udc_iface_disable+0x72>
     ca2:	a0 91 dd 25 	lds	r26, 0x25DD
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     ca6:	b0 91 de 25 	lds	r27, 0x25DE
     caa:	8c 2f       	mov	r24, r28
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	12 96       	adiw	r26, 0x02	; 2
     cb4:	ed 91       	ld	r30, X+
     cb6:	fc 91       	ld	r31, X
     cb8:	13 97       	sbiw	r26, 0x03	; 3
     cba:	e8 0f       	add	r30, r24
     cbc:	f9 1f       	adc	r31, r25
     cbe:	00 81       	ld	r16, Z
     cc0:	11 81       	ldd	r17, Z+1	; 0x01
     cc2:	d8 01       	movw	r26, r16

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     cc4:	16 96       	adiw	r26, 0x06	; 6
     cc6:	ed 91       	ld	r30, X+
     cc8:	fc 91       	ld	r31, X
     cca:	17 97       	sbiw	r26, 0x07	; 7
     ccc:	09 95       	icall
     cce:	68 2f       	mov	r22, r24
     cd0:	8c 2f       	mov	r24, r28
     cd2:	5f df       	rcall	.-322    	; 0xb92 <udc_update_iface_desc>
     cd4:	88 23       	and	r24, r24
     cd6:	b9 f0       	breq	.+46     	; 0xd06 <udc_iface_disable+0x76>
     cd8:	c0 91 da 25 	lds	r28, 0x25DA
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     cdc:	d0 91 db 25 	lds	r29, 0x25DB
     ce0:	ce 01       	movw	r24, r28
     ce2:	65 e0       	ldi	r22, 0x05	; 5
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     ce4:	27 df       	rcall	.-434    	; 0xb34 <udc_next_desc_in_iface>
     ce6:	ec 01       	movw	r28, r24
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	19 f0       	breq	.+6      	; 0xcf2 <udc_iface_disable+0x62>
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     cee:	e0 d7       	rcall	.+4032   	; 0x1cb0 <udd_ep_free>
     cf0:	f7 cf       	rjmp	.-18     	; 0xce0 <udc_iface_disable+0x50>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     cf2:	d8 01       	movw	r26, r16
     cf4:	12 96       	adiw	r26, 0x02	; 2
     cf6:	ed 91       	ld	r30, X+
		}
     cf8:	fc 91       	ld	r31, X
	}
#endif

	// Disable interface
	udi_api->disable();
     cfa:	13 97       	sbiw	r26, 0x03	; 3
     cfc:	09 95       	icall
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <udc_iface_disable+0x78>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <udc_iface_disable+0x78>
	return true;
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	df 91       	pop	r29
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
     d0e:	0f 91       	pop	r16
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
     d10:	08 95       	ret

00000d12 <udc_start>:
     d12:	07 c6       	rjmp	.+3086   	; 0x1922 <udd_enable>
     d14:	08 95       	ret

00000d16 <udc_reset>:
     d16:	cf 93       	push	r28
     d18:	80 91 dc 25 	lds	r24, 0x25DC
 */
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
     d1c:	88 23       	and	r24, r24
     d1e:	c1 f0       	breq	.+48     	; 0xd50 <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d20:	e0 91 dd 25 	lds	r30, 0x25DD
     d24:	f0 91 de 25 	lds	r31, 0x25DE
     d28:	01 90       	ld	r0, Z+
     d2a:	f0 81       	ld	r31, Z
     d2c:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     d2e:	84 81       	ldd	r24, Z+4	; 0x04
     d30:	88 23       	and	r24, r24
     d32:	71 f0       	breq	.+28     	; 0xd50 <udc_reset+0x3a>
     d34:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     d36:	8c 2f       	mov	r24, r28
     d38:	ab df       	rcall	.-170    	; 0xc90 <udc_iface_disable>
     d3a:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     d3c:	e0 91 dd 25 	lds	r30, 0x25DD
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d40:	f0 91 de 25 	lds	r31, 0x25DE
     d44:	01 90       	ld	r0, Z+
     d46:	f0 81       	ld	r31, Z
     d48:	e0 2d       	mov	r30, r0
     d4a:	84 81       	ldd	r24, Z+4	; 0x04
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     d4c:	c8 17       	cp	r28, r24
     d4e:	98 f3       	brcs	.-26     	; 0xd36 <udc_reset+0x20>
     d50:	10 92 dc 25 	sts	0x25DC, r1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
     d54:	81 e0       	ldi	r24, 0x01	; 1
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	80 93 df 25 	sts	0x25DF, r24
     d5c:	90 93 e0 25 	sts	0x25E0, r25
     d60:	cf 91       	pop	r28
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
     d62:	08 95       	ret

00000d64 <udc_sof_notify>:
     d64:	cf 93       	push	r28

void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
     d66:	80 91 dc 25 	lds	r24, 0x25DC
     d6a:	88 23       	and	r24, r24
     d6c:	51 f1       	breq	.+84     	; 0xdc2 <udc_sof_notify+0x5e>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d6e:	e0 91 dd 25 	lds	r30, 0x25DD
     d72:	f0 91 de 25 	lds	r31, 0x25DE
     d76:	a0 81       	ld	r26, Z
     d78:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     d7a:	14 96       	adiw	r26, 0x04	; 4
     d7c:	8c 91       	ld	r24, X
     d7e:	14 97       	sbiw	r26, 0x04	; 4
     d80:	88 23       	and	r24, r24
     d82:	f9 f0       	breq	.+62     	; 0xdc2 <udc_sof_notify+0x5e>
     d84:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     d86:	8c 2f       	mov	r24, r28
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	02 80       	ldd	r0, Z+2	; 0x02
     d90:	f3 81       	ldd	r31, Z+3	; 0x03
     d92:	e0 2d       	mov	r30, r0
     d94:	e8 0f       	add	r30, r24
     d96:	f9 1f       	adc	r31, r25
     d98:	01 90       	ld	r0, Z+
     d9a:	f0 81       	ld	r31, Z
     d9c:	e0 2d       	mov	r30, r0
     d9e:	00 84       	ldd	r0, Z+8	; 0x08
     da0:	f1 85       	ldd	r31, Z+9	; 0x09
     da2:	e0 2d       	mov	r30, r0
     da4:	30 97       	sbiw	r30, 0x00	; 0
     da6:	09 f0       	breq	.+2      	; 0xdaa <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     da8:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     daa:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     dac:	e0 91 dd 25 	lds	r30, 0x25DD
     db0:	f0 91 de 25 	lds	r31, 0x25DE
     db4:	a0 81       	ld	r26, Z
     db6:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     db8:	14 96       	adiw	r26, 0x04	; 4
     dba:	8c 91       	ld	r24, X
     dbc:	14 97       	sbiw	r26, 0x04	; 4
     dbe:	c8 17       	cp	r28, r24
     dc0:	10 f3       	brcs	.-60     	; 0xd86 <udc_sof_notify+0x22>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     dcc:	10 92 86 27 	sts	0x2786, r1
     dd0:	10 92 87 27 	sts	0x2787, r1
	udd_g_ctrlreq.callback = NULL;
     dd4:	10 92 88 27 	sts	0x2788, r1
     dd8:	10 92 89 27 	sts	0x2789, r1
	udd_g_ctrlreq.over_under_run = NULL;
     ddc:	10 92 8a 27 	sts	0x278A, r1
     de0:	10 92 8b 27 	sts	0x278B, r1

	if (Udd_setup_is_in()) {
     de4:	80 91 7c 27 	lds	r24, 0x277C
     de8:	48 2f       	mov	r20, r24
     dea:	88 23       	and	r24, r24
     dec:	44 f4       	brge	.+16     	; 0xdfe <udc_process_setup+0x38>
		if (udd_g_ctrlreq.req.wLength == 0) {
     dee:	20 91 82 27 	lds	r18, 0x2782
     df2:	30 91 83 27 	lds	r19, 0x2783
     df6:	21 15       	cp	r18, r1
     df8:	31 05       	cpc	r19, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <udc_process_setup+0x38>
     dfc:	34 c2       	rjmp	.+1128   	; 0x1266 <udc_process_setup+0x4a0>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9c 01       	movw	r18, r24
     e02:	20 76       	andi	r18, 0x60	; 96
     e04:	30 70       	andi	r19, 0x00	; 0
     e06:	21 15       	cp	r18, r1
     e08:	31 05       	cpc	r19, r1
     e0a:	09 f0       	breq	.+2      	; 0xe0e <udc_process_setup+0x48>
     e0c:	fd c1       	rjmp	.+1018   	; 0x1208 <udc_process_setup+0x442>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
     e0e:	44 23       	and	r20, r20
     e10:	0c f0       	brlt	.+2      	; 0xe14 <udc_process_setup+0x4e>
     e12:	04 c1       	rjmp	.+520    	; 0x101c <udc_process_setup+0x256>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
     e14:	20 91 82 27 	lds	r18, 0x2782
     e18:	30 91 83 27 	lds	r19, 0x2783
     e1c:	21 15       	cp	r18, r1
     e1e:	31 05       	cpc	r19, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <udc_process_setup+0x5e>
     e22:	f2 c1       	rjmp	.+996    	; 0x1208 <udc_process_setup+0x442>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e24:	8f 71       	andi	r24, 0x1F	; 31
     e26:	90 70       	andi	r25, 0x00	; 0
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	09 f0       	breq	.+2      	; 0xe2e <udc_process_setup+0x68>
     e2c:	9d c0       	rjmp	.+314    	; 0xf68 <udc_process_setup+0x1a2>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e2e:	40 91 7d 27 	lds	r20, 0x277D
     e32:	46 30       	cpi	r20, 0x06	; 6
     e34:	91 f0       	breq	.+36     	; 0xe5a <udc_process_setup+0x94>
     e36:	48 30       	cpi	r20, 0x08	; 8
     e38:	09 f4       	brne	.+2      	; 0xe3c <udc_process_setup+0x76>
     e3a:	8a c0       	rjmp	.+276    	; 0xf50 <udc_process_setup+0x18a>
     e3c:	44 23       	and	r20, r20
     e3e:	09 f0       	breq	.+2      	; 0xe42 <udc_process_setup+0x7c>
     e40:	93 c0       	rjmp	.+294    	; 0xf68 <udc_process_setup+0x1a2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	39 f4       	brne	.+14     	; 0xe56 <udc_process_setup+0x90>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     e48:	8f ed       	ldi	r24, 0xDF	; 223
     e4a:	95 e2       	ldi	r25, 0x25	; 37
     e4c:	62 e0       	ldi	r22, 0x02	; 2
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	22 d6       	rcall	.+3140   	; 0x1a96 <udd_set_setup_payload>
     e52:	81 e0       	ldi	r24, 0x01	; 1
			sizeof(udc_device_status));
	return true;
     e54:	d7 c1       	rjmp	.+942    	; 0x1204 <udc_process_setup+0x43e>
     e56:	80 e0       	ldi	r24, 0x00	; 0
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     e58:	d5 c1       	rjmp	.+938    	; 0x1204 <udc_process_setup+0x43e>
     e5a:	80 91 7e 27 	lds	r24, 0x277E
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     e5e:	90 91 7f 27 	lds	r25, 0x277F
     e62:	92 30       	cpi	r25, 0x02	; 2

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     e64:	71 f0       	breq	.+28     	; 0xe82 <udc_process_setup+0xbc>
     e66:	93 30       	cpi	r25, 0x03	; 3
     e68:	61 f1       	breq	.+88     	; 0xec2 <udc_process_setup+0xfc>
     e6a:	91 30       	cpi	r25, 0x01	; 1
     e6c:	09 f0       	breq	.+2      	; 0xe70 <udc_process_setup+0xaa>
     e6e:	68 c0       	rjmp	.+208    	; 0xf40 <udc_process_setup+0x17a>
     e70:	80 91 14 20 	lds	r24, 0x2014
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     e74:	90 91 15 20 	lds	r25, 0x2015
     e78:	fc 01       	movw	r30, r24
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     e7a:	60 81       	ld	r22, Z
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	0b d6       	rcall	.+3094   	; 0x1a96 <udd_set_setup_payload>
     e80:	4e c0       	rjmp	.+156    	; 0xf1e <udc_process_setup+0x158>
     e82:	e0 91 14 20 	lds	r30, 0x2014
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     e86:	f0 91 15 20 	lds	r31, 0x2015
     e8a:	91 89       	ldd	r25, Z+17	; 0x11
     e8c:	89 17       	cp	r24, r25
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <udc_process_setup+0xcc>
     e90:	59 c0       	rjmp	.+178    	; 0xf44 <udc_process_setup+0x17e>
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	88 0f       	add	r24, r24
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     e96:	99 1f       	adc	r25, r25
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	e0 91 16 20 	lds	r30, 0x2016
     ea0:	f0 91 17 20 	lds	r31, 0x2017
     ea4:	e8 0f       	add	r30, r24
     ea6:	f9 1f       	adc	r31, r25
     ea8:	80 81       	ld	r24, Z
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	fc 01       	movw	r30, r24
     eae:	62 81       	ldd	r22, Z+2	; 0x02
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     eb0:	73 81       	ldd	r23, Z+3	; 0x03
     eb2:	f1 d5       	rcall	.+3042   	; 0x1a96 <udd_set_setup_payload>
     eb4:	e0 91 84 27 	lds	r30, 0x2784
     eb8:	f0 91 85 27 	lds	r31, 0x2785
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	81 83       	std	Z+1, r24	; 0x01
     ec0:	2e c0       	rjmp	.+92     	; 0xf1e <udc_process_setup+0x158>
     ec2:	90 70       	andi	r25, 0x00	; 0
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	91 05       	cpc	r25, r1
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     ec8:	69 f0       	breq	.+26     	; 0xee4 <udc_process_setup+0x11e>
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	91 05       	cpc	r25, r1
     ece:	20 f0       	brcs	.+8      	; 0xed8 <udc_process_setup+0x112>
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	91 05       	cpc	r25, r1
     ed4:	c9 f5       	brne	.+114    	; 0xf48 <udc_process_setup+0x182>
     ed6:	0a c0       	rjmp	.+20     	; 0xeec <udc_process_setup+0x126>
     ed8:	85 e7       	ldi	r24, 0x75	; 117
     eda:	90 e2       	ldi	r25, 0x20	; 32
     edc:	64 e0       	ldi	r22, 0x04	; 4
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	da d5       	rcall	.+2996   	; 0x1a96 <udd_set_setup_payload>
     ee2:	1d c0       	rjmp	.+58     	; 0xf1e <udc_process_setup+0x158>
     ee4:	89 e7       	ldi	r24, 0x79	; 121
     ee6:	90 e2       	ldi	r25, 0x20	; 32
     ee8:	2d e0       	ldi	r18, 0x0D	; 13
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <udc_process_setup+0x12c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     eec:	87 e8       	ldi	r24, 0x87	; 135
     eee:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     ef0:	2e e0       	ldi	r18, 0x0E	; 14
     ef2:	38 2f       	mov	r19, r24
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     ef4:	e8 e9       	ldi	r30, 0x98	; 152
     ef6:	f0 e2       	ldi	r31, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     ef8:	a8 2f       	mov	r26, r24
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     efa:	b9 2f       	mov	r27, r25
     efc:	8d 91       	ld	r24, X+
     efe:	80 83       	st	Z, r24
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     f00:	11 82       	std	Z+1, r1	; 0x01
     f02:	32 96       	adiw	r30, 0x02	; 2
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     f04:	8a 2f       	mov	r24, r26
     f06:	83 1b       	sub	r24, r19
     f08:	82 17       	cp	r24, r18
     f0a:	c0 f3       	brcs	.-16     	; 0xefc <udc_process_setup+0x136>
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     f0c:	22 0f       	add	r18, r18
     f0e:	62 2f       	mov	r22, r18
     f10:	6e 5f       	subi	r22, 0xFE	; 254
     f12:	60 93 96 20 	sts	0x2096, r22
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     f16:	86 e9       	ldi	r24, 0x96	; 150
     f18:	90 e2       	ldi	r25, 0x20	; 32
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	bc d5       	rcall	.+2936   	; 0x1a96 <udd_set_setup_payload>
		udd_set_setup_payload(
     f1e:	80 91 82 27 	lds	r24, 0x2782
     f22:	90 91 83 27 	lds	r25, 0x2783
     f26:	20 91 86 27 	lds	r18, 0x2786
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     f2a:	30 91 87 27 	lds	r19, 0x2787
     f2e:	82 17       	cp	r24, r18
     f30:	93 07       	cpc	r25, r19
     f32:	60 f4       	brcc	.+24     	; 0xf4c <udc_process_setup+0x186>
     f34:	80 93 86 27 	sts	0x2786, r24
     f38:	90 93 87 27 	sts	0x2787, r25
     f3c:	81 e0       	ldi	r24, 0x01	; 1
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     f3e:	62 c1       	rjmp	.+708    	; 0x1204 <udc_process_setup+0x43e>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	60 c1       	rjmp	.+704    	; 0x1204 <udc_process_setup+0x43e>
     f44:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
     f46:	5e c1       	rjmp	.+700    	; 0x1204 <udc_process_setup+0x43e>
     f48:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     f4a:	5c c1       	rjmp	.+696    	; 0x1204 <udc_process_setup+0x43e>
     f4c:	81 e0       	ldi	r24, 0x01	; 1
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     f4e:	5a c1       	rjmp	.+692    	; 0x1204 <udc_process_setup+0x43e>
     f50:	21 30       	cpi	r18, 0x01	; 1
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     f52:	31 05       	cpc	r19, r1
     f54:	39 f4       	brne	.+14     	; 0xf64 <udc_process_setup+0x19e>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     f56:	8c ed       	ldi	r24, 0xDC	; 220
     f58:	95 e2       	ldi	r25, 0x25	; 37
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	9b d5       	rcall	.+2870   	; 0x1a96 <udd_set_setup_payload>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	50 c1       	rjmp	.+672    	; 0x1204 <udc_process_setup+0x43e>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	4e c1       	rjmp	.+668    	; 0x1204 <udc_process_setup+0x43e>
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
	return true;
     f6c:	d9 f5       	brne	.+118    	; 0xfe4 <udc_process_setup+0x21e>
     f6e:	40 91 7d 27 	lds	r20, 0x277D
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     f72:	4a 30       	cpi	r20, 0x0A	; 10
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f74:	b9 f5       	brne	.+110    	; 0xfe4 <udc_process_setup+0x21e>
     f76:	21 30       	cpi	r18, 0x01	; 1
     f78:	31 05       	cpc	r19, r1
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f7a:	61 f5       	brne	.+88     	; 0xfd4 <udc_process_setup+0x20e>
     f7c:	80 91 dc 25 	lds	r24, 0x25DC
     f80:	88 23       	and	r24, r24
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     f82:	51 f1       	breq	.+84     	; 0xfd8 <udc_process_setup+0x212>
     f84:	10 91 80 27 	lds	r17, 0x2780
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f88:	c0 91 dd 25 	lds	r28, 0x25DD
     f8c:	d0 91 de 25 	lds	r29, 0x25DE
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f90:	e8 81       	ld	r30, Y
     f92:	f9 81       	ldd	r31, Y+1	; 0x01
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f94:	84 81       	ldd	r24, Z+4	; 0x04
     f96:	18 17       	cp	r17, r24
     f98:	08 f5       	brcc	.+66     	; 0xfdc <udc_process_setup+0x216>
     f9a:	81 2f       	mov	r24, r17
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	f9 dd       	rcall	.-1038   	; 0xb92 <udc_update_iface_desc>
     fa0:	88 23       	and	r24, r24
     fa2:	f1 f0       	breq	.+60     	; 0xfe0 <udc_process_setup+0x21a>
     fa4:	81 2f       	mov	r24, r17
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	ea 81       	ldd	r30, Y+2	; 0x02
     fae:	fb 81       	ldd	r31, Y+3	; 0x03
     fb0:	e8 0f       	add	r30, r24
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     fb2:	f9 1f       	adc	r31, r25
     fb4:	01 90       	ld	r0, Z+
     fb6:	f0 81       	ld	r31, Z
     fb8:	e0 2d       	mov	r30, r0
     fba:	86 81       	ldd	r24, Z+6	; 0x06
     fbc:	97 81       	ldd	r25, Z+7	; 0x07
     fbe:	fc 01       	movw	r30, r24
     fc0:	09 95       	icall
	udc_iface_setting = udi_api->getsetting();
     fc2:	80 93 e1 25 	sts	0x25E1, r24
     fc6:	81 ee       	ldi	r24, 0xE1	; 225
     fc8:	95 e2       	ldi	r25, 0x25	; 37
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	63 d5       	rcall	.+2758   	; 0x1a96 <udd_set_setup_payload>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	18 c1       	rjmp	.+560    	; 0x1204 <udc_process_setup+0x43e>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	16 c1       	rjmp	.+556    	; 0x1204 <udc_process_setup+0x43e>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	14 c1       	rjmp	.+552    	; 0x1204 <udc_process_setup+0x43e>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	12 c1       	rjmp	.+548    	; 0x1204 <udc_process_setup+0x43e>
	return true;
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	10 c1       	rjmp	.+544    	; 0x1204 <udc_process_setup+0x43e>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	91 05       	cpc	r25, r1
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     fe8:	09 f0       	breq	.+2      	; 0xfec <udc_process_setup+0x226>
     fea:	0e c1       	rjmp	.+540    	; 0x1208 <udc_process_setup+0x442>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     fec:	80 91 7d 27 	lds	r24, 0x277D
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
     ff0:	88 23       	and	r24, r24
     ff2:	09 f0       	breq	.+2      	; 0xff6 <udc_process_setup+0x230>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     ff4:	02 c1       	rjmp	.+516    	; 0x11fa <udc_process_setup+0x434>
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	71 f4       	brne	.+28     	; 0x1018 <udc_process_setup+0x252>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ffc:	80 91 80 27 	lds	r24, 0x2780
    1000:	7f d5       	rcall	.+2814   	; 0x1b00 <udd_ep_is_halted>
    1002:	80 93 e2 25 	sts	0x25E2, r24
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1006:	10 92 e3 25 	sts	0x25E3, r1
    100a:	82 ee       	ldi	r24, 0xE2	; 226
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    100c:	95 e2       	ldi	r25, 0x25	; 37
    100e:	62 e0       	ldi	r22, 0x02	; 2
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	41 d5       	rcall	.+2690   	; 0x1a96 <udd_set_setup_payload>
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	f6 c0       	rjmp	.+492    	; 0x1204 <udc_process_setup+0x43e>
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	f4 c0       	rjmp	.+488    	; 0x1204 <udc_process_setup+0x43e>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    101c:	8f 71       	andi	r24, 0x1F	; 31
    101e:	90 70       	andi	r25, 0x00	; 0
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	09 f0       	breq	.+2      	; 0x1026 <udc_process_setup+0x260>
    1024:	92 c0       	rjmp	.+292    	; 0x114a <udc_process_setup+0x384>
    1026:	20 91 7d 27 	lds	r18, 0x277D
			sizeof(udc_ep_status));
	return true;
    102a:	23 30       	cpi	r18, 0x03	; 3
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    102c:	09 f4       	brne	.+2      	; 0x1030 <udc_process_setup+0x26a>
    102e:	e7 c0       	rjmp	.+462    	; 0x11fe <udc_process_setup+0x438>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1030:	24 30       	cpi	r18, 0x04	; 4
    1032:	20 f4       	brcc	.+8      	; 0x103c <udc_process_setup+0x276>
    1034:	21 30       	cpi	r18, 0x01	; 1
    1036:	09 f0       	breq	.+2      	; 0x103a <udc_process_setup+0x274>
    1038:	88 c0       	rjmp	.+272    	; 0x114a <udc_process_setup+0x384>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    103a:	16 c0       	rjmp	.+44     	; 0x1068 <udc_process_setup+0x2a2>
    103c:	25 30       	cpi	r18, 0x05	; 5
    103e:	21 f0       	breq	.+8      	; 0x1048 <udc_process_setup+0x282>
    1040:	29 30       	cpi	r18, 0x09	; 9
    1042:	09 f0       	breq	.+2      	; 0x1046 <udc_process_setup+0x280>
    1044:	82 c0       	rjmp	.+260    	; 0x114a <udc_process_setup+0x384>
    1046:	2c c0       	rjmp	.+88     	; 0x10a0 <udc_process_setup+0x2da>
    1048:	80 91 82 27 	lds	r24, 0x2782
    104c:	90 91 83 27 	lds	r25, 0x2783
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	41 f4       	brne	.+16     	; 0x1064 <udc_process_setup+0x29e>
    1054:	8e e0       	ldi	r24, 0x0E	; 14
    1056:	96 e0       	ldi	r25, 0x06	; 6
    1058:	80 93 88 27 	sts	0x2788, r24
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    105c:	90 93 89 27 	sts	0x2789, r25
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	d0 c0       	rjmp	.+416    	; 0x1204 <udc_process_setup+0x43e>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	ce c0       	rjmp	.+412    	; 0x1204 <udc_process_setup+0x43e>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1068:	80 91 82 27 	lds	r24, 0x2782
    106c:	90 91 83 27 	lds	r25, 0x2783
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	91 f4       	brne	.+36     	; 0x1098 <udc_process_setup+0x2d2>
	return true;
    1074:	80 91 7e 27 	lds	r24, 0x277E
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1078:	90 91 7f 27 	lds	r25, 0x277F
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	91 05       	cpc	r25, r1
    1080:	69 f4       	brne	.+26     	; 0x109c <udc_process_setup+0x2d6>
    1082:	80 91 df 25 	lds	r24, 0x25DF
    1086:	90 91 e0 25 	lds	r25, 0x25E0
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    108a:	8d 7f       	andi	r24, 0xFD	; 253
    108c:	80 93 df 25 	sts	0x25DF, r24
    1090:	90 93 e0 25 	sts	0x25E0, r25
    1094:	81 e0       	ldi	r24, 0x01	; 1
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
    1096:	b6 c0       	rjmp	.+364    	; 0x1204 <udc_process_setup+0x43e>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	b4 c0       	rjmp	.+360    	; 0x1204 <udc_process_setup+0x43e>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	b2 c0       	rjmp	.+356    	; 0x1204 <udc_process_setup+0x43e>
    10a0:	80 91 82 27 	lds	r24, 0x2782
    10a4:	90 91 83 27 	lds	r25, 0x2783
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	09 f0       	breq	.+2      	; 0x10ae <udc_process_setup+0x2e8>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    10ac:	42 c0       	rjmp	.+132    	; 0x1132 <udc_process_setup+0x36c>
    10ae:	e8 d4       	rcall	.+2512   	; 0x1a80 <udd_getaddress>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    10b0:	88 23       	and	r24, r24
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <udc_process_setup+0x2f0>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    10b4:	40 c0       	rjmp	.+128    	; 0x1136 <udc_process_setup+0x370>
    10b6:	20 91 7e 27 	lds	r18, 0x277E
    10ba:	30 91 7f 27 	lds	r19, 0x277F
    10be:	30 70       	andi	r19, 0x00	; 0
    10c0:	e0 91 14 20 	lds	r30, 0x2014
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    10c4:	f0 91 15 20 	lds	r31, 0x2015
    10c8:	81 89       	ldd	r24, Z+17	; 0x11
    10ca:	90 e0       	ldi	r25, 0x00	; 0
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    10cc:	82 17       	cp	r24, r18
    10ce:	93 07       	cpc	r25, r19
    10d0:	a0 f1       	brcs	.+104    	; 0x113a <udc_process_setup+0x374>
    10d2:	21 de       	rcall	.-958    	; 0xd16 <udc_reset>
    10d4:	80 91 7e 27 	lds	r24, 0x277E
				udc_config.confdev_lsfs->bNumConfigurations) {
    10d8:	80 93 dc 25 	sts	0x25DC, r24
    10dc:	88 23       	and	r24, r24
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    10de:	79 f1       	breq	.+94     	; 0x113e <udc_process_setup+0x378>
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    10ec:	e0 91 16 20 	lds	r30, 0x2016
    10f0:	f0 91 17 20 	lds	r31, 0x2017
	if (udc_num_configuration == 0) {
    10f4:	e8 0f       	add	r30, r24
    10f6:	f9 1f       	adc	r31, r25
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    10f8:	e0 93 dd 25 	sts	0x25DD, r30
    10fc:	f0 93 de 25 	sts	0x25DE, r31
    1100:	01 90       	ld	r0, Z+
    1102:	f0 81       	ld	r31, Z
    1104:	e0 2d       	mov	r30, r0
    1106:	84 81       	ldd	r24, Z+4	; 0x04
    1108:	88 23       	and	r24, r24
    110a:	d9 f0       	breq	.+54     	; 0x1142 <udc_process_setup+0x37c>
    110c:	c0 e0       	ldi	r28, 0x00	; 0
    110e:	8c 2f       	mov	r24, r28
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	88 dd       	rcall	.-1264   	; 0xc24 <udc_iface_enable>
    1114:	88 23       	and	r24, r24
    1116:	b9 f0       	breq	.+46     	; 0x1146 <udc_process_setup+0x380>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1118:	cf 5f       	subi	r28, 0xFF	; 255
    111a:	e0 91 dd 25 	lds	r30, 0x25DD
    111e:	f0 91 de 25 	lds	r31, 0x25DE
    1122:	01 90       	ld	r0, Z+
    1124:	f0 81       	ld	r31, Z
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1126:	e0 2d       	mov	r30, r0
    1128:	84 81       	ldd	r24, Z+4	; 0x04
    112a:	c8 17       	cp	r28, r24
    112c:	80 f3       	brcs	.-32     	; 0x110e <udc_process_setup+0x348>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	69 c0       	rjmp	.+210    	; 0x1204 <udc_process_setup+0x43e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1132:	80 e0       	ldi	r24, 0x00	; 0
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1134:	67 c0       	rjmp	.+206    	; 0x1204 <udc_process_setup+0x43e>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	65 c0       	rjmp	.+202    	; 0x1204 <udc_process_setup+0x43e>
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	63 c0       	rjmp	.+198    	; 0x1204 <udc_process_setup+0x43e>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	61 c0       	rjmp	.+194    	; 0x1204 <udc_process_setup+0x43e>
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	5f c0       	rjmp	.+190    	; 0x1204 <udc_process_setup+0x43e>
    1146:	80 e0       	ldi	r24, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    1148:	5d c0       	rjmp	.+186    	; 0x1204 <udc_process_setup+0x43e>
    114a:	81 30       	cpi	r24, 0x01	; 1
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    114c:	91 05       	cpc	r25, r1
    114e:	01 f5       	brne	.+64     	; 0x1190 <udc_process_setup+0x3ca>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    1150:	20 91 7d 27 	lds	r18, 0x277D
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    1154:	2b 30       	cpi	r18, 0x0B	; 11
    1156:	e1 f4       	brne	.+56     	; 0x1190 <udc_process_setup+0x3ca>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    1158:	80 91 82 27 	lds	r24, 0x2782
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    115c:	90 91 83 27 	lds	r25, 0x2783
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	81 f4       	brne	.+32     	; 0x1184 <udc_process_setup+0x3be>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1164:	80 91 dc 25 	lds	r24, 0x25DC
    1168:	88 23       	and	r24, r24
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    116a:	71 f0       	breq	.+28     	; 0x1188 <udc_process_setup+0x3c2>
    116c:	c0 91 80 27 	lds	r28, 0x2780
    1170:	10 91 7e 27 	lds	r17, 0x277E
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1174:	8c 2f       	mov	r24, r28
    1176:	8c dd       	rcall	.-1256   	; 0xc90 <udc_iface_disable>
    1178:	88 23       	and	r24, r24
    117a:	41 f0       	breq	.+16     	; 0x118c <udc_process_setup+0x3c6>
    117c:	8c 2f       	mov	r24, r28
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    117e:	61 2f       	mov	r22, r17
    1180:	51 dd       	rcall	.-1374   	; 0xc24 <udc_iface_enable>
    1182:	40 c0       	rjmp	.+128    	; 0x1204 <udc_process_setup+0x43e>
    1184:	80 e0       	ldi	r24, 0x00	; 0
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1186:	3e c0       	rjmp	.+124    	; 0x1204 <udc_process_setup+0x43e>
    1188:	80 e0       	ldi	r24, 0x00	; 0
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    118a:	3c c0       	rjmp	.+120    	; 0x1204 <udc_process_setup+0x43e>
    118c:	80 e0       	ldi	r24, 0x00	; 0

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    118e:	3a c0       	rjmp	.+116    	; 0x1204 <udc_process_setup+0x43e>
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	91 05       	cpc	r25, r1
    1194:	c9 f5       	brne	.+114    	; 0x1208 <udc_process_setup+0x442>
    1196:	80 91 7d 27 	lds	r24, 0x277D
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	19 f0       	breq	.+6      	; 0x11a4 <udc_process_setup+0x3de>
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	81 f5       	brne	.+96     	; 0x1202 <udc_process_setup+0x43c>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    11a2:	14 c0       	rjmp	.+40     	; 0x11cc <udc_process_setup+0x406>
    11a4:	80 91 82 27 	lds	r24, 0x2782
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    11a8:	90 91 83 27 	lds	r25, 0x2783
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
    11ac:	00 97       	sbiw	r24, 0x00	; 0
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    11ae:	51 f4       	brne	.+20     	; 0x11c4 <udc_process_setup+0x3fe>
    11b0:	80 91 7e 27 	lds	r24, 0x277E
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    11b4:	90 91 7f 27 	lds	r25, 0x277F
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	31 f4       	brne	.+12     	; 0x11c8 <udc_process_setup+0x402>
    11bc:	80 91 80 27 	lds	r24, 0x2780
    11c0:	a6 d4       	rcall	.+2380   	; 0x1b0e <udd_ep_clear_halt>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    11c2:	20 c0       	rjmp	.+64     	; 0x1204 <udc_process_setup+0x43e>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	1e c0       	rjmp	.+60     	; 0x1204 <udc_process_setup+0x43e>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	1c c0       	rjmp	.+56     	; 0x1204 <udc_process_setup+0x43e>
    11cc:	80 91 82 27 	lds	r24, 0x2782
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    11d0:	90 91 83 27 	lds	r25, 0x2783
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	69 f4       	brne	.+26     	; 0x11f2 <udc_process_setup+0x42c>
    11d8:	80 91 7e 27 	lds	r24, 0x277E
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    11dc:	90 91 7f 27 	lds	r25, 0x277F
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	49 f4       	brne	.+18     	; 0x11f6 <udc_process_setup+0x430>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    11e4:	80 91 80 27 	lds	r24, 0x2780
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    11e8:	27 d5       	rcall	.+2638   	; 0x1c38 <udd_ep_abort>
    11ea:	80 91 80 27 	lds	r24, 0x2780
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    11ee:	50 d5       	rcall	.+2720   	; 0x1c90 <udd_ep_set_halt>
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <udc_process_setup+0x43e>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <udc_process_setup+0x43e>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <udc_process_setup+0x43e>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <udc_process_setup+0x43e>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <udc_process_setup+0x43e>
    1202:	80 e0       	ldi	r24, 0x00	; 0
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1204:	88 23       	and	r24, r24
    1206:	89 f5       	brne	.+98     	; 0x126a <udc_process_setup+0x4a4>
    1208:	80 91 7c 27 	lds	r24, 0x277C
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    120c:	8f 71       	andi	r24, 0x1F	; 31
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	71 f5       	brne	.+92     	; 0x126e <udc_process_setup+0x4a8>
    1212:	80 91 dc 25 	lds	r24, 0x25DC
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1216:	88 23       	and	r24, r24
    1218:	61 f1       	breq	.+88     	; 0x1272 <udc_process_setup+0x4ac>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    121a:	10 91 80 27 	lds	r17, 0x2780
				break;
			}
		}
#endif
	}
	return false;
    121e:	c0 91 dd 25 	lds	r28, 0x25DD
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1222:	d0 91 de 25 	lds	r29, 0x25DE
				break;
			}
		}
#endif
	}
	return false;
    1226:	e8 81       	ld	r30, Y
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1228:	f9 81       	ldd	r31, Y+1	; 0x01
    122a:	84 81       	ldd	r24, Z+4	; 0x04
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    122c:	18 17       	cp	r17, r24
    122e:	18 f5       	brcc	.+70     	; 0x1276 <udc_process_setup+0x4b0>
    1230:	81 2f       	mov	r24, r17
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	ae dc       	rcall	.-1700   	; 0xb92 <udc_update_iface_desc>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1236:	88 23       	and	r24, r24
    1238:	01 f1       	breq	.+64     	; 0x127a <udc_process_setup+0x4b4>
    123a:	81 2f       	mov	r24, r17
    123c:	90 e0       	ldi	r25, 0x00	; 0
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1242:	ea 81       	ldd	r30, Y+2	; 0x02
    1244:	fb 81       	ldd	r31, Y+3	; 0x03
    1246:	e8 0f       	add	r30, r24
    1248:	f9 1f       	adc	r31, r25
    124a:	c0 81       	ld	r28, Z
    124c:	d1 81       	ldd	r29, Z+1	; 0x01
    124e:	ee 81       	ldd	r30, Y+6	; 0x06
    1250:	ff 81       	ldd	r31, Y+7	; 0x07
    1252:	09 95       	icall
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1254:	68 2f       	mov	r22, r24
    1256:	81 2f       	mov	r24, r17
    1258:	9c dc       	rcall	.-1736   	; 0xb92 <udc_update_iface_desc>
    125a:	88 23       	and	r24, r24
    125c:	81 f0       	breq	.+32     	; 0x127e <udc_process_setup+0x4b8>
    125e:	ec 81       	ldd	r30, Y+4	; 0x04
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1260:	fd 81       	ldd	r31, Y+5	; 0x05
    1262:	09 95       	icall
    1264:	0d c0       	rjmp	.+26     	; 0x1280 <udc_process_setup+0x4ba>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	0b c0       	rjmp	.+22     	; 0x1280 <udc_process_setup+0x4ba>
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <udc_process_setup+0x4ba>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <udc_process_setup+0x4ba>
    1272:	80 e0       	ldi	r24, 0x00	; 0
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <udc_process_setup+0x4ba>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <udc_process_setup+0x4ba>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <udc_process_setup+0x4ba>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1286:	08 95       	ret

00001288 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	96 e0       	ldi	r25, 0x06	; 6
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	52 e0       	ldi	r21, 0x02	; 2
    1292:	8e d8       	rcall	.-3812   	; 0x3b0 <ioport_configure_port_pin>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	96 e0       	ldi	r25, 0x06	; 6
    1298:	62 e0       	ldi	r22, 0x02	; 2
    129a:	41 e0       	ldi	r20, 0x01	; 1
    129c:	52 e0       	ldi	r21, 0x02	; 2
    129e:	88 d8       	rcall	.-3824   	; 0x3b0 <ioport_configure_port_pin>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	96 e0       	ldi	r25, 0x06	; 6
    12a4:	64 e0       	ldi	r22, 0x04	; 4
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	52 e0       	ldi	r21, 0x02	; 2
    12aa:	82 d8       	rcall	.-3836   	; 0x3b0 <ioport_configure_port_pin>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	96 e0       	ldi	r25, 0x06	; 6
    12b0:	68 e0       	ldi	r22, 0x08	; 8
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	52 e0       	ldi	r21, 0x02	; 2
    12b6:	7c d8       	rcall	.-3848   	; 0x3b0 <ioport_configure_port_pin>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	96 e0       	ldi	r25, 0x06	; 6
    12bc:	60 e1       	ldi	r22, 0x10	; 16
    12be:	41 e0       	ldi	r20, 0x01	; 1
    12c0:	52 e0       	ldi	r21, 0x02	; 2
    12c2:	76 d8       	rcall	.-3860   	; 0x3b0 <ioport_configure_port_pin>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	96 e0       	ldi	r25, 0x06	; 6
    12c8:	60 e2       	ldi	r22, 0x20	; 32
    12ca:	41 e0       	ldi	r20, 0x01	; 1
    12cc:	52 e0       	ldi	r21, 0x02	; 2
    12ce:	70 d8       	rcall	.-3872   	; 0x3b0 <ioport_configure_port_pin>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	96 e0       	ldi	r25, 0x06	; 6
    12d4:	60 e4       	ldi	r22, 0x40	; 64
    12d6:	41 e0       	ldi	r20, 0x01	; 1
    12d8:	52 e0       	ldi	r21, 0x02	; 2
    12da:	6a d8       	rcall	.-3884   	; 0x3b0 <ioport_configure_port_pin>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	96 e0       	ldi	r25, 0x06	; 6
    12e0:	60 e8       	ldi	r22, 0x80	; 128
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	52 e0       	ldi	r21, 0x02	; 2
    12e6:	64 d8       	rcall	.-3896   	; 0x3b0 <ioport_configure_port_pin>
    12e8:	80 e2       	ldi	r24, 0x20	; 32
    12ea:	96 e0       	ldi	r25, 0x06	; 6
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	48 e1       	ldi	r20, 0x18	; 24
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	5e d8       	rcall	.-3908   	; 0x3b0 <ioport_configure_port_pin>
    12f4:	80 e2       	ldi	r24, 0x20	; 32
    12f6:	96 e0       	ldi	r25, 0x06	; 6
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	48 e1       	ldi	r20, 0x18	; 24
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	58 d8       	rcall	.-3920   	; 0x3b0 <ioport_configure_port_pin>
    1300:	80 e2       	ldi	r24, 0x20	; 32
    1302:	96 e0       	ldi	r25, 0x06	; 6
    1304:	64 e0       	ldi	r22, 0x04	; 4
    1306:	48 e1       	ldi	r20, 0x18	; 24
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	52 d8       	rcall	.-3932   	; 0x3b0 <ioport_configure_port_pin>
    130c:	80 e2       	ldi	r24, 0x20	; 32
    130e:	96 e0       	ldi	r25, 0x06	; 6
    1310:	68 e0       	ldi	r22, 0x08	; 8
    1312:	48 e1       	ldi	r20, 0x18	; 24
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	4c c8       	rjmp	.-3944   	; 0x3b0 <ioport_configure_port_pin>

00001318 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1318:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    131a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    131c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    131e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1320:	60 83       	st	Z, r22
	ret                             // Return to caller
    1322:	08 95       	ret

00001324 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1324:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1328:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    132a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    132c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1330:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1332:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1336:	08 95       	ret

00001338 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
    1338:	88 23       	and	r24, r24
    133a:	69 f4       	brne	.+26     	; 0x1356 <udd_sleep_mode+0x1e>
    133c:	90 91 6e 26 	lds	r25, 0x266E
    1340:	99 23       	and	r25, r25
    1342:	a9 f0       	breq	.+42     	; 0x136e <udd_sleep_mode+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1344:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1346:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1348:	20 91 77 27 	lds	r18, 0x2777
    134c:	21 50       	subi	r18, 0x01	; 1
    134e:	20 93 77 27 	sts	0x2777, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1352:	9f bf       	out	0x3f, r25	; 63
    1354:	0c c0       	rjmp	.+24     	; 0x136e <udd_sleep_mode+0x36>
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
    1356:	90 91 6e 26 	lds	r25, 0x266E
    135a:	99 23       	and	r25, r25
    135c:	41 f4       	brne	.+16     	; 0x136e <udd_sleep_mode+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    135e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1360:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1362:	20 91 77 27 	lds	r18, 0x2777
    1366:	2f 5f       	subi	r18, 0xFF	; 255
    1368:	20 93 77 27 	sts	0x2777, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    136c:	9f bf       	out	0x3f, r25	; 63
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
    136e:	80 93 6e 26 	sts	0x266E, r24
}
    1372:	08 95       	ret

00001374 <udd_ep_get_ctrl>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1374:	48 2f       	mov	r20, r24
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	4f 70       	andi	r20, 0x0F	; 15
    137a:	50 70       	andi	r21, 0x00	; 0
    137c:	44 0f       	add	r20, r20
    137e:	55 1f       	adc	r21, r21
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1380:	28 2f       	mov	r18, r24
    1382:	33 27       	eor	r19, r19
    1384:	27 fd       	sbrc	r18, 7
    1386:	30 95       	com	r19
    1388:	22 27       	eor	r18, r18
    138a:	33 0f       	add	r19, r19
    138c:	22 1f       	adc	r18, r18
    138e:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1390:	ca 01       	movw	r24, r20
    1392:	82 0f       	add	r24, r18
    1394:	93 1f       	adc	r25, r19
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	8c 50       	subi	r24, 0x0C	; 12
    13a4:	9a 4d       	sbci	r25, 0xDA	; 218
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
}
    13a6:	08 95       	ret

000013a8 <udd_ep_init>:
//--------------------------------------------------------
//--- INTERNAL ROUTINES TO INITIALIZE ENDPOINT

static void udd_ep_init(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
	USB_EP_BUFSIZE_t size;
	UDD_EP_t *ep_ctrl;

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribut to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	63 70       	andi	r22, 0x03	; 3
    13b0:	70 70       	andi	r23, 0x00	; 0
    13b2:	61 30       	cpi	r22, 0x01	; 1
    13b4:	71 05       	cpc	r23, r1
    13b6:	39 f0       	breq	.+14     	; 0x13c6 <udd_ep_init+0x1e>
    13b8:	62 30       	cpi	r22, 0x02	; 2
    13ba:	71 05       	cpc	r23, r1
    13bc:	34 f4       	brge	.+12     	; 0x13ca <udd_ep_init+0x22>
    13be:	61 15       	cp	r22, r1
    13c0:	71 05       	cpc	r23, r1
    13c2:	29 f0       	breq	.+10     	; 0x13ce <udd_ep_init+0x26>
    13c4:	05 c0       	rjmp	.+10     	; 0x13d0 <udd_ep_init+0x28>
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
		break;
	case USB_EP_TYPE_ISOCHRONOUS:
		type = USB_EP_TYPE_ISOCHRONOUS_gc;
    13c6:	c0 ec       	ldi	r28, 0xC0	; 192
		break;
    13c8:	03 c0       	rjmp	.+6      	; 0x13d0 <udd_ep_init+0x28>
	case USB_EP_TYPE_BULK:
	case USB_EP_TYPE_INTERRUPT: //interrupt behaves as bulk
		type = USB_EP_TYPE_BULK_gc;
    13ca:	c0 e8       	ldi	r28, 0x80	; 128
		break;
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <udd_ep_init+0x28>

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribut to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
    13ce:	c0 e4       	ldi	r28, 0x40	; 64
#else
	type = USB_EP_TYPE_CONTROL_gc;
#endif

	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
    13d0:	40 38       	cpi	r20, 0x80	; 128
    13d2:	51 05       	cpc	r21, r1
    13d4:	f9 f0       	breq	.+62     	; 0x1414 <udd_ep_init+0x6c>
    13d6:	41 38       	cpi	r20, 0x81	; 129
    13d8:	51 05       	cpc	r21, r1
    13da:	50 f4       	brcc	.+20     	; 0x13f0 <udd_ep_init+0x48>
    13dc:	40 32       	cpi	r20, 0x20	; 32
    13de:	51 05       	cpc	r21, r1
    13e0:	a9 f0       	breq	.+42     	; 0x140c <udd_ep_init+0x64>
    13e2:	40 34       	cpi	r20, 0x40	; 64
    13e4:	51 05       	cpc	r21, r1
    13e6:	a1 f0       	breq	.+40     	; 0x1410 <udd_ep_init+0x68>
    13e8:	40 31       	cpi	r20, 0x10	; 16
    13ea:	51 05       	cpc	r21, r1
    13ec:	69 f4       	brne	.+26     	; 0x1408 <udd_ep_init+0x60>
    13ee:	1a c0       	rjmp	.+52     	; 0x1424 <udd_ep_init+0x7c>
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	40 30       	cpi	r20, 0x00	; 0
    13f4:	59 07       	cpc	r21, r25
    13f6:	91 f0       	breq	.+36     	; 0x141c <udd_ep_init+0x74>
    13f8:	93 e0       	ldi	r25, 0x03	; 3
    13fa:	4f 3f       	cpi	r20, 0xFF	; 255
    13fc:	59 07       	cpc	r21, r25
    13fe:	81 f0       	breq	.+32     	; 0x1420 <udd_ep_init+0x78>
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	40 30       	cpi	r20, 0x00	; 0
    1404:	59 07       	cpc	r21, r25
    1406:	41 f0       	breq	.+16     	; 0x1418 <udd_ep_init+0x70>
	default:
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
    1408:	d0 e0       	ldi	r29, 0x00	; 0
    140a:	0d c0       	rjmp	.+26     	; 0x1426 <udd_ep_init+0x7e>
		break;
	case 16:
		size = USB_EP_BUFSIZE_16_gc;
		break;
	case 32:
		size = USB_EP_BUFSIZE_32_gc;
    140c:	d2 e0       	ldi	r29, 0x02	; 2
		break;
    140e:	0b c0       	rjmp	.+22     	; 0x1426 <udd_ep_init+0x7e>
	case 64:
		size = USB_EP_BUFSIZE_64_gc;
    1410:	d3 e0       	ldi	r29, 0x03	; 3
		break;
    1412:	09 c0       	rjmp	.+18     	; 0x1426 <udd_ep_init+0x7e>
#if (0!=USB_DEVICE_MAX_EP)
	case 128:
		size = USB_EP_BUFSIZE_128_gc;
    1414:	d4 e0       	ldi	r29, 0x04	; 4
		break;
    1416:	07 c0       	rjmp	.+14     	; 0x1426 <udd_ep_init+0x7e>
	case 256:
		size = USB_EP_BUFSIZE_256_gc;
    1418:	d5 e0       	ldi	r29, 0x05	; 5
		break;
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <udd_ep_init+0x7e>
	case 512:
		size = USB_EP_BUFSIZE_512_gc;
    141c:	d6 e0       	ldi	r29, 0x06	; 6
		break;
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <udd_ep_init+0x7e>
	case 1023:
		size =USB_EP_BUFSIZE_1023_gc;
    1420:	d7 e0       	ldi	r29, 0x07	; 7
		break;
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <udd_ep_init+0x7e>
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
		break;
	case 16:
		size = USB_EP_BUFSIZE_16_gc;
    1424:	d1 e0       	ldi	r29, 0x01	; 1
		break;
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1426:	a6 df       	rcall	.-180    	; 0x1374 <udd_ep_get_ctrl>
    1428:	fc 01       	movw	r30, r24
    142a:	11 82       	std	Z+1, r1	; 0x01
	udd_endpoint_disable(ep_ctrl);
    142c:	86 e0       	ldi	r24, 0x06	; 6
	udd_endpoint_clear_status(ep_ctrl);
    142e:	80 83       	st	Z, r24
    1430:	cd 2b       	or	r28, r29
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1432:	c1 83       	std	Z+1, r28	; 0x01
    1434:	df 91       	pop	r29
}
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <udd_ctrl_init>:
    143a:	0f 93       	push	r16
//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_ctrl_init(void)
{
	udd_disable_overflow_interrupt();
    143c:	e8 ec       	ldi	r30, 0xC8	; 200
    143e:	f4 e0       	ldi	r31, 0x04	; 4
    1440:	80 81       	ld	r24, Z
    1442:	8f 7d       	andi	r24, 0xDF	; 223
    1444:	80 83       	st	Z, r24
	udd_disable_underflow_interrupt();
    1446:	80 81       	ld	r24, Z
    1448:	8f 7d       	andi	r24, 0xDF	; 223
    144a:	80 83       	st	Z, r24

	// Clear status flag from control endpointS
	// Mandatory for ATxmega128A1 Rev. K
	udd_control_in_set_NACK0();
    144c:	ec ef       	ldi	r30, 0xFC	; 252
    144e:	f5 e2       	ldi	r31, 0x25	; 37
    1450:	02 e0       	ldi	r16, 0x02	; 2
    1452:	05 93       	las	Z, r16
	udd_control_in_set_bytecnt(0);
    1454:	10 92 fe 25 	sts	0x25FE, r1
    1458:	10 92 ff 25 	sts	0x25FF, r1
	udd_control_in_ack_tc();
    145c:	00 e2       	ldi	r16, 0x20	; 32
    145e:	06 93       	lac	Z, r16
	udd_control_ack_in_underflow();
    1460:	00 e4       	ldi	r16, 0x40	; 64
    1462:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    1464:	38 97       	sbiw	r30, 0x08	; 8
    1466:	00 e2       	ldi	r16, 0x20	; 32
    1468:	06 93       	lac	Z, r16
	udd_control_ack_out_overflow();
    146a:	00 e4       	ldi	r16, 0x40	; 64
    146c:	06 93       	lac	Z, r16

	udd_g_ctrlreq.callback = NULL;
    146e:	10 92 88 27 	sts	0x2788, r1
    1472:	10 92 89 27 	sts	0x2789, r1
	udd_g_ctrlreq.over_under_run = NULL;
    1476:	10 92 8a 27 	sts	0x278A, r1
    147a:	10 92 8b 27 	sts	0x278B, r1
	udd_g_ctrlreq.payload_size = 0;
    147e:	10 92 86 27 	sts	0x2786, r1
    1482:	10 92 87 27 	sts	0x2787, r1
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    1486:	10 92 6f 27 	sts	0x276F, r1
}
    148a:	0f 91       	pop	r16
    148c:	08 95       	ret

0000148e <udd_ctrl_stall_data>:
		udd_control_out_enable_stall();
	}
}

static void udd_ctrl_stall_data(void)
{
    148e:	0f 93       	push	r16
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1490:	85 e0       	ldi	r24, 0x05	; 5
    1492:	80 93 6f 27 	sts	0x276F, r24
	udd_control_in_enable_stall();
    1496:	ed ef       	ldi	r30, 0xFD	; 253
    1498:	f5 e2       	ldi	r31, 0x25	; 37
    149a:	04 e0       	ldi	r16, 0x04	; 4
    149c:	05 93       	las	Z, r16
	udd_control_out_enable_stall();
    149e:	38 97       	sbiw	r30, 0x08	; 8
    14a0:	04 e0       	ldi	r16, 0x04	; 4
    14a2:	05 93       	las	Z, r16
}
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret

000014a8 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
    14a8:	0f 93       	push	r16
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	80 93 6f 27 	sts	0x276F, r24
	// Valid and sent empty IN packet on control endpoint
	udd_control_in_set_bytecnt(0);
    14b0:	10 92 fe 25 	sts	0x25FE, r1
    14b4:	10 92 ff 25 	sts	0x25FF, r1
	udd_control_in_clear_NACK0();
    14b8:	ec ef       	ldi	r30, 0xFC	; 252
    14ba:	f5 e2       	ldi	r31, 0x25	; 37
    14bc:	02 e0       	ldi	r16, 0x02	; 2
    14be:	06 93       	lac	Z, r16
}
    14c0:	0f 91       	pop	r16
    14c2:	08 95       	ret

000014c4 <udd_ctrl_send_zlp_out>:

static void udd_ctrl_send_zlp_out(void)
{
    14c4:	0f 93       	push	r16
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    14c6:	84 e0       	ldi	r24, 0x04	; 4
    14c8:	80 93 6f 27 	sts	0x276F, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    14cc:	e4 ef       	ldi	r30, 0xF4	; 244
    14ce:	f5 e2       	ldi	r31, 0x25	; 37
    14d0:	02 e0       	ldi	r16, 0x02	; 2
    14d2:	06 93       	lac	Z, r16
}
    14d4:	0f 91       	pop	r16
    14d6:	08 95       	ret

000014d8 <udd_ctrl_endofrequest>:

static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
    14d8:	e0 91 88 27 	lds	r30, 0x2788
    14dc:	f0 91 89 27 	lds	r31, 0x2789
    14e0:	30 97       	sbiw	r30, 0x00	; 0
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <udd_ctrl_endofrequest+0xe>
		udd_g_ctrlreq.callback();
    14e4:	09 95       	icall
    14e6:	08 95       	ret

000014e8 <udd_ctrl_in_sent>:
		udd_control_out_clear_NACK0();
	}
}

static void udd_ctrl_in_sent(void)
{
    14e8:	0f 93       	push	r16
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    14ee:	80 91 6f 27 	lds	r24, 0x276F
    14f2:	83 30       	cpi	r24, 0x03	; 3
    14f4:	19 f4       	brne	.+6      	; 0x14fc <udd_ctrl_in_sent+0x14>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
    14f6:	f0 df       	rcall	.-32     	; 0x14d8 <udd_ctrl_endofrequest>
    14f8:	a0 df       	rcall	.-192    	; 0x143a <udd_ctrl_init>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    14fa:	5a c0       	rjmp	.+180    	; 0x15b0 <udd_ctrl_in_sent+0xc8>
    14fc:	80 91 72 27 	lds	r24, 0x2772
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1500:	90 91 73 27 	lds	r25, 0x2773
    1504:	c0 91 86 27 	lds	r28, 0x2786
    1508:	d0 91 87 27 	lds	r29, 0x2787
    150c:	c8 1b       	sub	r28, r24
    150e:	d9 0b       	sbc	r29, r25
    1510:	41 f5       	brne	.+80     	; 0x1562 <udd_ctrl_in_sent+0x7a>
    1512:	20 91 70 27 	lds	r18, 0x2770
	if (0 == nb_remain) {
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1516:	30 91 71 27 	lds	r19, 0x2771
    151a:	82 0f       	add	r24, r18
    151c:	93 1f       	adc	r25, r19
    151e:	80 93 70 27 	sts	0x2770, r24
    1522:	90 93 71 27 	sts	0x2771, r25
    1526:	20 91 82 27 	lds	r18, 0x2782
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
    152a:	30 91 83 27 	lds	r19, 0x2783
    152e:	82 17       	cp	r24, r18
    1530:	93 07       	cpc	r25, r19
    1532:	21 f0       	breq	.+8      	; 0x153c <udd_ctrl_in_sent+0x54>
    1534:	80 91 74 27 	lds	r24, 0x2774
				|| b_shortpacket) {
    1538:	88 23       	and	r24, r24
    153a:	11 f0       	breq	.+4      	; 0x1540 <udd_ctrl_in_sent+0x58>
    153c:	c3 df       	rcall	.-122    	; 0x14c4 <udd_ctrl_send_zlp_out>
    153e:	38 c0       	rjmp	.+112    	; 0x15b0 <udd_ctrl_in_sent+0xc8>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
    1540:	e0 91 8a 27 	lds	r30, 0x278A
			return;
    1544:	f0 91 8b 27 	lds	r31, 0x278B
		}
		// Need of new buffer because the data phase is not complet
		if ((!udd_g_ctrlreq.over_under_run)
    1548:	30 97       	sbiw	r30, 0x00	; 0
    154a:	99 f0       	breq	.+38     	; 0x1572 <udd_ctrl_in_sent+0x8a>
    154c:	09 95       	icall
    154e:	88 23       	and	r24, r24
    1550:	81 f0       	breq	.+32     	; 0x1572 <udd_ctrl_in_sent+0x8a>
				|| (!udd_g_ctrlreq.over_under_run())) {
    1552:	10 92 72 27 	sts	0x2772, r1
    1556:	10 92 73 27 	sts	0x2773, r1
			// Underrun then send zlp on IN
			// nb_remain == 0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
    155a:	c0 91 86 27 	lds	r28, 0x2786
    155e:	d0 91 87 27 	lds	r29, 0x2787
			nb_remain = udd_g_ctrlreq.payload_size;
    1562:	c0 34       	cpi	r28, 0x40	; 64
    1564:	d1 05       	cpc	r29, r1
    1566:	28 f0       	brcs	.+10     	; 0x1572 <udd_ctrl_in_sent+0x8a>
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1568:	10 92 74 27 	sts	0x2774, r1
    156c:	c0 e4       	ldi	r28, 0x40	; 64
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    156e:	d0 e0       	ldi	r29, 0x00	; 0
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <udd_ctrl_in_sent+0x90>
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	80 93 74 27 	sts	0x2774, r24
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    1578:	c0 93 fe 25 	sts	0x25FE, r28
    157c:	d0 93 ff 25 	sts	0x25FF, r29
	}
	udd_control_in_set_bytecnt(nb_remain);
    1580:	80 91 72 27 	lds	r24, 0x2772
    1584:	90 91 73 27 	lds	r25, 0x2773

	// Link payload buffer directly on USB hardware
	udd_control_in_set_buf(udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans);
    1588:	20 91 84 27 	lds	r18, 0x2784
    158c:	30 91 85 27 	lds	r19, 0x2785
    1590:	28 0f       	add	r18, r24
    1592:	39 1f       	adc	r19, r25
    1594:	20 93 00 26 	sts	0x2600, r18
    1598:	30 93 01 26 	sts	0x2601, r19
    159c:	c8 0f       	add	r28, r24
    159e:	d9 1f       	adc	r29, r25
    15a0:	c0 93 72 27 	sts	0x2772, r28
	udd_ctrl_payload_nb_trans += nb_remain;
    15a4:	d0 93 73 27 	sts	0x2773, r29
    15a8:	ec ef       	ldi	r30, 0xFC	; 252
    15aa:	f5 e2       	ldi	r31, 0x25	; 37
    15ac:	02 e0       	ldi	r16, 0x02	; 2

	// Valid and sent the data available in control endpoint buffer
	udd_control_in_clear_NACK0();
    15ae:	06 93       	lac	Z, r16
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	0f 91       	pop	r16
}
    15b6:	08 95       	ret

000015b8 <udd_ep_get_size>:
    15b8:	fc 01       	movw	r30, r24
    15ba:	81 81       	ldd	r24, Z+1	; 0x01
    15bc:	90 e0       	ldi	r25, 0x00	; 0
#if (0!=USB_DEVICE_MAX_EP)

static uint16_t udd_ep_get_size(UDD_EP_t * ep_ctrl)
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
    15be:	87 70       	andi	r24, 0x07	; 7
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	91 05       	cpc	r25, r1
    15c6:	f9 f0       	breq	.+62     	; 0x1606 <udd_ep_get_size+0x4e>
    15c8:	85 30       	cpi	r24, 0x05	; 5
    15ca:	91 05       	cpc	r25, r1
    15cc:	54 f4       	brge	.+20     	; 0x15e2 <udd_ep_get_size+0x2a>
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	91 05       	cpc	r25, r1
    15d2:	99 f0       	breq	.+38     	; 0x15fa <udd_ep_get_size+0x42>
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	91 05       	cpc	r25, r1
    15d8:	9c f4       	brge	.+38     	; 0x1600 <udd_ep_get_size+0x48>
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	51 f4       	brne	.+20     	; 0x15f4 <udd_ep_get_size+0x3c>
    15e0:	1e c0       	rjmp	.+60     	; 0x161e <udd_ep_get_size+0x66>
    15e2:	86 30       	cpi	r24, 0x06	; 6
    15e4:	91 05       	cpc	r25, r1
    15e6:	a9 f0       	breq	.+42     	; 0x1612 <udd_ep_get_size+0x5a>
    15e8:	86 30       	cpi	r24, 0x06	; 6
    15ea:	91 05       	cpc	r25, r1
    15ec:	7c f0       	brlt	.+30     	; 0x160c <udd_ep_get_size+0x54>
    15ee:	87 30       	cpi	r24, 0x07	; 7
    15f0:	91 05       	cpc	r25, r1
    15f2:	91 f0       	breq	.+36     	; 0x1618 <udd_ep_get_size+0x60>
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
    15f4:	88 e0       	ldi	r24, 0x08	; 8
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	08 95       	ret
	case USB_EP_BUFSIZE_16_gc:
		return 16;
	case USB_EP_BUFSIZE_32_gc:
		return 32;
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	08 95       	ret
	case USB_EP_BUFSIZE_64_gc:
		return 64;
    1600:	80 e4       	ldi	r24, 0x40	; 64
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	08 95       	ret
	case USB_EP_BUFSIZE_128_gc:
		return 128;
    1606:	80 e8       	ldi	r24, 0x80	; 128
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	08 95       	ret
	case USB_EP_BUFSIZE_256_gc:
		return 256;
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	08 95       	ret
	case USB_EP_BUFSIZE_512_gc:
		return 512;
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	92 e0       	ldi	r25, 0x02	; 2
    1616:	08 95       	ret
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	93 e0       	ldi	r25, 0x03	; 3
    161c:	08 95       	ret
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
	case USB_EP_BUFSIZE_16_gc:
		return 16;
    161e:	80 e1       	ldi	r24, 0x10	; 16
    1620:	90 e0       	ldi	r25, 0x00	; 0
	case USB_EP_BUFSIZE_512_gc:
		return 512;
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
	}
}
    1622:	08 95       	ret

00001624 <udd_ep_get_job>:

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	2f 70       	andi	r18, 0x0F	; 15
    162a:	30 70       	andi	r19, 0x00	; 0
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1630:	48 2f       	mov	r20, r24
    1632:	55 27       	eor	r21, r21
    1634:	47 fd       	sbrc	r20, 7
    1636:	50 95       	com	r21
    1638:	44 27       	eor	r20, r20
    163a:	55 0f       	add	r21, r21
    163c:	44 1f       	adc	r20, r20
    163e:	55 27       	eor	r21, r21
	}
}

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    1640:	24 0f       	add	r18, r20
    1642:	35 1f       	adc	r19, r21
    1644:	c9 01       	movw	r24, r18
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	82 0f       	add	r24, r18
    1654:	93 1f       	adc	r25, r19
    1656:	8a 5d       	subi	r24, 0xDA	; 218
    1658:	99 4d       	sbci	r25, 0xD9	; 217
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}
    165a:	08 95       	ret

0000165c <udd_ctrl_interrupt_tc_setup>:
	}
	return false;
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
    165c:	0f 93       	push	r16
	if (!udd_is_setup_event()) {
    165e:	80 91 cc 04 	lds	r24, 0x04CC
    1662:	80 ff       	sbrs	r24, 0
    1664:	63 c0       	rjmp	.+198    	; 0x172c <udd_ctrl_interrupt_tc_setup+0xd0>
		return false;
	}
	udd_ack_setup_event();
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	20 93 cc 04 	sts	0x04CC, r18

	// Clear eventually previous stall events
	udd_control_out_ack_stall();
    166c:	84 ef       	ldi	r24, 0xF4	; 244
    166e:	95 e2       	ldi	r25, 0x25	; 37
    1670:	fc 01       	movw	r30, r24
    1672:	00 e8       	ldi	r16, 0x80	; 128
    1674:	06 93       	lac	Z, r16
	udd_control_in_ack_stall();
    1676:	38 96       	adiw	r30, 0x08	; 8
    1678:	00 e8       	ldi	r16, 0x80	; 128
    167a:	06 93       	lac	Z, r16
	udd_ack_stall_event();
    167c:	20 93 ca 04 	sts	0x04CA, r18

	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
    1680:	fc 01       	movw	r30, r24
    1682:	00 e1       	ldi	r16, 0x10	; 16
    1684:	06 93       	lac	Z, r16
	udd_ep_control_state = UDD_EPCTRL_SETUP;
}

static void udd_ctrl_setup_received(void)
{
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1686:	80 91 6f 27 	lds	r24, 0x276F
    168a:	88 23       	and	r24, r24
    168c:	29 f0       	breq	.+10     	; 0x1698 <udd_ctrl_interrupt_tc_setup+0x3c>
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
    168e:	83 50       	subi	r24, 0x03	; 3
}

static void udd_ctrl_setup_received(void)
{
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	08 f4       	brcc	.+2      	; 0x1696 <udd_ctrl_interrupt_tc_setup+0x3a>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// Accept that ZLP event can be hidden by setup packet event
			// in case of setup packet sending quiclky after a ZLP
			udd_ctrl_endofrequest();
    1694:	21 df       	rcall	.-446    	; 0x14d8 <udd_ctrl_endofrequest>
    1696:	d1 de       	rcall	.-606    	; 0x143a <udd_ctrl_init>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1698:	80 91 f6 25 	lds	r24, 0x25F6
	}
	// Fill setup request structure
	if (8 != udd_control_out_get_bytecnt())
    169c:	90 91 f7 25 	lds	r25, 0x25F7
    16a0:	88 30       	cpi	r24, 0x08	; 8
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <udd_ctrl_interrupt_tc_setup+0x4c>
    16a6:	44 c0       	rjmp	.+136    	; 0x1730 <udd_ctrl_interrupt_tc_setup+0xd4>
    16a8:	ac e7       	ldi	r26, 0x7C	; 124
    16aa:	b7 e2       	ldi	r27, 0x27	; 39
		return; // Error data number don't correspond to SETUP packet
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    16ac:	ef e2       	ldi	r30, 0x2F	; 47
    16ae:	f7 e2       	ldi	r31, 0x27	; 39
    16b0:	88 e0       	ldi	r24, 0x08	; 8
    16b2:	01 90       	ld	r0, Z+
    16b4:	0d 92       	st	X+, r0
    16b6:	81 50       	subi	r24, 0x01	; 1
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <udd_ctrl_interrupt_tc_setup+0x56>
    16ba:	e8 ec       	ldi	r30, 0xC8	; 200
    16bc:	f4 e0       	ldi	r31, 0x04	; 4

	// To detect a protocol error on setup, enable nak interrupt on IN/OUT of control endpoint
	udd_enable_overflow_interrupt();
    16be:	80 81       	ld	r24, Z
    16c0:	80 62       	ori	r24, 0x20	; 32
    16c2:	80 83       	st	Z, r24
    16c4:	80 81       	ld	r24, Z
    16c6:	80 62       	ori	r24, 0x20	; 32
	udd_enable_underflow_interrupt();
    16c8:	80 83       	st	Z, r24
    16ca:	7d db       	rcall	.-2310   	; 0xdc6 <udc_process_setup>
    16cc:	88 23       	and	r24, r24

	// Decode setup request
	if (udc_process_setup() == false) {
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <udd_ctrl_interrupt_tc_setup+0x7a>
    16d0:	de de       	rcall	.-580    	; 0x148e <udd_ctrl_stall_data>
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	2e c0       	rjmp	.+92     	; 0x1732 <udd_ctrl_interrupt_tc_setup+0xd6>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
    16d6:	80 91 7c 27 	lds	r24, 0x277C
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    16da:	88 23       	and	r24, r24
    16dc:	74 f4       	brge	.+28     	; 0x16fa <udd_ctrl_interrupt_tc_setup+0x9e>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
		return;
	}

	if (Udd_setup_is_in()) {
    16de:	10 92 70 27 	sts	0x2770, r1
    16e2:	10 92 71 27 	sts	0x2771, r1
		udd_ctrl_prev_payload_nb_trans = 0;
    16e6:	10 92 72 27 	sts	0x2772, r1
    16ea:	10 92 73 27 	sts	0x2773, r1
		udd_ctrl_payload_nb_trans = 0;
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	80 93 6f 27 	sts	0x276F, r24
    16f4:	f9 de       	rcall	.-526    	; 0x14e8 <udd_ctrl_in_sent>
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	1c c0       	rjmp	.+56     	; 0x1732 <udd_ctrl_interrupt_tc_setup+0xd6>
    16fa:	80 91 82 27 	lds	r24, 0x2782
		udd_ctrl_in_sent(); // Send first data transfer
    16fe:	90 91 83 27 	lds	r25, 0x2783
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    1702:	00 97       	sbiw	r24, 0x00	; 0
		udd_ctrl_prev_payload_nb_trans = 0;
		udd_ctrl_payload_nb_trans = 0;
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
		udd_ctrl_in_sent(); // Send first data transfer
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
    1704:	19 f4       	brne	.+6      	; 0x170c <udd_ctrl_interrupt_tc_setup+0xb0>
    1706:	d0 de       	rcall	.-608    	; 0x14a8 <udd_ctrl_send_zlp_in>
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	13 c0       	rjmp	.+38     	; 0x1732 <udd_ctrl_interrupt_tc_setup+0xd6>
    170c:	10 92 70 27 	sts	0x2770, r1
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
    1710:	10 92 71 27 	sts	0x2771, r1
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    1714:	10 92 72 27 	sts	0x2772, r1
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
    1718:	10 92 73 27 	sts	0x2773, r1
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	80 93 6f 27 	sts	0x276F, r24
		udd_ctrl_payload_nb_trans = 0;
    1722:	e4 ef       	ldi	r30, 0xF4	; 244
    1724:	f5 e2       	ldi	r31, 0x25	; 37
    1726:	02 e0       	ldi	r16, 0x02	; 2
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    1728:	06 93       	lac	Z, r16
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <udd_ctrl_interrupt_tc_setup+0xd6>
    172c:	80 e0       	ldi	r24, 0x00	; 0
		// Clear packet to receive first packet
		udd_control_out_clear_NACK0();
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <udd_ctrl_interrupt_tc_setup+0xd6>
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	0f 91       	pop	r16
    1734:	08 95       	ret

00001736 <udd_ep_trans_complet>:
    1736:	af 92       	push	r10
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
	if (!udd_is_setup_event()) {
		return false;
    1738:	bf 92       	push	r11
    173a:	cf 92       	push	r12
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    173c:	df 92       	push	r13
}
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
	}
	return (USB_DEVICE_MAX_EP >= ep);
}

static void udd_ep_trans_complet(udd_ep_id_t ep)
{
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	18 2f       	mov	r17, r24
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
    174c:	6b df       	rcall	.-298    	; 0x1624 <udd_ep_get_job>
    174e:	ec 01       	movw	r28, r24
    1750:	81 2f       	mov	r24, r17
	ep_ctrl = udd_ep_get_ctrl(ep);
    1752:	10 de       	rcall	.-992    	; 0x1374 <udd_ep_get_ctrl>
    1754:	7c 01       	movw	r14, r24
    1756:	30 df       	rcall	.-416    	; 0x15b8 <udd_ep_get_size>
    1758:	5c 01       	movw	r10, r24
	ep_size = udd_ep_get_size(ep_ctrl);
    175a:	11 23       	and	r17, r17
    175c:	0c f0       	brlt	.+2      	; 0x1760 <udd_ep_trans_complet+0x2a>
    175e:	4e c0       	rjmp	.+156    	; 0x17fc <udd_ep_trans_complet+0xc6>

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    1760:	f7 01       	movw	r30, r14
    1762:	86 81       	ldd	r24, Z+6	; 0x06
    1764:	97 81       	ldd	r25, Z+7	; 0x07
		// Transfer complet on IN
		nb_trans = udd_endpoint_in_nb_sent(ep_ctrl);
    1766:	2d 81       	ldd	r18, Y+5	; 0x05
    1768:	3e 81       	ldd	r19, Y+6	; 0x06
    176a:	82 0f       	add	r24, r18

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    176c:	93 1f       	adc	r25, r19
    176e:	8d 83       	std	Y+5, r24	; 0x05
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	82 17       	cp	r24, r18

		// Need to send other data
		if (ptr_job->nb_trans != ptr_job->buf_size) {
    1778:	93 07       	cpc	r25, r19
    177a:	99 f1       	breq	.+102    	; 0x17e2 <udd_ep_trans_complet+0xac>
    177c:	28 1b       	sub	r18, r24
    177e:	39 0b       	sbc	r19, r25
    1780:	f4 e0       	ldi	r31, 0x04	; 4
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1782:	20 30       	cpi	r18, 0x00	; 0
    1784:	3f 07       	cpc	r19, r31
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1786:	38 f0       	brcs	.+14     	; 0x1796 <udd_ep_trans_complet+0x60>
    1788:	2f ef       	ldi	r18, 0xFF	; 255
    178a:	33 e0       	ldi	r19, 0x03	; 3
    178c:	c9 01       	movw	r24, r18
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
    178e:	b5 01       	movw	r22, r10
    1790:	7c d5       	rcall	.+2808   	; 0x228a <__udivmodhi4>
    1792:	28 1b       	sub	r18, r24
    1794:	39 0b       	sbc	r19, r25
    1796:	88 81       	ld	r24, Y
    1798:	81 ff       	sbrs	r24, 1
		if (ptr_job->nb_trans != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    179a:	0b c0       	rjmp	.+22     	; 0x17b2 <udd_ep_trans_complet+0x7c>
    179c:	c9 01       	movw	r24, r18
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
    179e:	b5 01       	movw	r22, r10
    17a0:	74 d5       	rcall	.+2792   	; 0x228a <__udivmodhi4>
    17a2:	41 e0       	ldi	r20, 0x01	; 1
				&& (0==(next_trans % ep_size));
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	11 f0       	breq	.+4      	; 0x17ae <udd_ep_trans_complet+0x78>
    17aa:	40 e0       	ldi	r20, 0x00	; 0
		return false;
	}
	return (USB_DEVICE_MAX_EP >= ep);
}

static void udd_ep_trans_complet(udd_ep_id_t ep)
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	ca 01       	movw	r24, r20
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <udd_ep_trans_complet+0x80>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	81 70       	andi	r24, 0x01	; 1
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
    17b8:	88 0f       	add	r24, r24
    17ba:	98 81       	ld	r25, Y
    17bc:	9d 7f       	andi	r25, 0xFD	; 253
    17be:	89 2b       	or	r24, r25
    17c0:	88 83       	st	Y, r24
    17c2:	f7 01       	movw	r30, r14
    17c4:	16 82       	std	Z+6, r1	; 0x06
    17c6:	17 82       	std	Z+7, r1	; 0x07
    17c8:	22 83       	std	Z+2, r18	; 0x02
    17ca:	33 83       	std	Z+3, r19	; 0x03
				&& (0==(next_trans % ep_size));
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	9a 81       	ldd	r25, Y+2	; 0x02
    17d0:	2d 81       	ldd	r18, Y+5	; 0x05
			udd_endpoint_in_set_bytecnt(ep_ctrl, next_trans);
    17d2:	3e 81       	ldd	r19, Y+6	; 0x06
    17d4:	82 0f       	add	r24, r18
			// Link the user buffer directly on USB hardware DMA
			udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    17d6:	93 1f       	adc	r25, r19
    17d8:	84 83       	std	Z+4, r24	; 0x04
    17da:	95 83       	std	Z+5, r25	; 0x05
    17dc:	02 e0       	ldi	r16, 0x02	; 2
    17de:	06 93       	lac	Z, r16
    17e0:	95 c0       	rjmp	.+298    	; 0x190c <udd_ep_trans_complet+0x1d6>
    17e2:	88 81       	ld	r24, Y
    17e4:	81 ff       	sbrs	r24, 1
			udd_endpoint_clear_NACK0(ep_ctrl);
    17e6:	85 c0       	rjmp	.+266    	; 0x18f2 <udd_ep_trans_complet+0x1bc>
    17e8:	8d 7f       	andi	r24, 0xFD	; 253
			return;
    17ea:	88 83       	st	Y, r24
		}

		// Need to send a ZLP after all data transfer
		if (ptr_job->b_shortpacket) {
    17ec:	f7 01       	movw	r30, r14
    17ee:	16 82       	std	Z+6, r1	; 0x06
    17f0:	17 82       	std	Z+7, r1	; 0x07
			ptr_job->b_shortpacket = false;
    17f2:	12 82       	std	Z+2, r1	; 0x02
    17f4:	13 82       	std	Z+3, r1	; 0x03
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    17f6:	02 e0       	ldi	r16, 0x02	; 2
    17f8:	06 93       	lac	Z, r16
    17fa:	88 c0       	rjmp	.+272    	; 0x190c <udd_ep_trans_complet+0x1d6>
			udd_endpoint_in_set_bytecnt(ep_ctrl, 0);
    17fc:	f7 01       	movw	r30, r14
    17fe:	c2 80       	ldd	r12, Z+2	; 0x02
			udd_endpoint_clear_NACK0(ep_ctrl);
    1800:	d3 80       	ldd	r13, Z+3	; 0x03
    1802:	88 81       	ld	r24, Y
			return;
    1804:	82 ff       	sbrs	r24, 2
		}
	}
	else
	{
		// Transfer complet on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);
    1806:	1c c0       	rjmp	.+56     	; 0x1840 <udd_ep_trans_complet+0x10a>
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02

		// Can be necessary to copy data receiv from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
    180c:	2d 81       	ldd	r18, Y+5	; 0x05
    180e:	3e 81       	ldd	r19, Y+6	; 0x06
    1810:	28 0f       	add	r18, r24
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    1812:	39 1f       	adc	r19, r25
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	b5 01       	movw	r22, r10
    181a:	37 d5       	rcall	.+2670   	; 0x228a <__udivmodhi4>
    181c:	48 2f       	mov	r20, r24
    181e:	59 2f       	mov	r21, r25
    1820:	61 2f       	mov	r22, r17
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	00 24       	eor	r0, r0
    1826:	76 95       	lsr	r23
    1828:	67 95       	ror	r22
    182a:	07 94       	ror	r0
				, udd_ep_out_cache_buffer[ep - 1]
    182c:	76 95       	lsr	r23
    182e:	67 95       	ror	r22
		// Transfer complet on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);

		// Can be necessary to copy data receiv from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    1830:	07 94       	ror	r0
    1832:	76 2f       	mov	r23, r22
    1834:	60 2d       	mov	r22, r0
    1836:	61 5d       	subi	r22, 0xD1	; 209
    1838:	79 4d       	sbci	r23, 0xD9	; 217
    183a:	82 2f       	mov	r24, r18
    183c:	93 2f       	mov	r25, r19
    183e:	5b d5       	rcall	.+2742   	; 0x22f6 <memcpy>
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	8c 0d       	add	r24, r12
    1846:	9d 1d       	adc	r25, r13
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	2b 81       	ldd	r18, Y+3	; 0x03
				, udd_ep_out_cache_buffer[ep - 1]
				, ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    184e:	3c 81       	ldd	r19, Y+4	; 0x04
    1850:	28 17       	cp	r18, r24
    1852:	39 07       	cpc	r19, r25
    1854:	10 f4       	brcc	.+4      	; 0x185a <udd_ep_trans_complet+0x124>
    1856:	2d 83       	std	Y+5, r18	; 0x05
    1858:	3e 83       	std	Y+6, r19	; 0x06
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    185a:	f7 01       	movw	r30, r14
    185c:	86 81       	ldd	r24, Z+6	; 0x06
    185e:	97 81       	ldd	r25, Z+7	; 0x07
    1860:	8c 15       	cp	r24, r12
    1862:	9d 05       	cpc	r25, r13
			ptr_job->nb_trans = ptr_job->buf_size;
    1864:	09 f0       	breq	.+2      	; 0x1868 <udd_ep_trans_complet+0x132>
    1866:	45 c0       	rjmp	.+138    	; 0x18f2 <udd_ep_trans_complet+0x1bc>
		}

		// If all previous data requested are received and user buffer not full
		// then need to receiv other data
		if ((nb_trans == udd_endpoint_out_get_nbbyte_requested(ep_ctrl))
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	9e 81       	ldd	r25, Y+6	; 0x06
    186c:	28 17       	cp	r18, r24
    186e:	39 07       	cpc	r19, r25
    1870:	09 f4       	brne	.+2      	; 0x1874 <udd_ep_trans_complet+0x13e>
    1872:	3f c0       	rjmp	.+126    	; 0x18f2 <udd_ep_trans_complet+0x1bc>
    1874:	28 1b       	sub	r18, r24
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    1876:	39 0b       	sbc	r19, r25
    1878:	f4 e0       	ldi	r31, 0x04	; 4
    187a:	20 30       	cpi	r18, 0x00	; 0
    187c:	3f 07       	cpc	r19, r31
    187e:	40 f0       	brcs	.+16     	; 0x1890 <udd_ep_trans_complet+0x15a>
    1880:	2f ef       	ldi	r18, 0xFF	; 255
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1882:	33 e0       	ldi	r19, 0x03	; 3
    1884:	c9 01       	movw	r24, r18
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1886:	b5 01       	movw	r22, r10
    1888:	00 d5       	rcall	.+2560   	; 0x228a <__udivmodhi4>
    188a:	28 1b       	sub	r18, r24
    188c:	39 0b       	sbc	r19, r25
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
    188e:	05 c0       	rjmp	.+10     	; 0x189a <udd_ep_trans_complet+0x164>
    1890:	c9 01       	movw	r24, r18
    1892:	b5 01       	movw	r22, r10
    1894:	fa d4       	rcall	.+2548   	; 0x228a <__udivmodhi4>
    1896:	28 1b       	sub	r18, r24
    1898:	39 0b       	sbc	r19, r25
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
    189a:	f7 01       	movw	r30, r14
    189c:	12 82       	std	Z+2, r1	; 0x02
    189e:	13 82       	std	Z+3, r1	; 0x03
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
    18a0:	2a 15       	cp	r18, r10
    18a2:	3b 05       	cpc	r19, r11
    18a4:	b8 f4       	brcc	.+46     	; 0x18d4 <udd_ep_trans_complet+0x19e>
    18a6:	88 81       	ld	r24, Y
    18a8:	84 60       	ori	r24, 0x04	; 4
    18aa:	88 83       	st	Y, r24
			}

			udd_endpoint_out_reset_nb_received(ep_ctrl);
    18ac:	81 2f       	mov	r24, r17
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	8f 70       	andi	r24, 0x0F	; 15
			if (next_trans < ep_size) {
    18b2:	90 70       	andi	r25, 0x00	; 0
    18b4:	00 24       	eor	r0, r0
    18b6:	96 95       	lsr	r25
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
    18b8:	87 95       	ror	r24
    18ba:	07 94       	ror	r0
    18bc:	96 95       	lsr	r25
				udd_endpoint_set_buf( ep_ctrl,
    18be:	87 95       	ror	r24
    18c0:	07 94       	ror	r0
    18c2:	98 2f       	mov	r25, r24
    18c4:	80 2d       	mov	r24, r0
    18c6:	81 5d       	subi	r24, 0xD1	; 209
    18c8:	99 4d       	sbci	r25, 0xD9	; 217
    18ca:	84 83       	std	Z+4, r24	; 0x04
    18cc:	95 83       	std	Z+5, r25	; 0x05
    18ce:	a6 82       	std	Z+6, r10	; 0x06
    18d0:	b7 82       	std	Z+7, r11	; 0x07
    18d2:	0b c0       	rjmp	.+22     	; 0x18ea <udd_ep_trans_complet+0x1b4>
    18d4:	49 81       	ldd	r20, Y+1	; 0x01
    18d6:	5a 81       	ldd	r21, Y+2	; 0x02
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	9e 81       	ldd	r25, Y+6	; 0x06
    18dc:	84 0f       	add	r24, r20
    18de:	95 1f       	adc	r25, r21
					udd_ep_out_cache_buffer[((ep & USB_EP_ADDR_MASK) - 1)]);
				udd_endpoint_out_set_nbbyte(ep_ctrl, ep_size);
    18e0:	f7 01       	movw	r30, r14
    18e2:	84 83       	std	Z+4, r24	; 0x04
    18e4:	95 83       	std	Z+5, r25	; 0x05
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    18e6:	26 83       	std	Z+6, r18	; 0x06
    18e8:	37 83       	std	Z+7, r19	; 0x07
    18ea:	f7 01       	movw	r30, r14
    18ec:	02 e0       	ldi	r16, 0x02	; 2
    18ee:	06 93       	lac	Z, r16
    18f0:	0d c0       	rjmp	.+26     	; 0x190c <udd_ep_trans_complet+0x1d6>
    18f2:	88 81       	ld	r24, Y
    18f4:	80 ff       	sbrs	r24, 0
    18f6:	0a c0       	rjmp	.+20     	; 0x190c <udd_ep_trans_complet+0x1d6>
				udd_endpoint_out_set_nbbyte(ep_ctrl, next_trans);
    18f8:	8e 7f       	andi	r24, 0xFE	; 254
    18fa:	88 83       	st	Y, r24
			}
			// Start transfer
			udd_endpoint_clear_NACK0(ep_ctrl);
    18fc:	ef 81       	ldd	r30, Y+7	; 0x07
    18fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1900:	30 97       	sbiw	r30, 0x00	; 0
			return;
    1902:	21 f0       	breq	.+8      	; 0x190c <udd_ep_trans_complet+0x1d6>
		}
	}

	// Job complet then call callback
	if (ptr_job->busy) {
    1904:	6d 81       	ldd	r22, Y+5	; 0x05
    1906:	7e 81       	ldd	r23, Y+6	; 0x06
    1908:	80 e0       	ldi	r24, 0x00	; 0
		ptr_job->busy = false;
    190a:	09 95       	icall
    190c:	df 91       	pop	r29
		if (NULL != ptr_job->call_trans) {
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
			ptr_job->call_trans(UDD_EP_TRANSFER_OK,
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	bf 90       	pop	r11
				ptr_job->nb_trans);
		}
	}
	return;
}
    191e:	af 90       	pop	r10
    1920:	08 95       	ret

00001922 <udd_enable>:
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	c0 e6       	ldi	r28, 0x60	; 96
    1928:	d0 e0       	ldi	r29, 0x00	; 0
    192a:	18 82       	st	Y, r1
    192c:	80 e3       	ldi	r24, 0x30	; 48
    192e:	0e 94 a3 01 	call	0x346	; 0x346 <sysclk_enable_usb>
    1932:	e0 ec       	ldi	r30, 0xC0	; 192
	sysclk_enable_usb(6);
	udd_set_low_speed();
#else
	// The USB hardware need of 48MHz in full speed mode
	sysclk_enable_usb(48);
	udd_set_full_speed();
    1934:	f4 e0       	ldi	r31, 0x04	; 4
    1936:	80 81       	ld	r24, Z
    1938:	80 64       	ori	r24, 0x40	; 64
    193a:	80 83       	st	Z, r24
// The XMEGA_A1U does not support the RC calibration through Keepalive (Low speed).
#if (!defined USB_DEVICE_LOW_SPEED) || (!XMEGA_A1U)
# ifdef CONFIG_OSC_AUTOCAL
#   if CONFIG_OSC_AUTOCAL_REF_OSC == OSC_ID_USBSOF
	// The SOF calibration can be enabled
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	88 83       	st	Y, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1940:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    1942:	f8 94       	cli

	flags = cpu_irq_save();

	// Reset endpoints table
	for (i = 0; i < ((USB_DEVICE_MAX_EP + 1) * 2); i++) {
		udd_sram.ep_ctrl[i].CTRL = 0;
    1944:	10 92 f5 25 	sts	0x25F5, r1
    1948:	10 92 fd 25 	sts	0x25FD, r1
    194c:	10 92 05 26 	sts	0x2605, r1
    1950:	10 92 0d 26 	sts	0x260D, r1
    1954:	10 92 15 26 	sts	0x2615, r1
    1958:	10 92 1d 26 	sts	0x261D, r1
    195c:	10 92 25 26 	sts	0x2625, r1
    1960:	10 92 2d 26 	sts	0x262D, r1
	}
#if (0!=USB_DEVICE_MAX_EP)
	// Reset internal variables
	for (i = 0; i < (USB_DEVICE_MAX_EP * 2); i++) {
		udd_ep_job[i].busy = false;
    1964:	80 91 38 26 	lds	r24, 0x2638
    1968:	8e 7f       	andi	r24, 0xFE	; 254
    196a:	80 93 38 26 	sts	0x2638, r24
    196e:	80 91 41 26 	lds	r24, 0x2641
    1972:	8e 7f       	andi	r24, 0xFE	; 254
    1974:	80 93 41 26 	sts	0x2641, r24
    1978:	80 91 4a 26 	lds	r24, 0x264A
    197c:	8e 7f       	andi	r24, 0xFE	; 254
    197e:	80 93 4a 26 	sts	0x264A, r24
    1982:	80 91 53 26 	lds	r24, 0x2653
    1986:	8e 7f       	andi	r24, 0xFE	; 254
    1988:	80 93 53 26 	sts	0x2653, r24
    198c:	80 91 5c 26 	lds	r24, 0x265C
    1990:	8e 7f       	andi	r24, 0xFE	; 254
    1992:	80 93 5c 26 	sts	0x265C, r24
    1996:	80 91 65 26 	lds	r24, 0x2665
    199a:	8e 7f       	andi	r24, 0xFE	; 254
    199c:	80 93 65 26 	sts	0x2665, r24
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	6a e1       	ldi	r22, 0x1A	; 26
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	be dc       	rcall	.-1668   	; 0x1324 <nvm_read_byte>
    19a8:	8f 3f       	cpi	r24, 0xFF	; 255
#ifdef USB_PAD_USER_CAL0
	USB_CAL0 = USB_PAD_USER_CAL0;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL0));
	if (cal != 0xFF) {
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <udd_enable+0x90>
    19ac:	80 93 fa 04 	sts	0x04FA, r24
		USB_CAL0 = cal;
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <udd_enable+0x96>
    19b2:	8f e1       	ldi	r24, 0x1F	; 31
	} else {
		USB_CAL0 = 0x1F;
    19b4:	80 93 fa 04 	sts	0x04FA, r24
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	6b e1       	ldi	r22, 0x1B	; 27
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	b2 dc       	rcall	.-1692   	; 0x1324 <nvm_read_byte>
    19c0:	8f 3f       	cpi	r24, 0xFF	; 255
    19c2:	19 f0       	breq	.+6      	; 0x19ca <udd_enable+0xa8>
#ifdef USB_PAD_USER_CAL1
	USB_CAL1 = USB_PAD_USER_CAL1;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL1));
	if (cal != 0xFF) {
    19c4:	80 93 fb 04 	sts	0x04FB, r24
		USB_CAL1 = cal;
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <udd_enable+0xae>
    19ca:	8f e1       	ldi	r24, 0x1F	; 31
    19cc:	80 93 fb 04 	sts	0x04FB, r24
	} else {
		USB_CAL1 = 0x1F;
    19d0:	e0 ec       	ldi	r30, 0xC0	; 192
    19d2:	f4 e0       	ldi	r31, 0x04	; 4
	}
#endif

	//** Enable USB hardware
	usb_pad_init();
	udd_set_nb_max_ep(USB_DEVICE_MAX_EP);
    19d4:	80 81       	ld	r24, Z
    19d6:	83 60       	ori	r24, 0x03	; 3
    19d8:	80 83       	st	Z, r24
    19da:	80 81       	ld	r24, Z
    19dc:	80 68       	ori	r24, 0x80	; 128
	udd_enable_interface();
    19de:	80 83       	st	Z, r24
    19e0:	80 81       	ld	r24, Z
    19e2:	80 61       	ori	r24, 0x10	; 16
	udd_enable_store_frame_number();
    19e4:	80 83       	st	Z, r24
    19e6:	84 ef       	ldi	r24, 0xF4	; 244
    19e8:	95 e2       	ldi	r25, 0x25	; 37
	udd_set_ep_table_addr(udd_sram.ep_ctrl);
    19ea:	86 83       	std	Z+6, r24	; 0x06
    19ec:	97 83       	std	Z+7, r25	; 0x07
    19ee:	80 81       	ld	r24, Z
    19f0:	80 62       	ori	r24, 0x20	; 32
	// Enable TC fifo management
	udd_enable_fifo();
    19f2:	80 83       	st	Z, r24
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	80 93 c5 04 	sts	0x04C5, r24
	udd_reset_fifo();
    19fa:	e8 ec       	ldi	r30, 0xC8	; 200
    19fc:	f4 e0       	ldi	r31, 0x04	; 4
	// Enable Interrupt USB Device
	udd_enable_interrupt(UDD_USB_INT_LEVEL);
    19fe:	80 81       	ld	r24, Z
    1a00:	81 60       	ori	r24, 0x01	; 1
    1a02:	80 83       	st	Z, r24
    1a04:	10 92 6e 26 	sts	0x266E, r1

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
    1a08:	8f b7       	in	r24, 0x3f	; 63
    1a0a:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a0c:	90 91 7b 27 	lds	r25, 0x277B
    1a10:	9f 5f       	subi	r25, 0xFF	; 255
    1a12:	90 93 7b 27 	sts	0x277B, r25
    1a16:	8f bf       	out	0x3f, r24	; 63
    1a18:	cf bf       	out	0x3f, r28	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
	sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
    1a1e:	08 95       	ret

00001a20 <udd_include_vbus_monitoring>:
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	08 95       	ret

00001a24 <udd_attach>:
{
	return false; // No Vbus monitoring
}

void udd_attach(void)
{
    1a24:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a26:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    1a28:	f8 94       	cli
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	85 dc       	rcall	.-1782   	; 0x1338 <udd_sleep_mode>
    1a2e:	ea ec       	ldi	r30, 0xCA	; 202

	udd_ack_suspend_event();
    1a30:	f4 e0       	ldi	r31, 0x04	; 4
    1a32:	80 e4       	ldi	r24, 0x40	; 64
    1a34:	80 83       	st	Z, r24
    1a36:	80 e2       	ldi	r24, 0x20	; 32
	udd_ack_resume_event();
    1a38:	80 83       	st	Z, r24
    1a3a:	e1 ec       	ldi	r30, 0xC1	; 193
	udd_attach_device();
    1a3c:	f4 e0       	ldi	r31, 0x04	; 4
    1a3e:	80 81       	ld	r24, Z
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	80 83       	st	Z, r24
    1a44:	a9 ec       	ldi	r26, 0xC9	; 201
	// Enable main USB interrupts
	udd_enable_tc_interrupt();
    1a46:	b4 e0       	ldi	r27, 0x04	; 4
    1a48:	8c 91       	ld	r24, X
    1a4a:	82 60       	ori	r24, 0x02	; 2
    1a4c:	8c 93       	st	X, r24
    1a4e:	e8 ec       	ldi	r30, 0xC8	; 200
	udd_enable_busevt_interrupt();
    1a50:	f4 e0       	ldi	r31, 0x04	; 4
    1a52:	80 81       	ld	r24, Z
    1a54:	80 64       	ori	r24, 0x40	; 64
    1a56:	80 83       	st	Z, r24
    1a58:	8c 91       	ld	r24, X
	udd_enable_setup_interrupt();
    1a5a:	81 60       	ori	r24, 0x01	; 1
    1a5c:	8c 93       	st	X, r24
    1a5e:	80 81       	ld	r24, Z
	udd_enable_start_of_frame_interrupt();
    1a60:	80 68       	ori	r24, 0x80	; 128
    1a62:	80 83       	st	Z, r24
    1a64:	cf bf       	out	0x3f, r28	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a66:	cf 91       	pop	r28

	cpu_irq_restore(flags);
}
    1a68:	08 95       	ret

00001a6a <udd_detach>:
    1a6a:	e1 ec       	ldi	r30, 0xC1	; 193

void udd_detach(void)
{
	// Detach device from the bus
	udd_detach_device();
    1a6c:	f4 e0       	ldi	r31, 0x04	; 4
    1a6e:	80 81       	ld	r24, Z
    1a70:	8e 7f       	andi	r24, 0xFE	; 254
    1a72:	80 83       	st	Z, r24
}
    1a74:	08 95       	ret

00001a76 <udd_is_high_speed>:

bool udd_is_high_speed(void)
{
	return false;
}
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	08 95       	ret

00001a7a <udd_set_address>:

void udd_set_address(uint8_t address)
{
	udd_set_device_address(address);
    1a7a:	80 93 c3 04 	sts	0x04C3, r24
}
    1a7e:	08 95       	ret

00001a80 <udd_getaddress>:

uint8_t udd_getaddress(void)
{
	return udd_get_device_address();
    1a80:	80 91 c3 04 	lds	r24, 0x04C3
}
    1a84:	08 95       	ret

00001a86 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
	return udd_sram.frame_number;
    1a86:	80 91 34 26 	lds	r24, 0x2634
    1a8a:	90 91 35 26 	lds	r25, 0x2635
}
    1a8e:	08 95       	ret

00001a90 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	08 95       	ret

00001a96 <udd_set_setup_payload>:
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    1a96:	80 93 84 27 	sts	0x2784, r24
    1a9a:	90 93 85 27 	sts	0x2785, r25
	udd_g_ctrlreq.payload_size = payload_size;
    1a9e:	60 93 86 27 	sts	0x2786, r22
    1aa2:	70 93 87 27 	sts	0x2787, r23
}
    1aa6:	08 95       	ret

00001aa8 <udd_ep_alloc>:

#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	c8 2f       	mov	r28, r24
    1ab6:	d6 2f       	mov	r29, r22
    1ab8:	7a 01       	movw	r14, r20
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    1aba:	5c dc       	rcall	.-1864   	; 0x1374 <udd_ep_get_ctrl>
    1abc:	8c 01       	movw	r16, r24
    1abe:	fc 01       	movw	r30, r24
	if (udd_endpoint_is_enable(ep_ctrl)) {
    1ac0:	81 81       	ldd	r24, Z+1	; 0x01
    1ac2:	80 7c       	andi	r24, 0xC0	; 192
    1ac4:	99 f4       	brne	.+38     	; 0x1aec <udd_ep_alloc+0x44>
    1ac6:	8c 2f       	mov	r24, r28
		return false; // Already allocated
	}
	udd_ep_init(ep, bmAttributes, MaxEndpointSize);
    1ac8:	6d 2f       	mov	r22, r29
    1aca:	a7 01       	movw	r20, r14
    1acc:	6d dc       	rcall	.-1830   	; 0x13a8 <udd_ep_init>
    1ace:	f8 01       	movw	r30, r16
    1ad0:	81 81       	ldd	r24, Z+1	; 0x01

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
    1ad2:	80 7c       	andi	r24, 0xC0	; 192
    1ad4:	80 3c       	cpi	r24, 0xC0	; 192
    1ad6:	21 f4       	brne	.+8      	; 0x1ae0 <udd_ep_alloc+0x38>
    1ad8:	81 81       	ldd	r24, Z+1	; 0x01
    1ada:	87 70       	andi	r24, 0x07	; 7
			&& (udd_endpoint_get_size_field(ep_ctrl)
    1adc:	87 30       	cpi	r24, 0x07	; 7
    1ade:	41 f0       	breq	.+16     	; 0x1af0 <udd_ep_alloc+0x48>
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	81 81       	ldd	r24, Z+1	; 0x01
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
	}

	udd_endpoint_set_multipacket(ep_ctrl);
    1ae4:	80 62       	ori	r24, 0x20	; 32
    1ae6:	81 83       	std	Z+1, r24	; 0x01
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <udd_ep_alloc+0x4a>
	return true;
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <udd_ep_alloc+0x4a>
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Already allocated
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	df 91       	pop	r29

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
			&& (udd_endpoint_get_size_field(ep_ctrl)
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
    1af4:	cf 91       	pop	r28
	}

	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}
    1af6:	1f 91       	pop	r17
    1af8:	0f 91       	pop	r16
    1afa:	ff 90       	pop	r15
    1afc:	ef 90       	pop	r14
    1afe:	08 95       	ret

00001b00 <udd_ep_is_halted>:
    1b00:	39 dc       	rcall	.-1934   	; 0x1374 <udd_ep_get_ctrl>
    1b02:	fc 01       	movw	r30, r24
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	return (udd_endpoint_is_stall(ep_ctrl));
    1b04:	91 81       	ldd	r25, Z+1	; 0x01
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	92 ff       	sbrs	r25, 2
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	08 95       	ret

00001b0e <udd_ep_clear_halt>:
}
    1b0e:	cf 93       	push	r28
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    1b10:	c8 2f       	mov	r28, r24
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    1b12:	30 dc       	rcall	.-1952   	; 0x1374 <udd_ep_get_ctrl>
    1b14:	fc 01       	movw	r30, r24
    1b16:	81 81       	ldd	r24, Z+1	; 0x01
	if (!udd_endpoint_is_stall(ep_ctrl)) {
    1b18:	82 ff       	sbrs	r24, 2
    1b1a:	0f c0       	rjmp	.+30     	; 0x1b3a <udd_ep_clear_halt+0x2c>
    1b1c:	81 81       	ldd	r24, Z+1	; 0x01
		return true; // No stall on going
	}
	udd_endpoint_disable_stall(ep_ctrl);
    1b1e:	8b 7f       	andi	r24, 0xFB	; 251
    1b20:	81 83       	std	Z+1, r24	; 0x01
    1b22:	8c 2f       	mov	r24, r28

	// If a job is register on clear halt action
	// then execute callback
	ptr_job = udd_ep_get_job(ep);
    1b24:	7f dd       	rcall	.-1282   	; 0x1624 <udd_ep_get_job>
    1b26:	fc 01       	movw	r30, r24
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 ff       	sbrs	r24, 0
	if (ptr_job->busy == true) {
    1b2c:	06 c0       	rjmp	.+12     	; 0x1b3a <udd_ep_clear_halt+0x2c>
    1b2e:	8e 7f       	andi	r24, 0xFE	; 254
    1b30:	80 83       	st	Z, r24
		ptr_job->busy = false;
    1b32:	07 80       	ldd	r0, Z+7	; 0x07
    1b34:	f0 85       	ldd	r31, Z+8	; 0x08
		ptr_job->call_nohalt();
    1b36:	e0 2d       	mov	r30, r0
    1b38:	09 95       	icall
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	cf 91       	pop	r28
	}
	return true;
}
    1b3e:	08 95       	ret

00001b40 <udd_ep_run>:
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf,
		iram_size_t buf_size, udd_callback_trans_t callback)
{
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	c8 2f       	mov	r28, r24
    1b5a:	d6 2f       	mov	r29, r22
    1b5c:	5a 01       	movw	r10, r20
    1b5e:	49 01       	movw	r8, r18
    1b60:	68 01       	movw	r12, r16
	UDD_EP_t *ep_ctrl;

	Assert(udd_ep_is_valid(ep));

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
    1b62:	60 dd       	rcall	.-1344   	; 0x1624 <udd_ep_get_job>
    1b64:	7c 01       	movw	r14, r24
    1b66:	8c 2f       	mov	r24, r28
	ep_ctrl = udd_ep_get_ctrl(ep);
    1b68:	05 dc       	rcall	.-2038   	; 0x1374 <udd_ep_get_ctrl>
    1b6a:	8c 01       	movw	r16, r24
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	81 81       	ldd	r24, Z+1	; 0x01

	if (!udd_endpoint_is_enable(ep_ctrl)) {
    1b70:	80 7c       	andi	r24, 0xC0	; 192
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <udd_ep_run+0x36>
    1b74:	51 c0       	rjmp	.+162    	; 0x1c18 <udd_ep_run+0xd8>
    1b76:	81 81       	ldd	r24, Z+1	; 0x01
    1b78:	80 7c       	andi	r24, 0xC0	; 192
		return false; // Endpoint not allocated
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
    1b7a:	80 3c       	cpi	r24, 0xC0	; 192
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <udd_ep_run+0x44>
    1b7e:	81 81       	ldd	r24, Z+1	; 0x01
    1b80:	82 fd       	sbrc	r24, 2
		&& udd_endpoint_is_stall(ep_ctrl)) {
    1b82:	4c c0       	rjmp	.+152    	; 0x1c1c <udd_ep_run+0xdc>
    1b84:	8f b7       	in	r24, 0x3f	; 63
    1b86:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b88:	f7 01       	movw	r30, r14
	cpu_irq_disable();
    1b8a:	90 81       	ld	r25, Z
		return false; // Endpoint is halted
	}
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    1b8c:	90 ff       	sbrs	r25, 0
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <udd_ep_run+0x56>
    1b90:	8f bf       	out	0x3f, r24	; 63
    1b92:	80 e0       	ldi	r24, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b94:	44 c0       	rjmp	.+136    	; 0x1c1e <udd_ep_run+0xde>
		cpu_irq_restore(flags);
		return false; // Job already on going
    1b96:	f7 01       	movw	r30, r14
    1b98:	90 81       	ld	r25, Z
	}
	ptr_job->busy = true;
    1b9a:	91 60       	ori	r25, 0x01	; 1
    1b9c:	90 83       	st	Z, r25
    1b9e:	8f bf       	out	0x3f, r24	; 63
    1ba0:	a1 82       	std	Z+1, r10	; 0x01
    1ba2:	b2 82       	std	Z+2, r11	; 0x02
	cpu_irq_restore(flags);


	// Update Job information
	ptr_job->buf = buf;
    1ba4:	83 82       	std	Z+3, r8	; 0x03
    1ba6:	94 82       	std	Z+4, r9	; 0x04
	ptr_job->buf_size = buf_size;
    1ba8:	15 82       	std	Z+5, r1	; 0x05
    1baa:	16 82       	std	Z+6, r1	; 0x06
	ptr_job->nb_trans = 0;
    1bac:	c7 82       	std	Z+7, r12	; 0x07
    1bae:	d0 86       	std	Z+8, r13	; 0x08
	ptr_job->call_trans = callback;
    1bb0:	dd 23       	and	r29, r29
    1bb2:	41 f4       	brne	.+16     	; 0x1bc4 <udd_ep_run+0x84>
	// Need to enable shortpacket to send a ZLP (buf_size==0)
	ptr_job->b_shortpacket = b_shortpacket || (buf_size==0);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	81 14       	cp	r8, r1
    1bba:	91 04       	cpc	r9, r1
    1bbc:	29 f0       	breq	.+10     	; 0x1bc8 <udd_ep_run+0x88>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <udd_ep_run+0x88>
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	81 70       	andi	r24, 0x01	; 1
    1bca:	88 0f       	add	r24, r24
    1bcc:	f7 01       	movw	r30, r14
    1bce:	90 81       	ld	r25, Z
    1bd0:	99 7f       	andi	r25, 0xF9	; 249
    1bd2:	89 2b       	or	r24, r25
    1bd4:	80 83       	st	Z, r24
	ptr_job->b_use_out_cache_buffer = false;
    1bd6:	cc 23       	and	r28, r28
    1bd8:	24 f4       	brge	.+8      	; 0x1be2 <udd_ep_run+0xa2>

	// Initialize value to simulate a empty transfer
	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    1bda:	f8 01       	movw	r30, r16
    1bdc:	16 82       	std	Z+6, r1	; 0x06
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
    1bde:	17 82       	std	Z+7, r1	; 0x07
    1be0:	17 c0       	rjmp	.+46     	; 0x1c10 <udd_ep_run+0xd0>
    1be2:	f8 01       	movw	r30, r16
    1be4:	81 81       	ldd	r24, Z+1	; 0x01
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
    1be6:	80 7c       	andi	r24, 0xC0	; 192
    1be8:	80 3c       	cpi	r24, 0xC0	; 192
    1bea:	69 f4       	brne	.+26     	; 0x1c06 <udd_ep_run+0xc6>
    1bec:	c8 01       	movw	r24, r16
    1bee:	e4 dc       	rcall	.-1592   	; 0x15b8 <udd_ep_get_size>
		&& (0 != (buf_size % udd_ep_get_size(ep_ctrl)))) {
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	c4 01       	movw	r24, r8
    1bf4:	4a d3       	rcall	.+1684   	; 0x228a <__udivmodhi4>
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	31 f0       	breq	.+12     	; 0x1c06 <udd_ep_run+0xc6>
    1bfa:	f7 01       	movw	r30, r14
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8e 7f       	andi	r24, 0xFE	; 254
    1c00:	80 83       	st	Z, r24
			// The user must use a buffer size modulo endpoint size
			ptr_job->busy = false;
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	0c c0       	rjmp	.+24     	; 0x1c1e <udd_ep_run+0xde>
    1c06:	f8 01       	movw	r30, r16
    1c08:	12 82       	std	Z+2, r1	; 0x02
			return false;
    1c0a:	13 82       	std	Z+3, r1	; 0x03
    1c0c:	16 82       	std	Z+6, r1	; 0x06
		}
		udd_endpoint_out_reset_nb_received(ep_ctrl);
    1c0e:	17 82       	std	Z+7, r1	; 0x07
    1c10:	8c 2f       	mov	r24, r28
    1c12:	91 dd       	rcall	.-1246   	; 0x1736 <udd_ep_trans_complet>
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <udd_ep_run+0xde>
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <udd_ep_run+0xde>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
	return true;
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Endpoint not allocated
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
		&& udd_endpoint_is_stall(ep_ctrl)) {
		return false; // Endpoint is halted
    1c26:	ff 90       	pop	r15
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
	return true;
}
    1c28:	ef 90       	pop	r14
    1c2a:	df 90       	pop	r13
    1c2c:	cf 90       	pop	r12
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	9f 90       	pop	r9
    1c34:	8f 90       	pop	r8
    1c36:	08 95       	ret

00001c38 <udd_ep_abort>:
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	cf 93       	push	r28
    1c40:	c8 2f       	mov	r28, r24
{
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    1c42:	98 db       	rcall	.-2256   	; 0x1374 <udd_ep_get_ctrl>
    1c44:	7c 01       	movw	r14, r24
    1c46:	8c 2f       	mov	r24, r28
	ptr_job = udd_ep_get_job(ep);
    1c48:	ed dc       	rcall	.-1574   	; 0x1624 <udd_ep_get_job>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	02 e0       	ldi	r16, 0x02	; 2

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    1c50:	05 93       	las	Z, r16
    1c52:	8c 91       	ld	r24, X
    1c54:	80 ff       	sbrs	r24, 0
	if (ptr_job->busy == false) {
    1c56:	17 c0       	rjmp	.+46     	; 0x1c86 <udd_ep_abort+0x4e>
    1c58:	8e 7f       	andi	r24, 0xFE	; 254
    1c5a:	8c 93       	st	X, r24
		return; // No job on going
	}
	ptr_job->busy = false;
    1c5c:	17 96       	adiw	r26, 0x07	; 7
    1c5e:	ed 91       	ld	r30, X+
	if (NULL != ptr_job->call_trans) {
    1c60:	fc 91       	ld	r31, X
    1c62:	18 97       	sbiw	r26, 0x08	; 8
    1c64:	30 97       	sbiw	r30, 0x00	; 0
    1c66:	79 f0       	breq	.+30     	; 0x1c86 <udd_ep_abort+0x4e>
    1c68:	cc 23       	and	r28, r28
    1c6a:	34 f4       	brge	.+12     	; 0x1c78 <udd_ep_abort+0x40>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    1c6c:	d7 01       	movw	r26, r14
    1c6e:	16 96       	adiw	r26, 0x06	; 6
    1c70:	6d 91       	ld	r22, X+
    1c72:	7c 91       	ld	r23, X
    1c74:	17 97       	sbiw	r26, 0x07	; 7
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <udd_ep_abort+0x4a>
    1c78:	d7 01       	movw	r26, r14
    1c7a:	12 96       	adiw	r26, 0x02	; 2
    1c7c:	6d 91       	ld	r22, X+
    1c7e:	7c 91       	ld	r23, X
    1c80:	13 97       	sbiw	r26, 0x03	; 3
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	09 95       	icall
    1c86:	cf 91       	pop	r28
    1c88:	0f 91       	pop	r16
				(ep & USB_EP_DIR_IN) ?
				udd_endpoint_in_nb_sent(ep_ctrl)
				: udd_endpoint_out_nb_receiv(ep_ctrl));
	}
}
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	08 95       	ret

00001c90 <udd_ep_set_halt>:
    1c90:	0f 93       	push	r16
    1c92:	cf 93       	push	r28
	ep_ctrl = udd_ep_get_ctrl(ep);
	return (udd_endpoint_is_stall(ep_ctrl));
}

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    1c94:	c8 2f       	mov	r28, r24
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    1c96:	6e db       	rcall	.-2340   	; 0x1374 <udd_ep_get_ctrl>
    1c98:	fc 01       	movw	r30, r24
    1c9a:	81 81       	ldd	r24, Z+1	; 0x01
	udd_endpoint_enable_stall(ep_ctrl);
    1c9c:	84 60       	ori	r24, 0x04	; 4
    1c9e:	81 83       	std	Z+1, r24	; 0x01
    1ca0:	01 e0       	ldi	r16, 0x01	; 1
	udd_endpoint_clear_dtgl(ep_ctrl);
    1ca2:	06 93       	lac	Z, r16
    1ca4:	8c 2f       	mov	r24, r28

	udd_ep_abort(ep);
    1ca6:	c8 df       	rcall	.-112    	; 0x1c38 <udd_ep_abort>
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	cf 91       	pop	r28
	return true;
}
    1cac:	0f 91       	pop	r16
    1cae:	08 95       	ret

00001cb0 <udd_ep_free>:
    1cb0:	cf 93       	push	r28
    1cb2:	c8 2f       	mov	r28, r24
void udd_ep_free(udd_ep_id_t ep)
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
    1cb4:	c1 df       	rcall	.-126    	; 0x1c38 <udd_ep_abort>
    1cb6:	8c 2f       	mov	r24, r28
	ep_ctrl = udd_ep_get_ctrl(ep);
    1cb8:	5d db       	rcall	.-2374   	; 0x1374 <udd_ep_get_ctrl>
    1cba:	fc 01       	movw	r30, r24
    1cbc:	11 82       	std	Z+1, r1	; 0x01
	udd_endpoint_disable(ep_ctrl);
    1cbe:	cf 91       	pop	r28
    1cc0:	08 95       	ret

00001cc2 <__vector_125>:
}
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	0f 93       	push	r16
    1cce:	2f 93       	push	r18
    1cd0:	3f 93       	push	r19
    1cd2:	4f 93       	push	r20
    1cd4:	5f 93       	push	r21
    1cd6:	6f 93       	push	r22
    1cd8:	7f 93       	push	r23
    1cda:	8f 93       	push	r24
    1cdc:	9f 93       	push	r25
    1cde:	af 93       	push	r26
    1ce0:	bf 93       	push	r27
    1ce2:	ef 93       	push	r30
    1ce4:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1ce6:	80 91 cb 04 	lds	r24, 0x04CB
    1cea:	88 23       	and	r24, r24
    1cec:	34 f4       	brge	.+12     	; 0x1cfa <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    1cee:	80 e8       	ldi	r24, 0x80	; 128
    1cf0:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1cf4:	37 d8       	rcall	.-3986   	; 0xd64 <udc_sof_notify>
    1cf6:	c0 d1       	rcall	.+896    	; 0x2078 <main_sof_action>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    1cf8:	84 c0       	rjmp	.+264    	; 0x1e02 <__vector_125+0x140>
    1cfa:	80 91 cb 04 	lds	r24, 0x04CB
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1cfe:	82 ff       	sbrs	r24, 2
    1d00:	20 c0       	rjmp	.+64     	; 0x1d42 <__vector_125+0x80>
    1d02:	84 e0       	ldi	r24, 0x04	; 4
    1d04:	80 93 ca 04 	sts	0x04CA, r24
		udd_ack_underflow_event();
    1d08:	80 91 fc 25 	lds	r24, 0x25FC
		if (udd_control_in_underflow()) {
    1d0c:	86 ff       	sbrs	r24, 6
    1d0e:	79 c0       	rjmp	.+242    	; 0x1e02 <__vector_125+0x140>
    1d10:	80 91 cc 04 	lds	r24, 0x04CC
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1d14:	81 fd       	sbrc	r24, 1
    1d16:	75 c0       	rjmp	.+234    	; 0x1e02 <__vector_125+0x140>
    1d18:	a1 dc       	rcall	.-1726   	; 0x165c <udd_ctrl_interrupt_tc_setup>
    1d1a:	88 23       	and	r24, r24
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <__vector_125+0x5e>
    1d1e:	71 c0       	rjmp	.+226    	; 0x1e02 <__vector_125+0x140>
    1d20:	80 91 6f 27 	lds	r24, 0x276F
    1d24:	81 30       	cpi	r24, 0x01	; 1
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1d26:	11 f4       	brne	.+4      	; 0x1d2c <__vector_125+0x6a>
    1d28:	bf db       	rcall	.-2178   	; 0x14a8 <udd_ctrl_send_zlp_in>
    1d2a:	6b c0       	rjmp	.+214    	; 0x1e02 <__vector_125+0x140>
    1d2c:	84 30       	cpi	r24, 0x04	; 4
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <__vector_125+0x70>
    1d30:	68 c0       	rjmp	.+208    	; 0x1e02 <__vector_125+0x140>
    1d32:	ed ef       	ldi	r30, 0xFD	; 253
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1d34:	f5 e2       	ldi	r31, 0x25	; 37
    1d36:	04 e0       	ldi	r16, 0x04	; 4
    1d38:	05 93       	las	Z, r16
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1d3a:	38 97       	sbiw	r30, 0x08	; 8
    1d3c:	04 e0       	ldi	r16, 0x04	; 4
    1d3e:	05 93       	las	Z, r16
    1d40:	60 c0       	rjmp	.+192    	; 0x1e02 <__vector_125+0x140>
		udd_control_out_enable_stall();
    1d42:	80 91 cb 04 	lds	r24, 0x04CB
    1d46:	81 ff       	sbrs	r24, 1
    1d48:	57 c0       	rjmp	.+174    	; 0x1df8 <__vector_125+0x136>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	80 93 ca 04 	sts	0x04CA, r24
    1d50:	80 91 f4 25 	lds	r24, 0x25F4
		udd_ack_overflow_event();
    1d54:	86 ff       	sbrs	r24, 6
    1d56:	55 c0       	rjmp	.+170    	; 0x1e02 <__vector_125+0x140>
		if (udd_control_out_overflow()) {
    1d58:	80 91 cc 04 	lds	r24, 0x04CC
    1d5c:	81 fd       	sbrc	r24, 1
    1d5e:	51 c0       	rjmp	.+162    	; 0x1e02 <__vector_125+0x140>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1d60:	7d dc       	rcall	.-1798   	; 0x165c <udd_ctrl_interrupt_tc_setup>
    1d62:	88 23       	and	r24, r24
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <__vector_125+0xa6>
    1d66:	4d c0       	rjmp	.+154    	; 0x1e02 <__vector_125+0x140>
    1d68:	80 91 6f 27 	lds	r24, 0x276F
    1d6c:	82 30       	cpi	r24, 0x02	; 2
    1d6e:	11 f4       	brne	.+4      	; 0x1d74 <__vector_125+0xb2>
    1d70:	a9 db       	rcall	.-2222   	; 0x14c4 <udd_ctrl_send_zlp_out>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1d72:	47 c0       	rjmp	.+142    	; 0x1e02 <__vector_125+0x140>
    1d74:	83 30       	cpi	r24, 0x03	; 3
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <__vector_125+0xb8>
    1d78:	44 c0       	rjmp	.+136    	; 0x1e02 <__vector_125+0x140>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
    1d7a:	ed ef       	ldi	r30, 0xFD	; 253
    1d7c:	f5 e2       	ldi	r31, 0x25	; 37
    1d7e:	04 e0       	ldi	r16, 0x04	; 4
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1d80:	05 93       	las	Z, r16
    1d82:	38 97       	sbiw	r30, 0x08	; 8
    1d84:	04 e0       	ldi	r16, 0x04	; 4
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1d86:	05 93       	las	Z, r16
    1d88:	3c c0       	rjmp	.+120    	; 0x1e02 <__vector_125+0x140>
    1d8a:	80 e1       	ldi	r24, 0x10	; 16
    1d8c:	80 93 ca 04 	sts	0x04CA, r24
		udd_control_out_enable_stall();
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	52 df       	rcall	.-348    	; 0x1c38 <udd_ep_abort>
    1d94:	81 e8       	ldi	r24, 0x81	; 129

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1d96:	50 df       	rcall	.-352    	; 0x1c38 <udd_ep_abort>
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	4e df       	rcall	.-356    	; 0x1c38 <udd_ep_abort>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1d9c:	82 e8       	ldi	r24, 0x82	; 130
    1d9e:	4c df       	rcall	.-360    	; 0x1c38 <udd_ep_abort>
    1da0:	0e 94 8b 06 	call	0xd16	; 0xd16 <udc_reset>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1da4:	10 92 c3 04 	sts	0x04C3, r1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	40 e4       	ldi	r20, 0x40	; 64
			udd_ep_abort(i | USB_EP_DIR_IN);
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	fb da       	rcall	.-2570   	; 0x13a8 <udd_ep_init>
    1db2:	80 e8       	ldi	r24, 0x80	; 128
		}
#endif
		udc_reset();
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	40 e4       	ldi	r20, 0x40	; 64

		// Reset USB address to 0
		udd_set_device_address(0);
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	f6 da       	rcall	.-2580   	; 0x13a8 <udd_ep_init>
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
    1dbc:	8f e2       	ldi	r24, 0x2F	; 47
    1dbe:	97 e2       	ldi	r25, 0x27	; 39
    1dc0:	80 93 f8 25 	sts	0x25F8, r24
    1dc4:	90 93 f9 25 	sts	0x25F9, r25
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
    1dc8:	38 db       	rcall	.-2448   	; 0x143a <udd_ctrl_init>
    1dca:	1b c0       	rjmp	.+54     	; 0x1e02 <__vector_125+0x140>
    1dcc:	80 91 cb 04 	lds	r24, 0x04CB
    1dd0:	86 ff       	sbrs	r24, 6
    1dd2:	07 c0       	rjmp	.+14     	; 0x1de2 <__vector_125+0x120>
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1dd4:	80 e4       	ldi	r24, 0x40	; 64
    1dd6:	80 93 ca 04 	sts	0x04CA, r24
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	ad da       	rcall	.-2726   	; 0x1338 <udd_sleep_mode>
    1dde:	46 d1       	rcall	.+652    	; 0x206c <main_suspend_action>
		// Reset endpoint control management
		udd_ctrl_init();
    1de0:	10 c0       	rjmp	.+32     	; 0x1e02 <__vector_125+0x140>
    1de2:	80 91 cb 04 	lds	r24, 0x04CB
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    1de6:	85 ff       	sbrs	r24, 5
    1de8:	0c c0       	rjmp	.+24     	; 0x1e02 <__vector_125+0x140>
    1dea:	80 e2       	ldi	r24, 0x20	; 32
    1dec:	80 93 ca 04 	sts	0x04CA, r24
		udd_ack_suspend_event();
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	a2 da       	rcall	.-2748   	; 0x1338 <udd_sleep_mode>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1df4:	3e d1       	rcall	.+636    	; 0x2072 <main_resume_action>
    1df6:	05 c0       	rjmp	.+10     	; 0x1e02 <__vector_125+0x140>
    1df8:	80 91 cb 04 	lds	r24, 0x04CB
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    1dfc:	84 fd       	sbrc	r24, 4
#endif
		goto udd_interrupt_bus_event_end;
    1dfe:	c5 cf       	rjmp	.-118    	; 0x1d8a <__vector_125+0xc8>
	}

	if (udd_is_resume_event()) {
    1e00:	e5 cf       	rjmp	.-54     	; 0x1dcc <__vector_125+0x10a>
    1e02:	ff 91       	pop	r31
    1e04:	ef 91       	pop	r30
    1e06:	bf 91       	pop	r27
		udd_ack_resume_event();
    1e08:	af 91       	pop	r26
    1e0a:	9f 91       	pop	r25
    1e0c:	8f 91       	pop	r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1e0e:	7f 91       	pop	r23
    1e10:	6f 91       	pop	r22
    1e12:	5f 91       	pop	r21
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    1e14:	4f 91       	pop	r20
    1e16:	3f 91       	pop	r19
#endif
		goto udd_interrupt_bus_event_end;
    1e18:	2f 91       	pop	r18
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1e1a:	0f 91       	pop	r16
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	0f 90       	pop	r0
    1e22:	1f 90       	pop	r1
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1e24:	18 95       	reti

00001e26 <__vector_126>:
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	2f 93       	push	r18
    1e36:	3f 93       	push	r19
    1e38:	4f 93       	push	r20
    1e3a:	5f 93       	push	r21
    1e3c:	6f 93       	push	r22
    1e3e:	7f 93       	push	r23
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
 * \brief Function called by USB transfer complet interrupt
 *
 * USB transfer complet interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	ef 93       	push	r30
    1e4e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1e50:	80 91 cc 04 	lds	r24, 0x04CC
    1e54:	81 fd       	sbrc	r24, 1
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <__vector_126+0x3a>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1e58:	01 dc       	rcall	.-2046   	; 0x165c <udd_ctrl_interrupt_tc_setup>
    1e5a:	88 23       	and	r24, r24
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <__vector_126+0x3a>
    1e5e:	a8 c0       	rjmp	.+336    	; 0x1fb0 <__vector_126+0x18a>
    1e60:	82 e0       	ldi	r24, 0x02	; 2
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complet on all endpoints
	udd_ack_tc_event();
    1e62:	80 93 cc 04 	sts	0x04CC, r24
    1e66:	80 91 c5 04 	lds	r24, 0x04C5

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1e6a:	81 95       	neg	r24
	i_fifo = 2 * (1 + ~rp);
    1e6c:	88 0f       	add	r24, r24
    1e6e:	e4 ef       	ldi	r30, 0xF4	; 244
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1e70:	f5 e2       	ldi	r31, 0x25	; 37
    1e72:	e8 1b       	sub	r30, r24
    1e74:	f1 09       	sbc	r31, r1
    1e76:	80 81       	ld	r24, Z
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	84 5f       	subi	r24, 0xF4	; 244
    1e7c:	95 42       	sbci	r25, 0x25	; 37
    1e7e:	96 95       	lsr	r25
    1e80:	87 95       	ror	r24
    1e82:	96 95       	lsr	r25
    1e84:	87 95       	ror	r24
    1e86:	96 95       	lsr	r25
    1e88:	87 95       	ror	r24
    1e8a:	98 2f       	mov	r25, r24
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1e8c:	96 95       	lsr	r25
    1e8e:	80 ff       	sbrs	r24, 0
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <__vector_126+0x70>
    1e92:	c0 e8       	ldi	r28, 0x80	; 128
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <__vector_126+0x72>
    1e96:	c0 e0       	ldi	r28, 0x00	; 0
    1e98:	c9 0f       	add	r28, r25
    1e9a:	8c 2f       	mov	r24, r28
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1e9c:	6b da       	rcall	.-2858   	; 0x1374 <udd_ep_get_ctrl>
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	80 81       	ld	r24, Z
    1ea2:	85 ff       	sbrs	r24, 5
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1ea4:	85 c0       	rjmp	.+266    	; 0x1fb0 <__vector_126+0x18a>
    1ea6:	00 e2       	ldi	r16, 0x20	; 32
    1ea8:	06 93       	lac	Z, r16
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1eaa:	cc 23       	and	r28, r28
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <__vector_126+0x8a>

	// Check status on control endpoint
	if (ep == 0) {
    1eae:	7a c0       	rjmp	.+244    	; 0x1fa4 <__vector_126+0x17e>
    1eb0:	80 91 6f 27 	lds	r24, 0x276F

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1eb4:	84 30       	cpi	r24, 0x04	; 4
    1eb6:	19 f4       	brne	.+6      	; 0x1ebe <__vector_126+0x98>
    1eb8:	0f db       	rcall	.-2530   	; 0x14d8 <udd_ctrl_endofrequest>
    1eba:	bf da       	rcall	.-2690   	; 0x143a <udd_ctrl_init>
		// Valids end of setup request
		udd_ctrl_endofrequest();
    1ebc:	79 c0       	rjmp	.+242    	; 0x1fb0 <__vector_126+0x18a>
    1ebe:	c0 91 f6 25 	lds	r28, 0x25F6
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1ec2:	d0 91 f7 25 	lds	r29, 0x25F7
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1ec6:	80 91 86 27 	lds	r24, 0x2786
    1eca:	90 91 87 27 	lds	r25, 0x2787

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1ece:	00 91 72 27 	lds	r16, 0x2772
    1ed2:	10 91 73 27 	lds	r17, 0x2773
    1ed6:	98 01       	movw	r18, r16
    1ed8:	2c 0f       	add	r18, r28
    1eda:	3d 1f       	adc	r19, r29
    1edc:	82 17       	cp	r24, r18
    1ede:	93 07       	cpc	r25, r19
    1ee0:	18 f4       	brcc	.+6      	; 0x1ee8 <__vector_126+0xc2>
    1ee2:	ec 01       	movw	r28, r24
    1ee4:	c0 1b       	sub	r28, r16
    1ee6:	d1 0b       	sbc	r29, r17
    1ee8:	80 91 84 27 	lds	r24, 0x2784
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1eec:	90 91 85 27 	lds	r25, 0x2785
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1ef0:	80 0f       	add	r24, r16
    1ef2:	91 1f       	adc	r25, r17
    1ef4:	6f e2       	ldi	r22, 0x2F	; 47
    1ef6:	77 e2       	ldi	r23, 0x27	; 39
    1ef8:	4c 2f       	mov	r20, r28
    1efa:	5d 2f       	mov	r21, r29
    1efc:	fc d1       	rcall	.+1016   	; 0x22f6 <memcpy>
    1efe:	ce 01       	movw	r24, r28
    1f00:	80 0f       	add	r24, r16
    1f02:	91 1f       	adc	r25, r17
    1f04:	80 93 72 27 	sts	0x2772, r24
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1f08:	90 93 73 27 	sts	0x2773, r25
    1f0c:	c0 34       	cpi	r28, 0x40	; 64
    1f0e:	d1 05       	cpc	r29, r1
    1f10:	69 f4       	brne	.+26     	; 0x1f2c <__vector_126+0x106>
    1f12:	20 91 70 27 	lds	r18, 0x2770

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1f16:	30 91 71 27 	lds	r19, 0x2771
    1f1a:	28 0f       	add	r18, r24
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1f1c:	39 1f       	adc	r19, r25
    1f1e:	40 91 82 27 	lds	r20, 0x2782
    1f22:	50 91 83 27 	lds	r21, 0x2783
    1f26:	24 17       	cp	r18, r20

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1f28:	35 07       	cpc	r19, r21
    1f2a:	88 f0       	brcs	.+34     	; 0x1f4e <__vector_126+0x128>
    1f2c:	80 93 86 27 	sts	0x2786, r24
    1f30:	90 93 87 27 	sts	0x2787, r25
    1f34:	e0 91 8a 27 	lds	r30, 0x278A
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1f38:	f0 91 8b 27 	lds	r31, 0x278B
    1f3c:	30 97       	sbiw	r30, 0x00	; 0
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <__vector_126+0x124>
    1f40:	09 95       	icall
    1f42:	88 23       	and	r24, r24
    1f44:	11 f4       	brne	.+4      	; 0x1f4a <__vector_126+0x124>
    1f46:	a3 da       	rcall	.-2746   	; 0x148e <udd_ctrl_stall_data>
    1f48:	33 c0       	rjmp	.+102    	; 0x1fb0 <__vector_126+0x18a>
			if (!udd_g_ctrlreq.over_under_run()) {
    1f4a:	ae da       	rcall	.-2724   	; 0x14a8 <udd_ctrl_send_zlp_in>
    1f4c:	31 c0       	rjmp	.+98     	; 0x1fb0 <__vector_126+0x18a>
    1f4e:	20 91 86 27 	lds	r18, 0x2786
				// Stall ZLP
				udd_ctrl_stall_data();
    1f52:	30 91 87 27 	lds	r19, 0x2787
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1f56:	82 17       	cp	r24, r18
    1f58:	93 07       	cpc	r25, r19
    1f5a:	f9 f4       	brne	.+62     	; 0x1f9a <__vector_126+0x174>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1f5c:	e0 91 8a 27 	lds	r30, 0x278A
    1f60:	f0 91 8b 27 	lds	r31, 0x278B
    1f64:	30 97       	sbiw	r30, 0x00	; 0
    1f66:	11 f4       	brne	.+4      	; 0x1f6c <__vector_126+0x146>
    1f68:	92 da       	rcall	.-2780   	; 0x148e <udd_ctrl_stall_data>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1f6a:	22 c0       	rjmp	.+68     	; 0x1fb0 <__vector_126+0x18a>
    1f6c:	09 95       	icall
    1f6e:	88 23       	and	r24, r24
    1f70:	11 f4       	brne	.+4      	; 0x1f76 <__vector_126+0x150>
    1f72:	8d da       	rcall	.-2790   	; 0x148e <udd_ctrl_stall_data>
    1f74:	1d c0       	rjmp	.+58     	; 0x1fb0 <__vector_126+0x18a>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
    1f76:	80 91 70 27 	lds	r24, 0x2770
    1f7a:	90 91 71 27 	lds	r25, 0x2771
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1f7e:	20 91 72 27 	lds	r18, 0x2772
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1f82:	30 91 73 27 	lds	r19, 0x2773
    1f86:	82 0f       	add	r24, r18
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1f88:	93 1f       	adc	r25, r19
    1f8a:	80 93 70 27 	sts	0x2770, r24
    1f8e:	90 93 71 27 	sts	0x2771, r25
    1f92:	10 92 72 27 	sts	0x2772, r1
    1f96:	10 92 73 27 	sts	0x2773, r1
    1f9a:	e4 ef       	ldi	r30, 0xF4	; 244
    1f9c:	f5 e2       	ldi	r31, 0x25	; 37
    1f9e:	02 e0       	ldi	r16, 0x02	; 2
    1fa0:	06 93       	lac	Z, r16
    1fa2:	06 c0       	rjmp	.+12     	; 0x1fb0 <__vector_126+0x18a>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1fa4:	c0 38       	cpi	r28, 0x80	; 128
    1fa6:	11 f4       	brne	.+4      	; 0x1fac <__vector_126+0x186>
    1fa8:	9f da       	rcall	.-2754   	; 0x14e8 <udd_ctrl_in_sent>
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <__vector_126+0x18a>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1fac:	8c 2f       	mov	r24, r28
    1fae:	c3 db       	rcall	.-2170   	; 0x1736 <udd_ep_trans_complet>
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	df 91       	pop	r29
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1fb6:	cf 91       	pop	r28
    1fb8:	bf 91       	pop	r27
		udd_ctrl_in_sent();
    1fba:	af 91       	pop	r26
    1fbc:	9f 91       	pop	r25
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1fbe:	8f 91       	pop	r24
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfert on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1fc0:	7f 91       	pop	r23
    1fc2:	6f 91       	pop	r22
    1fc4:	5f 91       	pop	r21
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1fc6:	4f 91       	pop	r20
    1fc8:	3f 91       	pop	r19
    1fca:	2f 91       	pop	r18
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <main_vbus_action>:
	}
}

void main_vbus_action(bool b_high)
{
	if (b_high) {
    1fda:	88 23       	and	r24, r24
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <main_vbus_action+0x6>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    1fde:	22 cd       	rjmp	.-1468   	; 0x1a24 <udd_attach>
    1fe0:	44 cd       	rjmp	.-1400   	; 0x1a6a <udd_detach>

00001fe2 <main>:
    1fe2:	87 e0       	ldi	r24, 0x07	; 7
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
    1fe4:	e0 ea       	ldi	r30, 0xA0	; 160
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	82 83       	std	Z+2, r24	; 0x02
/*! \brief Main function. Execution starts here.
 */
int main(void)
{
	irq_initialize_vectors();
	cpu_irq_enable();
    1fea:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1fec:	10 92 76 27 	sts	0x2776, r1
    1ff0:	10 92 77 27 	sts	0x2777, r1
    1ff4:	10 92 78 27 	sts	0x2778, r1
    1ff8:	10 92 79 27 	sts	0x2779, r1
    1ffc:	10 92 7a 27 	sts	0x277A, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 7b 27 	sts	0x277B, r24

	// Initialize the sleep manager
	sleepmgr_init();

	sysclk_init();
    2006:	0e 94 1f 01 	call	0x23e	; 0x23e <sysclk_init>
	board_init();
    200a:	3e d9       	rcall	.-3460   	; 0x1288 <board_init>
    200c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ui_init>
	ui_init();
    2010:	0e 94 0f 02 	call	0x41e	; 0x41e <ui_powerdown>
	ui_powerdown();
    2014:	0e 94 89 06 	call	0xd12	; 0xd12 <udc_start>

	// Start USB stack to authorize VBus monitoring
	udc_start();
    2018:	03 dd       	rcall	.-1530   	; 0x1a20 <udd_include_vbus_monitoring>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
    201a:	88 23       	and	r24, r24
    201c:	11 f4       	brne	.+4      	; 0x2022 <main+0x40>

	if (!udc_include_vbus_monitoring()) {
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	dc df       	rcall	.-72     	; 0x1fda <main_vbus_action>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
    2022:	c6 e7       	ldi	r28, 0x76	; 118
    2024:	d7 e2       	ldi	r29, 0x27	; 39
    2026:	87 e7       	ldi	r24, 0x77	; 119

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2028:	97 e2       	ldi	r25, 0x27	; 39
    202a:	a8 e4       	ldi	r26, 0x48	; 72
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	f8 94       	cli
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    2030:	28 81       	ld	r18, Y
    2032:	22 23       	and	r18, r18
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2034:	39 f4       	brne	.+14     	; 0x2044 <main+0x62>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2036:	fc 01       	movw	r30, r24
    2038:	2f 5f       	subi	r18, 0xFF	; 255
    203a:	31 91       	ld	r19, Z+
    203c:	33 23       	and	r19, r19
		lock_ptr++;
		sleep_mode++;
    203e:	e1 f3       	breq	.-8      	; 0x2038 <main+0x56>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2040:	22 23       	and	r18, r18
    2042:	11 f4       	brne	.+4      	; 0x2048 <main+0x66>
    2044:	78 94       	sei
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2046:	f3 cf       	rjmp	.-26     	; 0x202e <main+0x4c>
    2048:	e2 2f       	mov	r30, r18
		cpu_irq_enable();
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	e5 50       	subi	r30, 0x05	; 5

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(PROGMEM_READ_BYTE(&sleepmgr_configs[sleep_mode-1]));
    204e:	fe 4f       	sbci	r31, 0xFE	; 254
    2050:	e4 91       	lpm	r30, Z
    2052:	2c 91       	ld	r18, X
    2054:	21 7f       	andi	r18, 0xF1	; 241
    2056:	e2 2b       	or	r30, r18
    2058:	ec 93       	st	X, r30
    205a:	2c 91       	ld	r18, X
    205c:	21 60       	ori	r18, 0x01	; 1
    205e:	2c 93       	st	X, r18
	sleep_enable();
    2060:	78 94       	sei
    2062:	88 95       	sleep
    2064:	2c 91       	ld	r18, X

	cpu_irq_enable();
    2066:	2e 7f       	andi	r18, 0xFE	; 254
	sleep_enter();
    2068:	2c 93       	st	X, r18

	sleep_disable();
    206a:	e1 cf       	rjmp	.-62     	; 0x202e <main+0x4c>

0000206c <main_suspend_action>:
    206c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <ui_powerdown>
    2070:	08 95       	ret

00002072 <main_resume_action>:
	ui_powerdown();
}

void main_resume_action(void)
{
	ui_wakeup();
    2072:	0c 94 20 02 	jmp	0x440	; 0x440 <ui_wakeup>
}
    2076:	08 95       	ret

00002078 <main_sof_action>:

void main_sof_action(void)
{
	if (!main_b_cdc_enable)
    2078:	80 91 75 27 	lds	r24, 0x2775
    207c:	88 23       	and	r24, r24
    207e:	19 f0       	breq	.+6      	; 0x2086 <main_sof_action+0xe>
		return;
	ui_process(udd_get_frame_number());
    2080:	02 dd       	rcall	.-1532   	; 0x1a86 <udd_get_frame_number>
    2082:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <ui_process>
    2086:	08 95       	ret

00002088 <main_cdc_enable>:
    2088:	81 e0       	ldi	r24, 0x01	; 1
}

bool main_cdc_enable(void)
{
	main_b_cdc_enable = true;
    208a:	80 93 75 27 	sts	0x2775, r24
	// Open communication
	uart_open();
    208e:	68 d0       	rcall	.+208    	; 0x2160 <uart_open>
    2090:	81 e0       	ldi	r24, 0x01	; 1
	return true;
}
    2092:	08 95       	ret

00002094 <main_cdc_disable>:
    2094:	10 92 75 27 	sts	0x2775, r1

void main_cdc_disable(void)
{
	main_b_cdc_enable = false;
	// Close communication
	uart_close();
    2098:	74 c0       	rjmp	.+232    	; 0x2182 <uart_close>

0000209a <main_cdc_set_dtr>:
    209a:	88 23       	and	r24, r24
}
    209c:	11 f0       	breq	.+4      	; 0x20a2 <main_cdc_set_dtr+0x8>

void main_cdc_set_dtr(bool b_enable)
{
	if (b_enable) {
		// Host terminal has open COM
		ui_com_open();
    209e:	0c 94 25 02 	jmp	0x44a	; 0x44a <ui_com_open>
    20a2:	0c 94 2a 02 	jmp	0x454	; 0x454 <ui_com_close>

000020a6 <uart_config>:
#include "main.h"
#include "ui.h"
#include "udi_cdc.h"

void uart_config(usb_cdc_line_coding_t * cfg)
{
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	ec 01       	movw	r28, r24
	uint8_t reg_ctrlc;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;

	switch (cfg->bCharFormat) {
    20b2:	8c 81       	ldd	r24, Y+4	; 0x04
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	11 f0       	breq	.+4      	; 0x20bc <uart_config+0x16>

void uart_config(usb_cdc_line_coding_t * cfg)
{
	uint8_t reg_ctrlc;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;
    20b8:	10 e0       	ldi	r17, 0x00	; 0
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <uart_config+0x18>

	switch (cfg->bCharFormat) {
	case CDC_STOP_BITS_2:
		reg_ctrlc |= USART_SBMODE_bm;
    20bc:	18 e0       	ldi	r17, 0x08	; 8
	default:
		// Default stop bit = 1 stop bit
		break;
	}

	switch (cfg->bParityType) {
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	21 f0       	breq	.+8      	; 0x20cc <uart_config+0x26>
    20c4:	82 30       	cpi	r24, 0x02	; 2
    20c6:	19 f4       	brne	.+6      	; 0x20ce <uart_config+0x28>
	case CDC_PAR_EVEN:
		reg_ctrlc |= USART_PMODE_EVEN_gc;
    20c8:	10 62       	ori	r17, 0x20	; 32
		break;
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <uart_config+0x28>
	case CDC_PAR_ODD:
		reg_ctrlc |= USART_PMODE_ODD_gc;
    20cc:	10 63       	ori	r17, 0x30	; 48
	case CDC_PAR_NONE:
		reg_ctrlc |= USART_PMODE_DISABLED_gc;
		break;
	}

	switch (cfg->bDataBits) {
    20ce:	8e 81       	ldd	r24, Y+6	; 0x06
    20d0:	86 30       	cpi	r24, 0x06	; 6
    20d2:	51 f0       	breq	.+20     	; 0x20e8 <uart_config+0x42>
    20d4:	87 30       	cpi	r24, 0x07	; 7
    20d6:	18 f4       	brcc	.+6      	; 0x20de <uart_config+0x38>
    20d8:	85 30       	cpi	r24, 0x05	; 5
    20da:	51 f4       	brne	.+20     	; 0x20f0 <uart_config+0x4a>
    20dc:	0c c0       	rjmp	.+24     	; 0x20f6 <uart_config+0x50>
    20de:	87 30       	cpi	r24, 0x07	; 7
    20e0:	29 f0       	breq	.+10     	; 0x20ec <uart_config+0x46>
    20e2:	89 30       	cpi	r24, 0x09	; 9
    20e4:	29 f4       	brne	.+10     	; 0x20f0 <uart_config+0x4a>
    20e6:	06 c0       	rjmp	.+12     	; 0x20f4 <uart_config+0x4e>
	case 5:
		reg_ctrlc |= USART_CHSIZE_5BIT_gc;
		break;
	case 6:
		reg_ctrlc |= USART_CHSIZE_6BIT_gc;
    20e8:	11 60       	ori	r17, 0x01	; 1
		break;
    20ea:	05 c0       	rjmp	.+10     	; 0x20f6 <uart_config+0x50>
	case 7:
		reg_ctrlc |= USART_CHSIZE_7BIT_gc;
    20ec:	12 60       	ori	r17, 0x02	; 2
		break;
    20ee:	03 c0       	rjmp	.+6      	; 0x20f6 <uart_config+0x50>
	default:
	case 8:
		reg_ctrlc |= USART_CHSIZE_8BIT_gc;
    20f0:	13 60       	ori	r17, 0x03	; 3
		break;
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <uart_config+0x50>
	case 9:
		reg_ctrlc |= USART_CHSIZE_9BIT_gc;
    20f4:	17 60       	ori	r17, 0x07	; 7
		break;
	}

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	60 e1       	ldi	r22, 0x10	; 16
    20fa:	0e 94 8c 01 	call	0x318	; 0x318 <sysclk_enable_module>
	// Set configuration
	USART.CTRLC = reg_ctrlc;
    20fe:	0f 2e       	mov	r0, r31
    2100:	f0 ea       	ldi	r31, 0xA0	; 160
    2102:	ef 2e       	mov	r14, r31
    2104:	f8 e0       	ldi	r31, 0x08	; 8
    2106:	ff 2e       	mov	r15, r31
    2108:	f0 2d       	mov	r31, r0
    210a:	f7 01       	movw	r30, r14
    210c:	15 83       	std	Z+5, r17	; 0x05
	// Update baudrate
	USART.BAUDCTRLA = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1)
			/ ((uint32_t) le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    210e:	88 81       	ld	r24, Y
    2110:	99 81       	ldd	r25, Y+1	; 0x01
    2112:	aa 81       	ldd	r26, Y+2	; 0x02
    2114:	bb 81       	ldd	r27, Y+3	; 0x03
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	aa 1f       	adc	r26, r26
    211c:	bb 1f       	adc	r27, r27
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	aa 1f       	adc	r26, r26
    2124:	bb 1f       	adc	r27, r27
    2126:	9c 01       	movw	r18, r24
    2128:	ad 01       	movw	r20, r26
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	44 1f       	adc	r20, r20
    2130:	55 1f       	adc	r21, r21
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	7c e6       	ldi	r23, 0x6C	; 108
    2136:	8c ed       	ldi	r24, 0xDC	; 220
    2138:	92 e0       	ldi	r25, 0x02	; 2
    213a:	bb d0       	rcall	.+374    	; 0x22b2 <__udivmodsi4>
    213c:	da 01       	movw	r26, r20
    213e:	c9 01       	movw	r24, r18
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	a1 1d       	adc	r26, r1
    2144:	b1 1d       	adc	r27, r1
    2146:	b6 95       	lsr	r27
    2148:	a7 95       	ror	r26
    214a:	97 95       	ror	r25
    214c:	87 95       	ror	r24
    214e:	81 50       	subi	r24, 0x01	; 1

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	USART.BAUDCTRLA = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1)
    2150:	f7 01       	movw	r30, r14
    2152:	86 83       	std	Z+6, r24	; 0x06
    2154:	df 91       	pop	r29
			/ ((uint32_t) le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
}
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	08 95       	ret

00002160 <uart_open>:
    2160:	83 e0       	ldi	r24, 0x03	; 3

void uart_open(void)
{
	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2162:	60 e1       	ldi	r22, 0x10	; 16
    2164:	0e 94 8c 01 	call	0x318	; 0x318 <sysclk_enable_module>
	// Open UART communication
	USART_PORT.DIRSET = USART_PORT_PIN_TX; // TX as output.
    2168:	e0 e4       	ldi	r30, 0x40	; 64
    216a:	f6 e0       	ldi	r31, 0x06	; 6
    216c:	88 e0       	ldi	r24, 0x08	; 8
    216e:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR = USART_PORT_PIN_RX; // RX as input.
    2170:	84 e0       	ldi	r24, 0x04	; 4
    2172:	82 83       	std	Z+2, r24	; 0x02

	// Enable both RX and TX
	USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm;
    2174:	e0 ea       	ldi	r30, 0xA0	; 160
    2176:	f8 e0       	ldi	r31, 0x08	; 8
    2178:	8c e1       	ldi	r24, 0x1C	; 28
    217a:	84 83       	std	Z+4, r24	; 0x04
	// Enable interrupt with priority higher than USB
	USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    217c:	80 e3       	ldi	r24, 0x30	; 48
    217e:	83 83       	std	Z+3, r24	; 0x03
			USART_DREINTLVL_OFF_gc;
}
    2180:	08 95       	ret

00002182 <uart_close>:

void uart_close(void)
{
	sysclk_disable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2182:	83 e0       	ldi	r24, 0x03	; 3
    2184:	60 e1       	ldi	r22, 0x10	; 16
    2186:	0e 94 98 01 	call	0x330	; 0x330 <sysclk_disable_module>
	// Disable interrupts
	USART.CTRLA = 0;
    218a:	e0 ea       	ldi	r30, 0xA0	; 160
    218c:	f8 e0       	ldi	r31, 0x08	; 8
    218e:	13 82       	std	Z+3, r1	; 0x03
	// Close RS232 communication
	USART.CTRLB = 0;
    2190:	14 82       	std	Z+4, r1	; 0x04
}
    2192:	08 95       	ret

00002194 <uart_rx_notify>:

void uart_rx_notify(void)
{
	// If UART is open
	if (USART.CTRLA!=0) {
    2194:	e0 ea       	ldi	r30, 0xA0	; 160
    2196:	f8 e0       	ldi	r31, 0x08	; 8
    2198:	83 81       	ldd	r24, Z+3	; 0x03
    219a:	88 23       	and	r24, r24
    219c:	11 f0       	breq	.+4      	; 0x21a2 <uart_rx_notify+0xe>
		// Enable UART TX interrupt to send values
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    219e:	83 e3       	ldi	r24, 0x33	; 51
    21a0:	83 83       	std	Z+3, r24	; 0x03
    21a2:	08 95       	ret

000021a4 <__vector_25>:
	}
}


ISR(USART_RX_Vect)
{
    21a4:	1f 92       	push	r1
    21a6:	0f 92       	push	r0
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	0f 92       	push	r0
    21ac:	11 24       	eor	r1, r1
    21ae:	2f 93       	push	r18
    21b0:	3f 93       	push	r19
    21b2:	4f 93       	push	r20
    21b4:	5f 93       	push	r21
    21b6:	6f 93       	push	r22
    21b8:	7f 93       	push	r23
    21ba:	8f 93       	push	r24
    21bc:	9f 93       	push	r25
    21be:	af 93       	push	r26
    21c0:	bf 93       	push	r27
    21c2:	cf 93       	push	r28
    21c4:	ef 93       	push	r30
    21c6:	ff 93       	push	r31
	uint8_t value;

	// Data received
	ui_com_tx_start();
    21c8:	0e 94 41 02 	call	0x482	; 0x482 <ui_com_tx_start>

	if (0 != (USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))) {
    21cc:	e0 ea       	ldi	r30, 0xA0	; 160
    21ce:	f8 e0       	ldi	r31, 0x08	; 8
    21d0:	81 81       	ldd	r24, Z+1	; 0x01
    21d2:	88 71       	andi	r24, 0x18	; 24
    21d4:	21 f0       	breq	.+8      	; 0x21de <__vector_25+0x3a>
		udi_cdc_signal_framing_error();
    21d6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <udi_cdc_signal_framing_error>
		ui_com_error();
    21da:	0e 94 4b 02 	call	0x496	; 0x496 <ui_com_error>
	}

	// Transfer UART RX fifo to CDC TX
	value = USART.DATA;
    21de:	c0 91 a0 08 	lds	r28, 0x08A0
	if (!udi_cdc_is_tx_ready()) {
    21e2:	0e 94 3c 05 	call	0xa78	; 0xa78 <udi_cdc_is_tx_ready>
    21e6:	88 23       	and	r24, r24
    21e8:	29 f4       	brne	.+10     	; 0x21f4 <__vector_25+0x50>
		// Fifo full
		udi_cdc_signal_overrun();
    21ea:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <udi_cdc_signal_overrun>
		ui_com_overflow();
    21ee:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ui_com_overflow>
    21f2:	04 c0       	rjmp	.+8      	; 0x21fc <__vector_25+0x58>
	}else{
		udi_cdc_putc(value);
    21f4:	8c 2f       	mov	r24, r28
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 8b 05 	call	0xb16	; 0xb16 <udi_cdc_putc>
	}
	ui_com_tx_stop();
    21fc:	0e 94 46 02 	call	0x48c	; 0x48c <ui_com_tx_stop>
}
    2200:	ff 91       	pop	r31
    2202:	ef 91       	pop	r30
    2204:	cf 91       	pop	r28
    2206:	bf 91       	pop	r27
    2208:	af 91       	pop	r26
    220a:	9f 91       	pop	r25
    220c:	8f 91       	pop	r24
    220e:	7f 91       	pop	r23
    2210:	6f 91       	pop	r22
    2212:	5f 91       	pop	r21
    2214:	4f 91       	pop	r20
    2216:	3f 91       	pop	r19
    2218:	2f 91       	pop	r18
    221a:	0f 90       	pop	r0
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	0f 90       	pop	r0
    2220:	1f 90       	pop	r1
    2222:	18 95       	reti

00002224 <__vector_26>:

ISR(USART_DRE_Vect)
{
    2224:	1f 92       	push	r1
    2226:	0f 92       	push	r0
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	0f 92       	push	r0
    222c:	11 24       	eor	r1, r1
    222e:	2f 93       	push	r18
    2230:	3f 93       	push	r19
    2232:	4f 93       	push	r20
    2234:	5f 93       	push	r21
    2236:	6f 93       	push	r22
    2238:	7f 93       	push	r23
    223a:	8f 93       	push	r24
    223c:	9f 93       	push	r25
    223e:	af 93       	push	r26
    2240:	bf 93       	push	r27
    2242:	ef 93       	push	r30
    2244:	ff 93       	push	r31
	// Data send
	if (udi_cdc_is_rx_ready()) {
    2246:	0e 94 b4 04 	call	0x968	; 0x968 <udi_cdc_is_rx_ready>
    224a:	88 23       	and	r24, r24
    224c:	39 f0       	breq	.+14     	; 0x225c <__vector_26+0x38>
		// Transmit next data
		ui_com_rx_start();
    224e:	0e 94 37 02 	call	0x46e	; 0x46e <ui_com_rx_start>
		USART.DATA = udi_cdc_getc();
    2252:	0e 94 07 05 	call	0xa0e	; 0xa0e <udi_cdc_getc>
    2256:	80 93 a0 08 	sts	0x08A0, r24
    225a:	06 c0       	rjmp	.+12     	; 0x2268 <__vector_26+0x44>
	} else {
		// Fifo empty then Stop UART transmission
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc |
    225c:	80 e3       	ldi	r24, 0x30	; 48
    225e:	e0 ea       	ldi	r30, 0xA0	; 160
    2260:	f8 e0       	ldi	r31, 0x08	; 8
    2262:	83 83       	std	Z+3, r24	; 0x03
				(register8_t) USART_DREINTLVL_OFF_gc;
		ui_com_rx_stop();
    2264:	0e 94 3c 02 	call	0x478	; 0x478 <ui_com_rx_stop>
	}
}
    2268:	ff 91       	pop	r31
    226a:	ef 91       	pop	r30
    226c:	bf 91       	pop	r27
    226e:	af 91       	pop	r26
    2270:	9f 91       	pop	r25
    2272:	8f 91       	pop	r24
    2274:	7f 91       	pop	r23
    2276:	6f 91       	pop	r22
    2278:	5f 91       	pop	r21
    227a:	4f 91       	pop	r20
    227c:	3f 91       	pop	r19
    227e:	2f 91       	pop	r18
    2280:	0f 90       	pop	r0
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	0f 90       	pop	r0
    2286:	1f 90       	pop	r1
    2288:	18 95       	reti

0000228a <__udivmodhi4>:
    228a:	aa 1b       	sub	r26, r26
    228c:	bb 1b       	sub	r27, r27
    228e:	51 e1       	ldi	r21, 0x11	; 17
    2290:	07 c0       	rjmp	.+14     	; 0x22a0 <__udivmodhi4_ep>

00002292 <__udivmodhi4_loop>:
    2292:	aa 1f       	adc	r26, r26
    2294:	bb 1f       	adc	r27, r27
    2296:	a6 17       	cp	r26, r22
    2298:	b7 07       	cpc	r27, r23
    229a:	10 f0       	brcs	.+4      	; 0x22a0 <__udivmodhi4_ep>
    229c:	a6 1b       	sub	r26, r22
    229e:	b7 0b       	sbc	r27, r23

000022a0 <__udivmodhi4_ep>:
    22a0:	88 1f       	adc	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	5a 95       	dec	r21
    22a6:	a9 f7       	brne	.-22     	; 0x2292 <__udivmodhi4_loop>
    22a8:	80 95       	com	r24
    22aa:	90 95       	com	r25
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	08 95       	ret

000022b2 <__udivmodsi4>:
    22b2:	a1 e2       	ldi	r26, 0x21	; 33
    22b4:	1a 2e       	mov	r1, r26
    22b6:	aa 1b       	sub	r26, r26
    22b8:	bb 1b       	sub	r27, r27
    22ba:	fd 01       	movw	r30, r26
    22bc:	0d c0       	rjmp	.+26     	; 0x22d8 <__udivmodsi4_ep>

000022be <__udivmodsi4_loop>:
    22be:	aa 1f       	adc	r26, r26
    22c0:	bb 1f       	adc	r27, r27
    22c2:	ee 1f       	adc	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	a2 17       	cp	r26, r18
    22c8:	b3 07       	cpc	r27, r19
    22ca:	e4 07       	cpc	r30, r20
    22cc:	f5 07       	cpc	r31, r21
    22ce:	20 f0       	brcs	.+8      	; 0x22d8 <__udivmodsi4_ep>
    22d0:	a2 1b       	sub	r26, r18
    22d2:	b3 0b       	sbc	r27, r19
    22d4:	e4 0b       	sbc	r30, r20
    22d6:	f5 0b       	sbc	r31, r21

000022d8 <__udivmodsi4_ep>:
    22d8:	66 1f       	adc	r22, r22
    22da:	77 1f       	adc	r23, r23
    22dc:	88 1f       	adc	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	1a 94       	dec	r1
    22e2:	69 f7       	brne	.-38     	; 0x22be <__udivmodsi4_loop>
    22e4:	60 95       	com	r22
    22e6:	70 95       	com	r23
    22e8:	80 95       	com	r24
    22ea:	90 95       	com	r25
    22ec:	9b 01       	movw	r18, r22
    22ee:	ac 01       	movw	r20, r24
    22f0:	bd 01       	movw	r22, r26
    22f2:	cf 01       	movw	r24, r30
    22f4:	08 95       	ret

000022f6 <memcpy>:
    22f6:	fb 01       	movw	r30, r22
    22f8:	dc 01       	movw	r26, r24
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <memcpy+0xa>
    22fc:	01 90       	ld	r0, Z+
    22fe:	0d 92       	st	X+, r0
    2300:	41 50       	subi	r20, 0x01	; 1
    2302:	50 40       	sbci	r21, 0x00	; 0
    2304:	d8 f7       	brcc	.-10     	; 0x22fc <memcpy+0x6>
    2306:	08 95       	ret

00002308 <_exit>:
    2308:	f8 94       	cli

0000230a <__stop_program>:
    230a:	ff cf       	rjmp	.-2      	; 0x230a <__stop_program>
