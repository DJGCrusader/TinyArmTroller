
usbExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00802000  00001d82  00001e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000967  0080202c  0080202c  00001e42  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000518  00000000  00000000  00002595  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000edd1  00000000  00000000  00002aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002920  00000000  00000000  0001187e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000049e3  00000000  00000000  0001419e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001238  00000000  00000000  00018b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044da  00000000  00000000  00019dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005811  00000000  00000000  0001e296  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  00023aa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
       2:	00 00       	nop
       4:	5d c1       	rjmp	.+698    	; 0x2c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c1       	rjmp	.+694    	; 0x2c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	59 c1       	rjmp	.+690    	; 0x2c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	57 c1       	rjmp	.+686    	; 0x2c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	55 c1       	rjmp	.+682    	; 0x2c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c1       	rjmp	.+678    	; 0x2c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c1       	rjmp	.+674    	; 0x2c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4f c1       	rjmp	.+670    	; 0x2c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c1       	rjmp	.+666    	; 0x2c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	4b c1       	rjmp	.+662    	; 0x2c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	49 c1       	rjmp	.+658    	; 0x2c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	47 c1       	rjmp	.+654    	; 0x2c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c1       	rjmp	.+650    	; 0x2c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	43 c1       	rjmp	.+646    	; 0x2c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	41 c1       	rjmp	.+642    	; 0x2c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c1       	rjmp	.+638    	; 0x2c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c1       	rjmp	.+634    	; 0x2c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3b c1       	rjmp	.+630    	; 0x2c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	39 c1       	rjmp	.+626    	; 0x2c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	37 c1       	rjmp	.+622    	; 0x2c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	35 c1       	rjmp	.+618    	; 0x2c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	33 c1       	rjmp	.+614    	; 0x2c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	31 c1       	rjmp	.+610    	; 0x2c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2f c1       	rjmp	.+606    	; 0x2c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	2d c1       	rjmp	.+602    	; 0x2c0 <__bad_interrupt>
      66:	00 00       	nop
      68:	2b c1       	rjmp	.+598    	; 0x2c0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	29 c1       	rjmp	.+594    	; 0x2c0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	27 c1       	rjmp	.+590    	; 0x2c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	25 c1       	rjmp	.+586    	; 0x2c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	23 c1       	rjmp	.+582    	; 0x2c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	21 c1       	rjmp	.+578    	; 0x2c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1f c1       	rjmp	.+574    	; 0x2c0 <__bad_interrupt>
      82:	00 00       	nop
      84:	1d c1       	rjmp	.+570    	; 0x2c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	1b c1       	rjmp	.+566    	; 0x2c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	19 c1       	rjmp	.+562    	; 0x2c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	17 c1       	rjmp	.+558    	; 0x2c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	15 c1       	rjmp	.+554    	; 0x2c0 <__bad_interrupt>
      96:	00 00       	nop
      98:	13 c1       	rjmp	.+550    	; 0x2c0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	11 c1       	rjmp	.+546    	; 0x2c0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0f c1       	rjmp	.+542    	; 0x2c0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0d c1       	rjmp	.+538    	; 0x2c0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0b c1       	rjmp	.+534    	; 0x2c0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	09 c1       	rjmp	.+530    	; 0x2c0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	07 c1       	rjmp	.+526    	; 0x2c0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	05 c1       	rjmp	.+522    	; 0x2c0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	03 c1       	rjmp	.+518    	; 0x2c0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	01 c1       	rjmp	.+514    	; 0x2c0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	ff c0       	rjmp	.+510    	; 0x2c0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fd c0       	rjmp	.+506    	; 0x2c0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fb c0       	rjmp	.+502    	; 0x2c0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f9 c0       	rjmp	.+498    	; 0x2c0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f7 c0       	rjmp	.+494    	; 0x2c0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f5 c0       	rjmp	.+490    	; 0x2c0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f3 c0       	rjmp	.+486    	; 0x2c0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f1 c0       	rjmp	.+482    	; 0x2c0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ef c0       	rjmp	.+478    	; 0x2c0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ed c0       	rjmp	.+474    	; 0x2c0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	eb c0       	rjmp	.+470    	; 0x2c0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	e9 c0       	rjmp	.+466    	; 0x2c0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	e7 c0       	rjmp	.+462    	; 0x2c0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	e5 c0       	rjmp	.+458    	; 0x2c0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e3 c0       	rjmp	.+454    	; 0x2c0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e1 c0       	rjmp	.+450    	; 0x2c0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	df c0       	rjmp	.+446    	; 0x2c0 <__bad_interrupt>
     102:	00 00       	nop
     104:	dd c0       	rjmp	.+442    	; 0x2c0 <__bad_interrupt>
     106:	00 00       	nop
     108:	db c0       	rjmp	.+438    	; 0x2c0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	d9 c0       	rjmp	.+434    	; 0x2c0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	d7 c0       	rjmp	.+430    	; 0x2c0 <__bad_interrupt>
     112:	00 00       	nop
     114:	d5 c0       	rjmp	.+426    	; 0x2c0 <__bad_interrupt>
     116:	00 00       	nop
     118:	d3 c0       	rjmp	.+422    	; 0x2c0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d1 c0       	rjmp	.+418    	; 0x2c0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	cf c0       	rjmp	.+414    	; 0x2c0 <__bad_interrupt>
     122:	00 00       	nop
     124:	cd c0       	rjmp	.+410    	; 0x2c0 <__bad_interrupt>
     126:	00 00       	nop
     128:	cb c0       	rjmp	.+406    	; 0x2c0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	c9 c0       	rjmp	.+402    	; 0x2c0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	c7 c0       	rjmp	.+398    	; 0x2c0 <__bad_interrupt>
     132:	00 00       	nop
     134:	c5 c0       	rjmp	.+394    	; 0x2c0 <__bad_interrupt>
     136:	00 00       	nop
     138:	c3 c0       	rjmp	.+390    	; 0x2c0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c1 c0       	rjmp	.+386    	; 0x2c0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	bf c0       	rjmp	.+382    	; 0x2c0 <__bad_interrupt>
     142:	00 00       	nop
     144:	bd c0       	rjmp	.+378    	; 0x2c0 <__bad_interrupt>
     146:	00 00       	nop
     148:	bb c0       	rjmp	.+374    	; 0x2c0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	b9 c0       	rjmp	.+370    	; 0x2c0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	b7 c0       	rjmp	.+366    	; 0x2c0 <__bad_interrupt>
     152:	00 00       	nop
     154:	b5 c0       	rjmp	.+362    	; 0x2c0 <__bad_interrupt>
     156:	00 00       	nop
     158:	b3 c0       	rjmp	.+358    	; 0x2c0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b1 c0       	rjmp	.+354    	; 0x2c0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	af c0       	rjmp	.+350    	; 0x2c0 <__bad_interrupt>
     162:	00 00       	nop
     164:	ad c0       	rjmp	.+346    	; 0x2c0 <__bad_interrupt>
     166:	00 00       	nop
     168:	ab c0       	rjmp	.+342    	; 0x2c0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	a9 c0       	rjmp	.+338    	; 0x2c0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	a7 c0       	rjmp	.+334    	; 0x2c0 <__bad_interrupt>
     172:	00 00       	nop
     174:	a5 c0       	rjmp	.+330    	; 0x2c0 <__bad_interrupt>
     176:	00 00       	nop
     178:	a3 c0       	rjmp	.+326    	; 0x2c0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a1 c0       	rjmp	.+322    	; 0x2c0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	9f c0       	rjmp	.+318    	; 0x2c0 <__bad_interrupt>
     182:	00 00       	nop
     184:	9d c0       	rjmp	.+314    	; 0x2c0 <__bad_interrupt>
     186:	00 00       	nop
     188:	9b c0       	rjmp	.+310    	; 0x2c0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	99 c0       	rjmp	.+306    	; 0x2c0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	97 c0       	rjmp	.+302    	; 0x2c0 <__bad_interrupt>
     192:	00 00       	nop
     194:	95 c0       	rjmp	.+298    	; 0x2c0 <__bad_interrupt>
     196:	00 00       	nop
     198:	93 c0       	rjmp	.+294    	; 0x2c0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	91 c0       	rjmp	.+290    	; 0x2c0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	8f c0       	rjmp	.+286    	; 0x2c0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	8d c0       	rjmp	.+282    	; 0x2c0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	8b c0       	rjmp	.+278    	; 0x2c0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	89 c0       	rjmp	.+274    	; 0x2c0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	87 c0       	rjmp	.+270    	; 0x2c0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	85 c0       	rjmp	.+266    	; 0x2c0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	83 c0       	rjmp	.+262    	; 0x2c0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	81 c0       	rjmp	.+258    	; 0x2c0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	7f c0       	rjmp	.+254    	; 0x2c0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	7d c0       	rjmp	.+250    	; 0x2c0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	7b c0       	rjmp	.+246    	; 0x2c0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	79 c0       	rjmp	.+242    	; 0x2c0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	77 c0       	rjmp	.+238    	; 0x2c0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	75 c0       	rjmp	.+234    	; 0x2c0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	73 c0       	rjmp	.+230    	; 0x2c0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	71 c0       	rjmp	.+226    	; 0x2c0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	6f c0       	rjmp	.+222    	; 0x2c0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	6d c0       	rjmp	.+218    	; 0x2c0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	6b c0       	rjmp	.+214    	; 0x2c0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	69 c0       	rjmp	.+210    	; 0x2c0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	67 c0       	rjmp	.+206    	; 0x2c0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	4c c3       	rjmp	.+1688   	; 0x88e <__vector_125>
     1f6:	00 00       	nop
     1f8:	63 c0       	rjmp	.+198    	; 0x2c0 <__bad_interrupt>
     1fa:	00 00       	nop

000001fc <ProductString>:
     1fc:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     20c:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000021a <ManufacturerString>:
     21a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     22a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000234 <LanguageString>:
     234:	04 03 09 04                                         ....

00000238 <ConfigurationDescriptor>:
     238:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     248:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     258:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     268:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000276 <DeviceDescriptor>:
     276:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     286:	dc 01                                               ..

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d7 e2       	ldi	r29, 0x27	; 39
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61

00000294 <__do_copy_data>:
     294:	10 e2       	ldi	r17, 0x20	; 32
     296:	a0 e0       	ldi	r26, 0x00	; 0
     298:	b0 e2       	ldi	r27, 0x20	; 32
     29a:	e2 e8       	ldi	r30, 0x82	; 130
     29c:	fd e1       	ldi	r31, 0x1D	; 29
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__do_copy_data+0x10>
     2a0:	05 90       	lpm	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	ac 32       	cpi	r26, 0x2C	; 44
     2a6:	b1 07       	cpc	r27, r17
     2a8:	d9 f7       	brne	.-10     	; 0x2a0 <__do_copy_data+0xc>

000002aa <__do_clear_bss>:
     2aa:	19 e2       	ldi	r17, 0x29	; 41
     2ac:	ac e2       	ldi	r26, 0x2C	; 44
     2ae:	b0 e2       	ldi	r27, 0x20	; 32
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <.do_clear_bss_start>

000002b2 <.do_clear_bss_loop>:
     2b2:	1d 92       	st	X+, r1

000002b4 <.do_clear_bss_start>:
     2b4:	a3 39       	cpi	r26, 0x93	; 147
     2b6:	b1 07       	cpc	r27, r17
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <.do_clear_bss_loop>
     2ba:	a4 d0       	rcall	.+328    	; 0x404 <main>
     2bc:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <_exit>

000002c0 <__bad_interrupt>:
     2c0:	9f ce       	rjmp	.-706    	; 0x0 <__vectors>

000002c2 <EVENT_USB_Device_Connect>:
	for (i = 0; i < 10; i++){
		blink(50);
	}
	*/

}
     2c2:	08 95       	ret

000002c4 <EVENT_USB_Device_Disconnect>:
{
	/*
	blink(500);
	blink(500);
	*/
}
     2c4:	08 95       	ret

000002c6 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	//blink(5000);
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e2       	ldi	r25, 0x20	; 32
     2ca:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <CDC_Device_ProcessControlRequest>

000002ce <delay_ms>:
			}
		}
	}
	*/
	
}
     2ce:	9c 01       	movw	r18, r24
	Endpoint_ClearStatusStage();
}

void delay_ms(int ms) 
{ 
    while (ms--) 
     2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d2:	8f e3       	ldi	r24, 0x3F	; 63
     2d4:	9f e1       	ldi	r25, 0x1F	; 31
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <delay_ms+0x8>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <delay_ms+0xe>
     2dc:	00 00       	nop
     2de:	21 50       	subi	r18, 0x01	; 1
     2e0:	30 40       	sbci	r19, 0x00	; 0
     2e2:	21 15       	cp	r18, r1
     2e4:	31 05       	cpc	r19, r1
     2e6:	a9 f7       	brne	.-22     	; 0x2d2 <delay_ms+0x4>
        _delay_us(1000);  
} 
     2e8:	08 95       	ret

000002ea <blink>:
//Get time elapsed in millis 
long millis(void){
	return elapsedMillis;
}

void blink(int myVal){
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	8c 01       	movw	r16, r24
		PORTE.OUTSET = _BV(0);
     2f6:	c0 e8       	ldi	r28, 0x80	; 128
     2f8:	d6 e0       	ldi	r29, 0x06	; 6
     2fa:	ff 24       	eor	r15, r15
     2fc:	f3 94       	inc	r15
     2fe:	fd 82       	std	Y+5, r15	; 0x05
        delay_ms(myVal);
     300:	e6 df       	rcall	.-52     	; 0x2ce <delay_ms>
     302:	fe 82       	std	Y+6, r15	; 0x06
        PORTE.OUTCLR = _BV(0);
     304:	c8 01       	movw	r24, r16
        delay_ms(myVal);
     306:	e3 df       	rcall	.-58     	; 0x2ce <delay_ms>
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
}
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	08 95       	ret

00000314 <EVENT_USB_Device_ConfigurationChanged>:
	*/
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     314:	82 e3       	ldi	r24, 0x32	; 50
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	e8 df       	rcall	.-48     	; 0x2ea <blink>
     31a:	80 e0       	ldi	r24, 0x00	; 0
	bool ConfigSuccess = true;
	blink(50);
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     31c:	90 e2       	ldi	r25, 0x20	; 32
     31e:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <CDC_Device_ConfigureEndpoints>

00000322 <SetupHardware>:
}


/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     322:	cf 93       	push	r28
{
	bool ConfigSuccess = true;
	blink(50);
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
	
}
     324:	df 93       	push	r29
				  return false;

				switch (Source)
				{
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.PLLCTRL = (OSC_PLLSRC_RC2M_gc  | MulFactor);
     326:	80 e1       	ldi	r24, 0x10	; 16
     328:	e0 e5       	ldi	r30, 0x50	; 80
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	85 83       	std	Z+5, r24	; 0x05
						break;
					default:
						return false;
				}

				OSC.CTRL |= OSC_PLLEN_bm;
     32e:	80 91 50 00 	lds	r24, 0x0050
     332:	80 61       	ori	r24, 0x10	; 16
     334:	80 93 50 00 	sts	0x0050, r24

				while (!(OSC.STATUS & OSC_PLLRDY_bm));
     338:	80 91 51 00 	lds	r24, 0x0051
     33c:	84 ff       	sbrs	r24, 4
     33e:	fc cf       	rjmp	.-8      	; 0x338 <SetupHardware+0x16>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
     340:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
     342:	f8 94       	cli
			 *  \param[in] Value    Value to write to the protected location
			 */
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value) ATTR_ALWAYS_INLINE;
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value)
			{
				__asm__ __volatile__ (
     344:	34 e0       	ldi	r19, 0x04	; 4
     346:	88 ed       	ldi	r24, 0xD8	; 216
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	a0 e4       	ldi	r26, 0x40	; 64
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	1b be       	out	0x3b, r1	; 59
     350:	fd 01       	movw	r30, r26
     352:	84 bf       	out	0x34, r24	; 52
     354:	30 83       	st	Z, r19
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
     356:	2f bf       	out	0x3f, r18	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     358:	8f e3       	ldi	r24, 0x3F	; 63
     35a:	9f e1       	ldi	r25, 0x1F	; 31
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <SetupHardware+0x3a>
     360:	00 c0       	rjmp	.+0      	; 0x362 <SetupHardware+0x40>
     362:	00 00       	nop
				XMEGACLK_CCP_Write(&CLK.CTRL, ClockSourceMask);

				SetGlobalInterruptMask(CurrentGlobalInt);

				Delay_MS(1);
				return (CLK.CTRL == ClockSourceMask);
     364:	80 91 40 00 	lds	r24, 0x0040
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.CTRL |= OSC_RC2MEN_bm;
						while (!(OSC.STATUS & OSC_RC2MRDY_bm));
						return true;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.CTRL |= OSC_RC32MEN_bm;
     368:	80 91 50 00 	lds	r24, 0x0050
     36c:	82 60       	ori	r24, 0x02	; 2
     36e:	80 93 50 00 	sts	0x0050, r24
						while (!(OSC.STATUS & OSC_RC32MRDY_bm));
     372:	80 91 51 00 	lds	r24, 0x0051
     376:	81 ff       	sbrs	r24, 1
     378:	fc cf       	rjmp	.-8      	; 0x372 <SetupHardware+0x50>
						DFLLRC2M.COMP1  = (DFLLCompare & 0xFF);
						DFLLRC2M.COMP2  = (DFLLCompare >> 8);
						DFLLRC2M.CTRL   = DFLL_ENABLE_bm;
						break;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.DFLLCTRL   |= (Reference << OSC_RC32MCREF_gp);
     37a:	80 91 56 00 	lds	r24, 0x0056
     37e:	84 60       	ori	r24, 0x04	; 4
     380:	e0 e5       	ldi	r30, 0x50	; 80
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	86 83       	std	Z+6, r24	; 0x06
						DFLLRC32M.COMP1 = (DFLLCompare & 0xFF);
     386:	a0 e6       	ldi	r26, 0x60	; 96
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	80 e8       	ldi	r24, 0x80	; 128
     38c:	15 96       	adiw	r26, 0x05	; 5
     38e:	8c 93       	st	X, r24
     390:	15 97       	sbiw	r26, 0x05	; 5
						DFLLRC32M.COMP2 = (DFLLCompare >> 8);
     392:	8b eb       	ldi	r24, 0xBB	; 187
     394:	16 96       	adiw	r26, 0x06	; 6
     396:	8c 93       	st	X, r24
     398:	16 97       	sbiw	r26, 0x06	; 6

						if (Reference == DFLL_REF_INT_USBSOF)
						{
							NVM.CMD        = NVM_CMD_READ_CALIB_ROW_gc;
     39a:	c0 ec       	ldi	r28, 0xC0	; 192
     39c:	d1 e0       	ldi	r29, 0x01	; 1
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	8a 87       	std	Y+10, r24	; 0x0a
							DFLLRC32M.CALA = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSCA));
     3a2:	ed e1       	ldi	r30, 0x1D	; 29
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	e4 91       	lpm	r30, Z+
     3a8:	12 96       	adiw	r26, 0x02	; 2
     3aa:	ec 93       	st	X, r30
     3ac:	12 97       	sbiw	r26, 0x02	; 2
							DFLLRC32M.CALB = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
     3ae:	ec e1       	ldi	r30, 0x1C	; 28
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	e4 91       	lpm	r30, Z+
     3b4:	13 96       	adiw	r26, 0x03	; 3
     3b6:	ec 93       	st	X, r30
							NVM.CMD        = 0;
     3b8:	1a 86       	std	Y+10, r1	; 0x0a
						}

						DFLLRC32M.CTRL  = DFLL_ENABLE_bm;
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 93 60 00 	sts	0x0060, r24

	// Start the 32MHz internal RC oscillator and start the DFLL to increase it to 48MHz using the USB SOF as a reference
	XMEGACLK_StartInternalOscillator(CLOCK_SRC_INT_RC32MHZ);
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, F_USB);

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     3c0:	87 e0       	ldi	r24, 0x07	; 7
     3c2:	e0 ea       	ldi	r30, 0xA0	; 160
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	82 83       	std	Z+2, r24	; 0x02

	/* Hardware Initialization */
	USB_Init();
     3c8:	2a d2       	rcall	.+1108   	; 0x81e <USB_Init>
     3ca:	df 91       	pop	r29
}
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <setupIO>:

void setupIO(void){
     3d0:	e0 e8       	ldi	r30, 0x80	; 128
     3d2:	f6 e0       	ldi	r31, 0x06	; 6
     3d4:	81 81       	ldd	r24, Z+1	; 0x01
     3d6:	81 60       	ori	r24, 0x01	; 1
     3d8:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET |= _BV(0); // DEBUG: Set pin E0 as OUTPUT
}
     3da:	08 95       	ret

000003dc <interruptInit>:

void interruptInit(void){
		/* Timer for keeping track of milliseconds:
	 * The result of this triggers the interrupt once per millisecond.
	 */
	TCC0.PER = 6000;// Set HIGH to 4000
     3dc:	e0 e0       	ldi	r30, 0x00	; 0
     3de:	f8 e0       	ldi	r31, 0x08	; 8
     3e0:	80 e7       	ldi	r24, 0x70	; 112
     3e2:	97 e1       	ldi	r25, 0x17	; 23
     3e4:	86 a3       	std	Z+38, r24	; 0x26
     3e6:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV8_gc; // Work from CPUCLK/8
     3e8:	80 81       	ld	r24, Z
     3ea:	80 7f       	andi	r24, 0xF0	; 240
     3ec:	84 60       	ori	r24, 0x04	; 4
     3ee:	80 83       	st	Z, r24
	TCC0.INTCTRLA = ( TCC0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | TC_OVFINTLVL_HI_gc; // Enable overflow interrupt.--
     3f0:	86 81       	ldd	r24, Z+6	; 0x06
     3f2:	83 60       	ori	r24, 0x03	; 3
     3f4:	86 83       	std	Z+6, r24	; 0x06
	// Enable low interrupt level in PMIC and enable global interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     3f6:	e0 ea       	ldi	r30, 0xA0	; 160
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	84 60       	ori	r24, 0x04	; 4
     3fe:	82 83       	std	Z+2, r24	; 0x02
	sei();
     400:	78 94       	sei
}
     402:	08 95       	ret

00000404 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     404:	8e df       	rcall	.-228    	; 0x322 <SetupHardware>
     406:	e4 df       	rcall	.-56     	; 0x3d0 <setupIO>
	setupIO();
     408:	e9 df       	rcall	.-46     	; 0x3dc <interruptInit>
     40a:	80 e0       	ldi	r24, 0x00	; 0
	interruptInit();
     40c:	90 e2       	ldi	r25, 0x20	; 32
     40e:	60 e3       	ldi	r22, 0x30	; 48
	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     410:	70 e2       	ldi	r23, 0x20	; 32
     412:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <CDC_Device_CreateStream>
     416:	78 94       	sei
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e2       	ldi	r25, 0x20	; 32

	sei();
     41c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <CDC_Device_ReceiveByte>
	
	while (1)
	{
		
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e2       	ldi	r25, 0x20	; 32
     424:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <CDC_Device_USBTask>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     428:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <USB_USBTask>
     42c:	f5 cf       	rjmp	.-22     	; 0x418 <main+0x14>

0000042e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     42e:	92 30       	cpi	r25, 0x02	; 2
     430:	29 f0       	breq	.+10     	; 0x43c <CALLBACK_USB_GetDescriptor+0xe>
     432:	93 30       	cpi	r25, 0x03	; 3
     434:	41 f0       	breq	.+16     	; 0x446 <CALLBACK_USB_GetDescriptor+0x18>
     436:	91 30       	cpi	r25, 0x01	; 1
     438:	e9 f4       	brne	.+58     	; 0x474 <CALLBACK_USB_GetDescriptor+0x46>
     43a:	17 c0       	rjmp	.+46     	; 0x46a <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     43c:	8e e3       	ldi	r24, 0x3E	; 62
     43e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     440:	e8 e3       	ldi	r30, 0x38	; 56
     442:	f2 e0       	ldi	r31, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     444:	1b c0       	rjmp	.+54     	; 0x47c <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	41 f0       	breq	.+16     	; 0x45a <CALLBACK_USB_GetDescriptor+0x2c>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	18 f0       	brcs	.+6      	; 0x454 <CALLBACK_USB_GetDescriptor+0x26>
     44e:	82 30       	cpi	r24, 0x02	; 2
     450:	89 f4       	brne	.+34     	; 0x474 <CALLBACK_USB_GetDescriptor+0x46>
     452:	06 c0       	rjmp	.+12     	; 0x460 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     454:	e4 e3       	ldi	r30, 0x34	; 52
     456:	f2 e0       	ldi	r31, 0x02	; 2
     458:	05 c0       	rjmp	.+10     	; 0x464 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     45a:	ea e1       	ldi	r30, 0x1A	; 26
     45c:	f2 e0       	ldi	r31, 0x02	; 2
     45e:	02 c0       	rjmp	.+4      	; 0x464 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     460:	ec ef       	ldi	r30, 0xFC	; 252
     462:	f1 e0       	ldi	r31, 0x01	; 1
     464:	84 91       	lpm	r24, Z+
     466:	90 e0       	ldi	r25, 0x00	; 0
					break;
     468:	09 c0       	rjmp	.+18     	; 0x47c <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     46a:	82 e1       	ldi	r24, 0x12	; 18
     46c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     46e:	e6 e7       	ldi	r30, 0x76	; 118
     470:	f2 e0       	ldi	r31, 0x02	; 2
     472:	04 c0       	rjmp	.+8      	; 0x47c <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     478:	e0 e0       	ldi	r30, 0x00	; 0
     47a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     47c:	da 01       	movw	r26, r20
     47e:	ed 93       	st	X+, r30
     480:	fc 93       	st	X, r31
     482:	11 97       	sbiw	r26, 0x01	; 1
	return Size;
}
     484:	08 95       	ret

00000486 <Endpoint_SelectEndpoint>:
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address);
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
     486:	28 2f       	mov	r18, r24
     488:	2f 70       	andi	r18, 0x0F	; 15

				USB_Endpoint_SelectedEndpoint = Address;
     48a:	80 93 42 20 	sts	0x2042, r24
     48e:	30 e0       	ldi	r19, 0x00	; 0

				if (Address & ENDPOINT_DIR_IN)
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
     490:	44 e8       	ldi	r20, 0x84	; 132
     492:	50 e0       	ldi	r21, 0x00	; 0
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

				USB_Endpoint_SelectedEndpoint = Address;

				if (Address & ENDPOINT_DIR_IN)
     494:	87 ff       	sbrs	r24, 7
     496:	19 c0       	rjmp	.+50     	; 0x4ca <Endpoint_SelectEndpoint+0x44>
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
     498:	24 9f       	mul	r18, r20
     49a:	c0 01       	movw	r24, r0
     49c:	25 9f       	mul	r18, r21
     49e:	90 0d       	add	r25, r0
     4a0:	34 9f       	mul	r19, r20
     4a2:	90 0d       	add	r25, r0
     4a4:	11 24       	eor	r1, r1
     4a6:	8b 57       	subi	r24, 0x7B	; 123
     4a8:	9f 4d       	sbci	r25, 0xDF	; 223
     4aa:	80 93 3e 20 	sts	0x203E, r24
     4ae:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].IN;
     4b2:	80 91 c6 04 	lds	r24, 0x04C6
     4b6:	90 91 c7 04 	lds	r25, 0x04C7
     4ba:	74 e0       	ldi	r23, 0x04	; 4
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	7a 95       	dec	r23
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <Endpoint_SelectEndpoint+0x36>
     4c4:	28 5f       	subi	r18, 0xF8	; 248
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	16 c0       	rjmp	.+44     	; 0x4f6 <Endpoint_SelectEndpoint+0x70>
				}
				else
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].OUT;
     4ca:	24 9f       	mul	r18, r20
     4cc:	c0 01       	movw	r24, r0
     4ce:	25 9f       	mul	r18, r21
     4d0:	90 0d       	add	r25, r0
     4d2:	34 9f       	mul	r19, r20
     4d4:	90 0d       	add	r25, r0
     4d6:	11 24       	eor	r1, r1
     4d8:	8d 5b       	subi	r24, 0xBD	; 189
     4da:	9f 4d       	sbci	r25, 0xDF	; 223
     4dc:	80 93 3e 20 	sts	0x203E, r24
     4e0:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].OUT;
     4e4:	80 91 c6 04 	lds	r24, 0x04C6
     4e8:	90 91 c7 04 	lds	r25, 0x04C7
     4ec:	64 e0       	ldi	r22, 0x04	; 4
     4ee:	22 0f       	add	r18, r18
     4f0:	33 1f       	adc	r19, r19
     4f2:	6a 95       	dec	r22
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <Endpoint_SelectEndpoint+0x68>
     4f6:	82 0f       	add	r24, r18
     4f8:	93 1f       	adc	r25, r19
     4fa:	80 93 40 20 	sts	0x2040, r24
     4fe:	90 93 41 20 	sts	0x2041, r25
     502:	08 95       	ret

00000504 <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	00 d0       	rcall	.+0      	; 0x50c <Endpoint_ConfigureEndpoint_PRV+0x8>
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	18 2f       	mov	r17, r24
	Endpoint_SelectEndpoint(Address);
     512:	4a 83       	std	Y+2, r20	; 0x02
     514:	69 83       	std	Y+1, r22	; 0x01
     516:	b7 df       	rcall	.-146    	; 0x486 <Endpoint_SelectEndpoint>
     518:	e0 91 40 20 	lds	r30, 0x2040

	USB_Endpoint_SelectedHandle->CTRL    = 0;
     51c:	f0 91 41 20 	lds	r31, 0x2041
     520:	11 82       	std	Z+1, r1	; 0x01
     522:	e0 91 40 20 	lds	r30, 0x2040
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
     526:	f0 91 41 20 	lds	r31, 0x2041
     52a:	81 2f       	mov	r24, r17
     52c:	88 1f       	adc	r24, r24
     52e:	88 27       	eor	r24, r24
     530:	88 1f       	adc	r24, r24
     532:	88 0f       	add	r24, r24
     534:	80 83       	st	Z, r24
     536:	e0 91 40 20 	lds	r30, 0x2040
	USB_Endpoint_SelectedHandle->CTRL    = Config;
     53a:	f0 91 41 20 	lds	r31, 0x2041
     53e:	69 81       	ldd	r22, Y+1	; 0x01
     540:	61 83       	std	Z+1, r22	; 0x01
     542:	e0 91 40 20 	lds	r30, 0x2040
	USB_Endpoint_SelectedHandle->CNT     = 0;
     546:	f0 91 41 20 	lds	r31, 0x2041
     54a:	12 82       	std	Z+2, r1	; 0x02
     54c:	13 82       	std	Z+3, r1	; 0x03
     54e:	20 91 3e 20 	lds	r18, 0x203E
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
     552:	30 91 3f 20 	lds	r19, 0x203F
     556:	24 83       	std	Z+4, r18	; 0x04
     558:	35 83       	std	Z+5, r19	; 0x05
     55a:	11 0f       	add	r17, r17

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
     55c:	11 0b       	sbc	r17, r17
     55e:	4a 81       	ldd	r20, Y+2	; 0x02
     560:	14 23       	and	r17, r20
     562:	f9 01       	movw	r30, r18
     564:	e0 5c       	subi	r30, 0xC0	; 192
     566:	ff 4f       	sbci	r31, 0xFF	; 255
     568:	10 83       	st	Z, r17
     56a:	2f 5b       	subi	r18, 0xBF	; 191
	USB_Endpoint_SelectedFIFO->Position  = 0;
     56c:	3f 4f       	sbci	r19, 0xFF	; 255
     56e:	d9 01       	movw	r26, r18
     570:	1c 92       	st	X, r1
     572:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	08 95       	ret

00000580 <Endpoint_ConfigureEndpointTable>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	0f 92       	push	r0
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	f6 2e       	mov	r15, r22
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
     59a:	5c 01       	movw	r10, r24
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     59c:	ee 24       	eor	r14, r14
     59e:	3a c0       	rjmp	.+116    	; 0x614 <Endpoint_ConfigureEndpointTable+0x94>
	{
		if (!(Table[i].Address))
     5a0:	f5 01       	movw	r30, r10
     5a2:	d0 80       	ld	r13, Z
     5a4:	dd 20       	and	r13, r13
     5a6:	89 f1       	breq	.+98     	; 0x60a <Endpoint_ConfigureEndpointTable+0x8a>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     5a8:	83 81       	ldd	r24, Z+3	; 0x03
     5aa:	01 81       	ldd	r16, Z+1	; 0x01
     5ac:	12 81       	ldd	r17, Z+2	; 0x02
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
     5ae:	94 81       	ldd	r25, Z+4	; 0x04
     5b0:	92 30       	cpi	r25, 0x02	; 2
     5b2:	10 f0       	brcs	.+4      	; 0x5b8 <Endpoint_ConfigureEndpointTable+0x38>
     5b4:	48 e1       	ldi	r20, 0x18	; 24
     5b6:	01 c0       	rjmp	.+2      	; 0x5ba <Endpoint_ConfigureEndpointTable+0x3a>
     5b8:	48 e0       	ldi	r20, 0x08	; 8
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     5ba:	28 e0       	ldi	r18, 0x08	; 8
     5bc:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     5c2:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     5c8:	20 17       	cp	r18, r16
     5ca:	31 07       	cpc	r19, r17
     5cc:	d0 f3       	brcs	.-12     	; 0x5c2 <Endpoint_ConfigureEndpointTable+0x42>
				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
				if (Size > 64)
     5ce:	01 34       	cpi	r16, 0x41	; 65
     5d0:	11 05       	cpc	r17, r1
     5d2:	20 f5       	brcc	.+72     	; 0x61c <Endpoint_ConfigureEndpointTable+0x9c>
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
     5d4:	94 2b       	or	r25, r20

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
     5d6:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
				  return false;

				switch (Type)
     5d8:	88 23       	and	r24, r24
     5da:	19 f0       	breq	.+6      	; 0x5e2 <Endpoint_ConfigureEndpointTable+0x62>
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	29 f4       	brne	.+10     	; 0x5ea <Endpoint_ConfigureEndpointTable+0x6a>
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <Endpoint_ConfigureEndpointTable+0x66>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
     5e2:	90 64       	ori	r25, 0x40	; 64
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <Endpoint_ConfigureEndpointTable+0x70>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
     5e6:	90 6c       	ori	r25, 0xC0	; 192
     5e8:	0a c0       	rjmp	.+20     	; 0x5fe <Endpoint_ConfigureEndpointTable+0x7e>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
     5ea:	90 68       	ori	r25, 0x80	; 128
						break;
				}

				if (Type == EP_TYPE_CONTROL)
     5ec:	88 23       	and	r24, r24
     5ee:	39 f4       	brne	.+14     	; 0x5fe <Endpoint_ConfigureEndpointTable+0x7e>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
     5f0:	8d 2d       	mov	r24, r13
     5f2:	80 58       	subi	r24, 0x80	; 128
     5f4:	69 2f       	mov	r22, r25
     5f6:	40 2f       	mov	r20, r16
     5f8:	99 83       	std	Y+1, r25	; 0x01
     5fa:	84 df       	rcall	.-248    	; 0x504 <Endpoint_ConfigureEndpoint_PRV>
     5fc:	99 81       	ldd	r25, Y+1	; 0x01
     5fe:	8d 2d       	mov	r24, r13

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
     600:	69 2f       	mov	r22, r25
     602:	40 2f       	mov	r20, r16
     604:	7f df       	rcall	.-258    	; 0x504 <Endpoint_ConfigureEndpoint_PRV>
     606:	88 23       	and	r24, r24
     608:	49 f0       	breq	.+18     	; 0x61c <Endpoint_ConfigureEndpointTable+0x9c>
     60a:	e3 94       	inc	r14
     60c:	85 e0       	ldi	r24, 0x05	; 5
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	a8 0e       	add	r10, r24
     612:	b9 1e       	adc	r11, r25
     614:	ef 14       	cp	r14, r15
     616:	21 f6       	brne	.-120    	; 0x5a0 <Endpoint_ConfigureEndpointTable+0x20>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	01 c0       	rjmp	.+2      	; 0x61e <Endpoint_ConfigureEndpointTable+0x9e>
		{
			return false;
		}
	}
	
	return true;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	0f 90       	pop	r0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
     620:	df 91       	pop	r29
		}
	}
	
	return true;
}
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	ef 90       	pop	r14
     62c:	df 90       	pop	r13
     62e:	bf 90       	pop	r11
     630:	af 90       	pop	r10
     632:	08 95       	ret

00000634 <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
     638:	e0 91 c6 04 	lds	r30, 0x04C6
     63c:	f0 91 c7 04 	lds	r31, 0x04C7
     640:	9c 01       	movw	r18, r24
     642:	a4 e0       	ldi	r26, 0x04	; 4
     644:	22 0f       	add	r18, r18
     646:	33 1f       	adc	r19, r19
     648:	aa 95       	dec	r26
     64a:	e1 f7       	brne	.-8      	; 0x644 <Endpoint_ClearEndpoints+0x10>
     64c:	e2 0f       	add	r30, r18
     64e:	f3 1f       	adc	r31, r19
     650:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
     652:	e0 91 c6 04 	lds	r30, 0x04C6
     656:	f0 91 c7 04 	lds	r31, 0x04C7
     65a:	e2 0f       	add	r30, r18
     65c:	f3 1f       	adc	r31, r19
     65e:	11 82       	std	Z+1, r1	; 0x01
     660:	01 96       	adiw	r24, 0x01	; 1
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     662:	80 31       	cpi	r24, 0x10	; 16
     664:	91 05       	cpc	r25, r1
     666:	41 f7       	brne	.-48     	; 0x638 <Endpoint_ClearEndpoints+0x4>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
     668:	08 95       	ret

0000066a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     66a:	80 91 8b 29 	lds	r24, 0x298B
     66e:	87 ff       	sbrs	r24, 7
     670:	28 c0       	rjmp	.+80     	; 0x6c2 <Endpoint_ClearStatusStage+0x58>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     672:	80 91 42 20 	lds	r24, 0x2042
     676:	8f 77       	andi	r24, 0x7F	; 127
     678:	06 df       	rcall	.-500    	; 0x486 <Endpoint_SelectEndpoint>
     67a:	e0 91 40 20 	lds	r30, 0x2040

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
     67e:	f0 91 41 20 	lds	r31, 0x2041
     682:	80 81       	ld	r24, Z
     684:	85 ff       	sbrs	r24, 5
     686:	14 c0       	rjmp	.+40     	; 0x6b0 <Endpoint_ClearStatusStage+0x46>
     688:	a0 91 3e 20 	lds	r26, 0x203E
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     68c:	b0 91 3f 20 	lds	r27, 0x203F
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	a0 5c       	subi	r26, 0xC0	; 192
     696:	bf 4f       	sbci	r27, 0xFF	; 255
     698:	8c 93       	st	X, r24
     69a:	80 81       	ld	r24, Z
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     69c:	8d 79       	andi	r24, 0x9D	; 157
     69e:	80 83       	st	Z, r24
     6a0:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
     6a4:	f0 91 3f 20 	lds	r31, 0x203F
     6a8:	ef 5b       	subi	r30, 0xBF	; 191
     6aa:	ff 4f       	sbci	r31, 0xFF	; 255
     6ac:	10 82       	st	Z, r1
     6ae:	08 95       	ret
     6b0:	80 91 8a 29 	lds	r24, 0x298A
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6b4:	88 23       	and	r24, r24
     6b6:	e9 f6       	brne	.-70     	; 0x672 <Endpoint_ClearStatusStage+0x8>
     6b8:	08 95       	ret
     6ba:	80 91 8a 29 	lds	r24, 0x298A
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6be:	88 23       	and	r24, r24
     6c0:	f9 f0       	breq	.+62     	; 0x700 <Endpoint_ClearStatusStage+0x96>
     6c2:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     6c6:	80 68       	ori	r24, 0x80	; 128
     6c8:	de de       	rcall	.-580    	; 0x486 <Endpoint_SelectEndpoint>
     6ca:	e0 91 40 20 	lds	r30, 0x2040

				return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
     6ce:	f0 91 41 20 	lds	r31, 0x2041
     6d2:	80 81       	ld	r24, Z
     6d4:	81 ff       	sbrs	r24, 1
     6d6:	f1 cf       	rjmp	.-30     	; 0x6ba <Endpoint_ClearStatusStage+0x50>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     6d8:	a0 91 3e 20 	lds	r26, 0x203E
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
     6dc:	b0 91 3f 20 	lds	r27, 0x203F
     6e0:	af 5b       	subi	r26, 0xBF	; 191
     6e2:	bf 4f       	sbci	r27, 0xFF	; 255
     6e4:	8c 91       	ld	r24, X
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	82 83       	std	Z+2, r24	; 0x02
     6ea:	93 83       	std	Z+3, r25	; 0x03
     6ec:	80 81       	ld	r24, Z
     6ee:	8d 79       	andi	r24, 0x9D	; 157
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     6f0:	80 83       	st	Z, r24
     6f2:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
     6f6:	f0 91 3f 20 	lds	r31, 0x203F
     6fa:	ef 5b       	subi	r30, 0xBF	; 191
     6fc:	ff 4f       	sbci	r31, 0xFF	; 255
     6fe:	10 82       	st	Z, r1
     700:	08 95       	ret

00000702 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
     708:	e0 91 c6 04 	lds	r30, 0x04C6
     70c:	f0 91 c7 04 	lds	r31, 0x04C7
     710:	e0 50       	subi	r30, 0x00	; 0
     712:	ff 4f       	sbci	r31, 0xFF	; 255
     714:	c0 81       	ld	r28, Z
     716:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     718:	14 e6       	ldi	r17, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
     71a:	80 91 42 20 	lds	r24, 0x2042
     71e:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     720:	80 38       	cpi	r24, 0x80	; 128
     722:	61 f4       	brne	.+24     	; 0x73c <Endpoint_WaitUntilReady+0x3a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     724:	80 91 42 20 	lds	r24, 0x2042
     728:	80 68       	ori	r24, 0x80	; 128
     72a:	ad de       	rcall	.-678    	; 0x486 <Endpoint_SelectEndpoint>
     72c:	e0 91 40 20 	lds	r30, 0x2040

				return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
     730:	f0 91 41 20 	lds	r31, 0x2041
     734:	80 81       	ld	r24, Z
     736:	81 ff       	sbrs	r24, 1
		{
			if (Endpoint_IsINReady())
     738:	18 c0       	rjmp	.+48     	; 0x76a <Endpoint_WaitUntilReady+0x68>
     73a:	35 c0       	rjmp	.+106    	; 0x7a6 <Endpoint_WaitUntilReady+0xa4>
     73c:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     740:	8f 77       	andi	r24, 0x7F	; 127
     742:	a1 de       	rcall	.-702    	; 0x486 <Endpoint_SelectEndpoint>
     744:	a0 91 40 20 	lds	r26, 0x2040

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
     748:	b0 91 41 20 	lds	r27, 0x2041
     74c:	8c 91       	ld	r24, X
     74e:	85 ff       	sbrs	r24, 5
     750:	0c c0       	rjmp	.+24     	; 0x76a <Endpoint_WaitUntilReady+0x68>
     752:	e0 91 3e 20 	lds	r30, 0x203E
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     756:	f0 91 3f 20 	lds	r31, 0x203F
     75a:	12 96       	adiw	r26, 0x02	; 2
     75c:	8d 91       	ld	r24, X+
     75e:	9c 91       	ld	r25, X
     760:	13 97       	sbiw	r26, 0x03	; 3
     762:	e0 5c       	subi	r30, 0xC0	; 192
     764:	ff 4f       	sbci	r31, 0xFF	; 255
     766:	80 83       	st	Z, r24
     768:	1e c0       	rjmp	.+60     	; 0x7a6 <Endpoint_WaitUntilReady+0xa4>
     76a:	80 91 8a 29 	lds	r24, 0x298A
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     76e:	88 23       	and	r24, r24
     770:	e1 f0       	breq	.+56     	; 0x7aa <Endpoint_WaitUntilReady+0xa8>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     772:	85 30       	cpi	r24, 0x05	; 5
     774:	e1 f0       	breq	.+56     	; 0x7ae <Endpoint_WaitUntilReady+0xac>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     776:	e0 91 40 20 	lds	r30, 0x2040
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
     77a:	f0 91 41 20 	lds	r31, 0x2041
     77e:	81 81       	ldd	r24, Z+1	; 0x01
     780:	82 fd       	sbrc	r24, 2
     782:	17 c0       	rjmp	.+46     	; 0x7b2 <Endpoint_WaitUntilReady+0xb0>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     784:	e0 91 c6 04 	lds	r30, 0x04C6
     788:	f0 91 c7 04 	lds	r31, 0x04C7
     78c:	e0 50       	subi	r30, 0x00	; 0
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	8c 17       	cp	r24, r28
     796:	9d 07       	cpc	r25, r29
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     798:	09 f4       	brne	.+2      	; 0x79c <Endpoint_WaitUntilReady+0x9a>
     79a:	bf cf       	rjmp	.-130    	; 0x71a <Endpoint_WaitUntilReady+0x18>
     79c:	11 23       	and	r17, r17
     79e:	59 f0       	breq	.+22     	; 0x7b6 <Endpoint_WaitUntilReady+0xb4>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7a0:	11 50       	subi	r17, 0x01	; 1
     7a2:	ec 01       	movw	r28, r24
     7a4:	ba cf       	rjmp	.-140    	; 0x71a <Endpoint_WaitUntilReady+0x18>
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <Endpoint_WaitUntilReady+0xb6>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <Endpoint_WaitUntilReady+0xb6>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <Endpoint_WaitUntilReady+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <Endpoint_WaitUntilReady+0xb6>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	df 91       	pop	r29
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     7ba:	cf 91       	pop	r28
		}
	}
}
     7bc:	1f 91       	pop	r17
     7be:	08 95       	ret

000007c0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
	#if defined(USB_DEVICE_OPT_FULLSPEED)
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	else
	  CLK.USBCTRL = (((F_USB / 48000000) - 1) << CLK_USBPSDIV_gp);
     7c4:	e0 e4       	ldi	r30, 0x40	; 64
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	14 82       	std	Z+4, r1	; 0x04
	#endif
	
	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
     7ca:	84 81       	ldd	r24, Z+4	; 0x04
     7cc:	83 60       	ori	r24, 0x03	; 3
     7ce:	84 83       	std	Z+4, r24	; 0x04
			}

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
     7d0:	c0 ec       	ldi	r28, 0xC0	; 192
     7d2:	d4 e0       	ldi	r29, 0x04	; 4
     7d4:	1b 82       	std	Y+3, r1	; 0x03

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
     7d6:	4e d0       	rcall	.+156    	; 0x874 <USB_INT_DisableAllInterrupts>
     7d8:	54 d0       	rcall	.+168    	; 0x882 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7da:	88 81       	ld	r24, Y
     7dc:	8f 77       	andi	r24, 0x7F	; 127
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
     7de:	88 83       	st	Y, r24
     7e0:	88 81       	ld	r24, Y
     7e2:	80 68       	ori	r24, 0x80	; 128
				USB.CTRLA |=  USB_ENABLE_bm;
     7e4:	88 83       	st	Y, r24
     7e6:	10 92 8a 29 	sts	0x298A, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7ea:	10 92 86 29 	sts	0x2986, r1
	USB_Device_ConfigurationNumber  = 0;
     7ee:	10 92 88 29 	sts	0x2988, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7f2:	10 92 87 29 	sts	0x2987, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7f6:	88 81       	ld	r24, Y
     7f8:	80 64       	ori	r24, 0x40	; 64
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
     7fa:	88 83       	st	Y, r24
     7fc:	80 e8       	ldi	r24, 0x80	; 128
     7fe:	68 e4       	ldi	r22, 0x48	; 72
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
     800:	48 e0       	ldi	r20, 0x08	; 8
     802:	80 de       	rcall	.-768    	; 0x504 <Endpoint_ConfigureEndpoint_PRV>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	68 e4       	ldi	r22, 0x48	; 72
     808:	48 e0       	ldi	r20, 0x08	; 8

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
     80a:	7c de       	rcall	.-776    	; 0x504 <Endpoint_ConfigureEndpoint_PRV>
     80c:	88 85       	ldd	r24, Y+8	; 0x08
     80e:	80 64       	ori	r24, 0x40	; 64
     810:	88 87       	std	Y+8, r24	; 0x08
     812:	89 81       	ldd	r24, Y+1	; 0x01
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
     814:	81 60       	ori	r24, 0x01	; 1
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	df 91       	pop	r29
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     81e:	cf 93       	push	r28
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
     820:	df 93       	push	r29
			 *  \return  Mask containing the current Global Interrupt Enable Mask bit(s).
			 */
			static inline uint_reg_t GetGlobalInterruptMask(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();
     822:	2f b7       	in	r18, 0x3f	; 63
			 *  \ingroup Group_GlobalInt
			 */
			static inline void GlobalInterruptDisable(void) ATTR_ALWAYS_INLINE;
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();
     824:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
     826:	c0 ec       	ldi	r28, 0xC0	; 192
     828:	d1 e0       	ldi	r29, 0x01	; 1
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
     82e:	ea e1       	ldi	r30, 0x1A	; 26
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	e4 91       	lpm	r30, Z+
     834:	a0 ec       	ldi	r26, 0xC0	; 192
     836:	b4 e0       	ldi	r27, 0x04	; 4
     838:	da 96       	adiw	r26, 0x3a	; 58
     83a:	ec 93       	st	X, r30
     83c:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
     83e:	eb e1       	ldi	r30, 0x1B	; 27
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	e4 91       	lpm	r30, Z+
     844:	db 96       	adiw	r26, 0x3b	; 59
     846:	ec 93       	st	X, r30
     848:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = 0;
     84a:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
     84c:	84 e8       	ldi	r24, 0x84	; 132
     84e:	98 e2       	ldi	r25, 0x28	; 40
     850:	8e 7f       	andi	r24, 0xFE	; 254
     852:	16 96       	adiw	r26, 0x06	; 6
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
     85a:	8f e1       	ldi	r24, 0x1F	; 31
     85c:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
     85e:	83 e0       	ldi	r24, 0x03	; 3
     860:	18 96       	adiw	r26, 0x08	; 8
     862:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
     864:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif
	
	USB_IsInitialized = true;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 89 29 	sts	0x2989, r24
	
	USB_ResetInterface();
     86c:	a9 df       	rcall	.-174    	; 0x7c0 <USB_ResetInterface>
     86e:	df 91       	pop	r29
}
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
     874:	e0 ec       	ldi	r30, 0xC0	; 192
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	80 85       	ldd	r24, Z+8	; 0x08
     87a:	83 70       	andi	r24, 0x03	; 3
     87c:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
     87e:	11 86       	std	Z+9, r1	; 0x09
}
     880:	08 95       	ret

00000882 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
     882:	e0 ec       	ldi	r30, 0xC0	; 192
     884:	f4 e0       	ldi	r31, 0x04	; 4
     886:	8f ef       	ldi	r24, 0xFF	; 255
     888:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
     88a:	84 87       	std	Z+12, r24	; 0x0c
}
     88c:	08 95       	ret

0000088e <__vector_125>:

ISR(USB_BUSEVENT_vect)
{
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	2f 93       	push	r18
     89a:	3f 93       	push	r19
     89c:	4f 93       	push	r20
     89e:	5f 93       	push	r21
     8a0:	6f 93       	push	r22
     8a2:	7f 93       	push	r23
     8a4:	8f 93       	push	r24
     8a6:	9f 93       	push	r25
     8a8:	af 93       	push	r26
     8aa:	bf 93       	push	r27
     8ac:	ef 93       	push	r30
     8ae:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
     8b0:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8b4:	87 ff       	sbrs	r24, 7
     8b6:	09 c0       	rjmp	.+18     	; 0x8ca <__vector_125+0x3c>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
     8b8:	80 91 c8 04 	lds	r24, 0x04C8
     8bc:	87 ff       	sbrs	r24, 7
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <__vector_125+0x3c>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
     8c0:	80 e8       	ldi	r24, 0x80	; 128
     8c2:	e0 ec       	ldi	r30, 0xC0	; 192
     8c4:	f4 e0       	ldi	r31, 0x04	; 4
     8c6:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8c8:	d5 d5       	rcall	.+2986   	; 0x1474 <USB_Event_Stub>
     8ca:	80 91 ca 04 	lds	r24, 0x04CA
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
     8ce:	86 ff       	sbrs	r24, 6
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
     8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <__vector_125+0x52>
     8d2:	80 e4       	ldi	r24, 0x40	; 64
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
     8d4:	e0 ec       	ldi	r30, 0xC0	; 192
     8d6:	f4 e0       	ldi	r31, 0x04	; 4
     8d8:	82 87       	std	Z+10, r24	; 0x0a
     8da:	10 92 8a 29 	sts	0x298A, r1
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     8de:	f2 dc       	rcall	.-1564   	; 0x2c4 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     8e0:	80 91 ca 04 	lds	r24, 0x04CA
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
     8e4:	85 ff       	sbrs	r24, 5
     8e6:	12 c0       	rjmp	.+36     	; 0x90c <__vector_125+0x7e>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
     8e8:	80 e2       	ldi	r24, 0x20	; 32
     8ea:	e0 ec       	ldi	r30, 0xC0	; 192
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
     8ec:	f4 e0       	ldi	r31, 0x04	; 4
     8ee:	82 87       	std	Z+10, r24	; 0x0a
     8f0:	80 91 86 29 	lds	r24, 0x2986
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
     8f4:	88 23       	and	r24, r24
     8f6:	21 f4       	brne	.+8      	; 0x900 <__vector_125+0x72>
     8f8:	80 91 c3 04 	lds	r24, 0x04C3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
     8fc:	88 23       	and	r24, r24
     8fe:	11 f0       	breq	.+4      	; 0x904 <__vector_125+0x76>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	01 c0       	rjmp	.+2      	; 0x906 <__vector_125+0x78>
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	80 93 8a 29 	sts	0x298A, r24
     90a:	db dc       	rcall	.-1610   	; 0x2c2 <EVENT_USB_Device_Connect>
     90c:	e0 ec       	ldi	r30, 0xC0	; 192

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     90e:	f4 e0       	ldi	r31, 0x04	; 4
     910:	80 91 ca 04 	lds	r24, 0x04CA
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
     914:	84 ff       	sbrs	r24, 4
     916:	12 c0       	rjmp	.+36     	; 0x93c <__vector_125+0xae>
     918:	80 e1       	ldi	r24, 0x10	; 16
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
     91a:	82 87       	std	Z+10, r24	; 0x0a
     91c:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
     91e:	80 93 8a 29 	sts	0x298A, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
     922:	10 92 86 29 	sts	0x2986, r1
     926:	13 82       	std	Z+3, r1	; 0x03
		USB_Device_ConfigurationNumber = 0;
     928:	85 de       	rcall	.-758    	; 0x634 <Endpoint_ClearEndpoints>
     92a:	80 e8       	ldi	r24, 0x80	; 128
			}

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
     92c:	68 e4       	ldi	r22, 0x48	; 72

		USB_Device_SetDeviceAddress(0);

		Endpoint_ClearEndpoints();
     92e:	48 e0       	ldi	r20, 0x08	; 8
     930:	e9 dd       	rcall	.-1070   	; 0x504 <Endpoint_ConfigureEndpoint_PRV>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	68 e4       	ldi	r22, 0x48	; 72
     936:	48 e0       	ldi	r20, 0x08	; 8
     938:	e5 dd       	rcall	.-1078   	; 0x504 <Endpoint_ConfigureEndpoint_PRV>
     93a:	9c d5       	rcall	.+2872   	; 0x1474 <USB_Event_Stub>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
     93c:	ff 91       	pop	r31
     93e:	ef 91       	pop	r30
     940:	bf 91       	pop	r27
     942:	af 91       	pop	r26
     944:	9f 91       	pop	r25
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
     946:	8f 91       	pop	r24
     948:	7f 91       	pop	r23
	}
}
     94a:	6f 91       	pop	r22
     94c:	5f 91       	pop	r21
     94e:	4f 91       	pop	r20
     950:	3f 91       	pop	r19
     952:	2f 91       	pop	r18
     954:	0f 90       	pop	r0
     956:	0f be       	out	0x3f, r0	; 63
     958:	0f 90       	pop	r0
     95a:	1f 90       	pop	r1
     95c:	18 95       	reti

0000095e <Endpoint_SelectEndpoint>:
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address);
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
     95e:	28 2f       	mov	r18, r24
     960:	2f 70       	andi	r18, 0x0F	; 15

				USB_Endpoint_SelectedEndpoint = Address;
     962:	80 93 42 20 	sts	0x2042, r24
     966:	30 e0       	ldi	r19, 0x00	; 0

				if (Address & ENDPOINT_DIR_IN)
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
     968:	44 e8       	ldi	r20, 0x84	; 132
     96a:	50 e0       	ldi	r21, 0x00	; 0
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

				USB_Endpoint_SelectedEndpoint = Address;

				if (Address & ENDPOINT_DIR_IN)
     96c:	87 ff       	sbrs	r24, 7
     96e:	19 c0       	rjmp	.+50     	; 0x9a2 <Endpoint_SelectEndpoint+0x44>
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
     970:	24 9f       	mul	r18, r20
     972:	c0 01       	movw	r24, r0
     974:	25 9f       	mul	r18, r21
     976:	90 0d       	add	r25, r0
     978:	34 9f       	mul	r19, r20
     97a:	90 0d       	add	r25, r0
     97c:	11 24       	eor	r1, r1
     97e:	8b 57       	subi	r24, 0x7B	; 123
     980:	9f 4d       	sbci	r25, 0xDF	; 223
     982:	80 93 3e 20 	sts	0x203E, r24
     986:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].IN;
     98a:	80 91 c6 04 	lds	r24, 0x04C6
     98e:	90 91 c7 04 	lds	r25, 0x04C7
     992:	74 e0       	ldi	r23, 0x04	; 4
     994:	22 0f       	add	r18, r18
     996:	33 1f       	adc	r19, r19
     998:	7a 95       	dec	r23
     99a:	e1 f7       	brne	.-8      	; 0x994 <Endpoint_SelectEndpoint+0x36>
     99c:	28 5f       	subi	r18, 0xF8	; 248
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	16 c0       	rjmp	.+44     	; 0x9ce <Endpoint_SelectEndpoint+0x70>
				}
				else
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].OUT;
     9a2:	24 9f       	mul	r18, r20
     9a4:	c0 01       	movw	r24, r0
     9a6:	25 9f       	mul	r18, r21
     9a8:	90 0d       	add	r25, r0
     9aa:	34 9f       	mul	r19, r20
     9ac:	90 0d       	add	r25, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	8d 5b       	subi	r24, 0xBD	; 189
     9b2:	9f 4d       	sbci	r25, 0xDF	; 223
     9b4:	80 93 3e 20 	sts	0x203E, r24
     9b8:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].OUT;
     9bc:	80 91 c6 04 	lds	r24, 0x04C6
     9c0:	90 91 c7 04 	lds	r25, 0x04C7
     9c4:	64 e0       	ldi	r22, 0x04	; 4
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	6a 95       	dec	r22
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <Endpoint_SelectEndpoint+0x68>
     9ce:	82 0f       	add	r24, r18
     9d0:	93 1f       	adc	r25, r19
     9d2:	80 93 40 20 	sts	0x2040, r24
     9d6:	90 93 41 20 	sts	0x2041, r25
     9da:	08 95       	ret

000009dc <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	d8 2f       	mov	r29, r24
     9ea:	c9 2f       	mov	r28, r25
     9ec:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     9ee:	80 91 42 20 	lds	r24, 0x2042
     9f2:	80 68       	ori	r24, 0x80	; 128
     9f4:	b4 df       	rcall	.-152    	; 0x95e <Endpoint_SelectEndpoint>
     9f6:	80 91 91 29 	lds	r24, 0x2991

	if (Length > USB_ControlRequest.wLength)
     9fa:	90 91 92 29 	lds	r25, 0x2992
     9fe:	80 17       	cp	r24, r16
     a00:	91 07       	cpc	r25, r17
     a02:	28 f4       	brcc	.+10     	; 0xa0e <Endpoint_Write_Control_Stream_LE+0x32>
     a04:	8c 01       	movw	r16, r24
     a06:	ed 2e       	mov	r14, r29
     a08:	fc 2e       	mov	r15, r28
     a0a:	c0 e0       	ldi	r28, 0x00	; 0
     a0c:	a8 c0       	rjmp	.+336    	; 0xb5e <Endpoint_Write_Control_Stream_LE+0x182>
     a0e:	01 15       	cp	r16, r1
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a10:	11 05       	cpc	r17, r1
     a12:	c9 f7       	brne	.-14     	; 0xa06 <Endpoint_Write_Control_Stream_LE+0x2a>
     a14:	e0 91 40 20 	lds	r30, 0x2040
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
     a18:	f0 91 41 20 	lds	r31, 0x2041
     a1c:	a0 91 3e 20 	lds	r26, 0x203E
     a20:	b0 91 3f 20 	lds	r27, 0x203F
     a24:	af 5b       	subi	r26, 0xBF	; 191
     a26:	bf 4f       	sbci	r27, 0xFF	; 255
     a28:	8c 91       	ld	r24, X
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	82 83       	std	Z+2, r24	; 0x02
     a2e:	93 83       	std	Z+3, r25	; 0x03
     a30:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     a32:	8d 79       	andi	r24, 0x9D	; 157
     a34:	80 83       	st	Z, r24
     a36:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
     a3a:	f0 91 3f 20 	lds	r31, 0x203F
     a3e:	ef 5b       	subi	r30, 0xBF	; 191
     a40:	ff 4f       	sbci	r31, 0xFF	; 255
     a42:	10 82       	st	Z, r1
     a44:	e0 cf       	rjmp	.-64     	; 0xa06 <Endpoint_Write_Control_Stream_LE+0x2a>
     a46:	80 91 8a 29 	lds	r24, 0x298A
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a4a:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a4c:	09 f4       	brne	.+2      	; 0xa50 <Endpoint_Write_Control_Stream_LE+0x74>
     a4e:	ad c0       	rjmp	.+346    	; 0xbaa <Endpoint_Write_Control_Stream_LE+0x1ce>
     a50:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a52:	09 f4       	brne	.+2      	; 0xa56 <Endpoint_Write_Control_Stream_LE+0x7a>
     a54:	ac c0       	rjmp	.+344    	; 0xbae <Endpoint_Write_Control_Stream_LE+0x1d2>
     a56:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     a5a:	8f 77       	andi	r24, 0x7F	; 127
     a5c:	80 df       	rcall	.-256    	; 0x95e <Endpoint_SelectEndpoint>
     a5e:	e0 91 40 20 	lds	r30, 0x2040

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
     a62:	f0 91 41 20 	lds	r31, 0x2041
     a66:	80 81       	ld	r24, Z
     a68:	84 ff       	sbrs	r24, 4
     a6a:	0b c0       	rjmp	.+22     	; 0xa82 <Endpoint_Write_Control_Stream_LE+0xa6>
     a6c:	a0 91 3e 20 	lds	r26, 0x203E
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     a70:	b0 91 3f 20 	lds	r27, 0x203F
     a74:	82 81       	ldd	r24, Z+2	; 0x02
     a76:	93 81       	ldd	r25, Z+3	; 0x03
     a78:	a0 5c       	subi	r26, 0xC0	; 192
     a7a:	bf 4f       	sbci	r27, 0xFF	; 255
     a7c:	8c 93       	st	X, r24
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	97 c0       	rjmp	.+302    	; 0xbb0 <Endpoint_Write_Control_Stream_LE+0x1d4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a82:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     a86:	8f 77       	andi	r24, 0x7F	; 127
     a88:	6a df       	rcall	.-300    	; 0x95e <Endpoint_SelectEndpoint>
     a8a:	e0 91 40 20 	lds	r30, 0x2040
     a8e:	f0 91 41 20 	lds	r31, 0x2041

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
     a92:	80 81       	ld	r24, Z
     a94:	85 ff       	sbrs	r24, 5
     a96:	0a c0       	rjmp	.+20     	; 0xaac <Endpoint_Write_Control_Stream_LE+0xd0>
     a98:	a0 91 3e 20 	lds	r26, 0x203E
     a9c:	b0 91 3f 20 	lds	r27, 0x203F
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     aa0:	82 81       	ldd	r24, Z+2	; 0x02
     aa2:	93 81       	ldd	r25, Z+3	; 0x03
     aa4:	a0 5c       	subi	r26, 0xC0	; 192
     aa6:	bf 4f       	sbci	r27, 0xFF	; 255
     aa8:	8c 93       	st	X, r24
     aaa:	63 c0       	rjmp	.+198    	; 0xb72 <Endpoint_Write_Control_Stream_LE+0x196>
     aac:	80 91 42 20 	lds	r24, 0x2042
     ab0:	80 68       	ori	r24, 0x80	; 128
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     ab2:	55 df       	rcall	.-342    	; 0x95e <Endpoint_SelectEndpoint>
     ab4:	e0 91 40 20 	lds	r30, 0x2040
     ab8:	f0 91 41 20 	lds	r31, 0x2041

				return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
     abc:	80 81       	ld	r24, Z
     abe:	81 ff       	sbrs	r24, 1
     ac0:	4e c0       	rjmp	.+156    	; 0xb5e <Endpoint_Write_Control_Stream_LE+0x182>
     ac2:	80 91 42 20 	lds	r24, 0x2042
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     ac6:	20 91 3e 20 	lds	r18, 0x203E
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
     aca:	30 91 3f 20 	lds	r19, 0x203F
     ace:	87 ff       	sbrs	r24, 7
     ad0:	06 c0       	rjmp	.+12     	; 0xade <Endpoint_Write_Control_Stream_LE+0x102>
     ad2:	2f 5b       	subi	r18, 0xBF	; 191
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
     ad6:	d9 01       	movw	r26, r18
     ad8:	8c 91       	ld	r24, X
				  return USB_Endpoint_SelectedFIFO->Position;
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	1b c0       	rjmp	.+54     	; 0xb14 <Endpoint_Write_Control_Stream_LE+0x138>
     ade:	f9 01       	movw	r30, r18
     ae0:	e0 5c       	subi	r30, 0xC0	; 192
     ae2:	ff 4f       	sbci	r31, 0xFF	; 255
     ae4:	80 81       	ld	r24, Z
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
     ae6:	2f 5b       	subi	r18, 0xBF	; 191
     ae8:	3f 4f       	sbci	r19, 0xFF	; 255
     aea:	f9 01       	movw	r30, r18
     aec:	20 81       	ld	r18, Z
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	82 1b       	sub	r24, r18
     af2:	91 09       	sbc	r25, r1
     af4:	0f c0       	rjmp	.+30     	; 0xb14 <Endpoint_Write_Control_Stream_LE+0x138>
     af6:	d7 01       	movw	r26, r14
     af8:	3d 91       	ld	r19, X+
     afa:	7d 01       	movw	r14, r26
     afc:	df 01       	movw	r26, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     afe:	af 5b       	subi	r26, 0xBF	; 191
     b00:	bf 4f       	sbci	r27, 0xFF	; 255
     b02:	2c 91       	ld	r18, X
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
     b04:	e2 0f       	add	r30, r18
     b06:	f1 1d       	adc	r31, r1
     b08:	30 83       	st	Z, r19
     b0a:	2f 5f       	subi	r18, 0xFF	; 255
     b0c:	2c 93       	st	X, r18
     b0e:	01 50       	subi	r16, 0x01	; 1
     b10:	10 40       	sbci	r17, 0x00	; 0
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	e0 91 3e 20 	lds	r30, 0x203E
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     b18:	f0 91 3f 20 	lds	r31, 0x203F
				BytesInEndpoint++;
     b1c:	01 15       	cp	r16, r1
     b1e:	11 05       	cpc	r17, r1
     b20:	19 f0       	breq	.+6      	; 0xb28 <Endpoint_Write_Control_Stream_LE+0x14c>
     b22:	88 30       	cpi	r24, 0x08	; 8

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b24:	91 05       	cpc	r25, r1
     b26:	38 f3       	brcs	.-50     	; 0xaf6 <Endpoint_Write_Control_Stream_LE+0x11a>
     b28:	c1 e0       	ldi	r28, 0x01	; 1
     b2a:	88 30       	cpi	r24, 0x08	; 8
     b2c:	91 05       	cpc	r25, r1
     b2e:	09 f0       	breq	.+2      	; 0xb32 <Endpoint_Write_Control_Stream_LE+0x156>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b30:	c0 e0       	ldi	r28, 0x00	; 0
     b32:	a0 91 40 20 	lds	r26, 0x2040
     b36:	b0 91 41 20 	lds	r27, 0x2041
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
     b3a:	ef 5b       	subi	r30, 0xBF	; 191
     b3c:	ff 4f       	sbci	r31, 0xFF	; 255
     b3e:	80 81       	ld	r24, Z
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	12 96       	adiw	r26, 0x02	; 2
     b44:	8d 93       	st	X+, r24
     b46:	9c 93       	st	X, r25
     b48:	13 97       	sbiw	r26, 0x03	; 3
     b4a:	8c 91       	ld	r24, X
     b4c:	8d 79       	andi	r24, 0x9D	; 157
     b4e:	8c 93       	st	X, r24
     b50:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     b54:	f0 91 3f 20 	lds	r31, 0x203F
				USB_Endpoint_SelectedFIFO->Position  = 0;
     b58:	ef 5b       	subi	r30, 0xBF	; 191
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	10 82       	st	Z, r1
     b5e:	01 15       	cp	r16, r1
     b60:	11 05       	cpc	r17, r1
     b62:	09 f0       	breq	.+2      	; 0xb66 <Endpoint_Write_Control_Stream_LE+0x18a>
     b64:	70 cf       	rjmp	.-288    	; 0xa46 <Endpoint_Write_Control_Stream_LE+0x6a>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b66:	cc 23       	and	r28, r28
     b68:	09 f0       	breq	.+2      	; 0xb6c <Endpoint_Write_Control_Stream_LE+0x190>
     b6a:	6d cf       	rjmp	.-294    	; 0xa46 <Endpoint_Write_Control_Stream_LE+0x6a>
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <Endpoint_Write_Control_Stream_LE+0x196>
     b6e:	85 30       	cpi	r24, 0x05	; 5
     b70:	f1 f0       	breq	.+60     	; 0xbae <Endpoint_Write_Control_Stream_LE+0x1d2>
     b72:	80 91 42 20 	lds	r24, 0x2042
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b76:	8f 77       	andi	r24, 0x7F	; 127
     b78:	f2 de       	rcall	.-540    	; 0x95e <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     b7a:	a0 91 40 20 	lds	r26, 0x2040
     b7e:	b0 91 41 20 	lds	r27, 0x2041
     b82:	8c 91       	ld	r24, X

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
     b84:	85 ff       	sbrs	r24, 5
     b86:	0d c0       	rjmp	.+26     	; 0xba2 <Endpoint_Write_Control_Stream_LE+0x1c6>
     b88:	e0 91 3e 20 	lds	r30, 0x203E
     b8c:	f0 91 3f 20 	lds	r31, 0x203F
     b90:	12 96       	adiw	r26, 0x02	; 2
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     b92:	8d 91       	ld	r24, X+
     b94:	9c 91       	ld	r25, X
     b96:	13 97       	sbiw	r26, 0x03	; 3
     b98:	e0 5c       	subi	r30, 0xC0	; 192
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	80 83       	st	Z, r24
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <Endpoint_Write_Control_Stream_LE+0x1d4>
     ba2:	80 91 8a 29 	lds	r24, 0x298A
     ba6:	88 23       	and	r24, r24
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ba8:	11 f7       	brne	.-60     	; 0xb6e <Endpoint_Write_Control_Stream_LE+0x192>
     baa:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <Endpoint_Write_Control_Stream_LE+0x1d4>
     bae:	83 e0       	ldi	r24, 0x03	; 3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     bb8:	ff 90       	pop	r15
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     bba:	ef 90       	pop	r14
     bbc:	08 95       	ret

00000bbe <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	d8 2f       	mov	r29, r24
     bcc:	c9 2f       	mov	r28, r25
     bce:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     bd0:	80 91 42 20 	lds	r24, 0x2042
     bd4:	80 68       	ori	r24, 0x80	; 128
     bd6:	c3 de       	rcall	.-634    	; 0x95e <Endpoint_SelectEndpoint>
     bd8:	80 91 91 29 	lds	r24, 0x2991

	if (Length > USB_ControlRequest.wLength)
     bdc:	90 91 92 29 	lds	r25, 0x2992
     be0:	80 17       	cp	r24, r16
     be2:	91 07       	cpc	r25, r17
     be4:	28 f4       	brcc	.+10     	; 0xbf0 <Endpoint_Write_Control_PStream_LE+0x32>
     be6:	8c 01       	movw	r16, r24
     be8:	ed 2e       	mov	r14, r29
     bea:	fc 2e       	mov	r15, r28
     bec:	c0 e0       	ldi	r28, 0x00	; 0
     bee:	ac c0       	rjmp	.+344    	; 0xd48 <Endpoint_Write_Control_PStream_LE+0x18a>
     bf0:	01 15       	cp	r16, r1
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     bf2:	11 05       	cpc	r17, r1
     bf4:	c9 f7       	brne	.-14     	; 0xbe8 <Endpoint_Write_Control_PStream_LE+0x2a>
     bf6:	e0 91 40 20 	lds	r30, 0x2040
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
     bfa:	f0 91 41 20 	lds	r31, 0x2041
     bfe:	a0 91 3e 20 	lds	r26, 0x203E
     c02:	b0 91 3f 20 	lds	r27, 0x203F
     c06:	af 5b       	subi	r26, 0xBF	; 191
     c08:	bf 4f       	sbci	r27, 0xFF	; 255
     c0a:	8c 91       	ld	r24, X
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	82 83       	std	Z+2, r24	; 0x02
     c10:	93 83       	std	Z+3, r25	; 0x03
     c12:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     c14:	8d 79       	andi	r24, 0x9D	; 157
     c16:	80 83       	st	Z, r24
     c18:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
     c1c:	f0 91 3f 20 	lds	r31, 0x203F
     c20:	ef 5b       	subi	r30, 0xBF	; 191
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	10 82       	st	Z, r1
     c26:	e0 cf       	rjmp	.-64     	; 0xbe8 <Endpoint_Write_Control_PStream_LE+0x2a>
     c28:	80 91 8a 29 	lds	r24, 0x298A
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c2c:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c2e:	09 f4       	brne	.+2      	; 0xc32 <Endpoint_Write_Control_PStream_LE+0x74>
     c30:	b1 c0       	rjmp	.+354    	; 0xd94 <Endpoint_Write_Control_PStream_LE+0x1d6>
     c32:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c34:	09 f4       	brne	.+2      	; 0xc38 <Endpoint_Write_Control_PStream_LE+0x7a>
     c36:	b0 c0       	rjmp	.+352    	; 0xd98 <Endpoint_Write_Control_PStream_LE+0x1da>
     c38:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     c3c:	8f 77       	andi	r24, 0x7F	; 127
     c3e:	8f de       	rcall	.-738    	; 0x95e <Endpoint_SelectEndpoint>
     c40:	e0 91 40 20 	lds	r30, 0x2040

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
     c44:	f0 91 41 20 	lds	r31, 0x2041
     c48:	80 81       	ld	r24, Z
     c4a:	84 ff       	sbrs	r24, 4
     c4c:	0b c0       	rjmp	.+22     	; 0xc64 <Endpoint_Write_Control_PStream_LE+0xa6>
     c4e:	a0 91 3e 20 	lds	r26, 0x203E
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     c52:	b0 91 3f 20 	lds	r27, 0x203F
     c56:	82 81       	ldd	r24, Z+2	; 0x02
     c58:	93 81       	ldd	r25, Z+3	; 0x03
     c5a:	a0 5c       	subi	r26, 0xC0	; 192
     c5c:	bf 4f       	sbci	r27, 0xFF	; 255
     c5e:	8c 93       	st	X, r24
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	9b c0       	rjmp	.+310    	; 0xd9a <Endpoint_Write_Control_PStream_LE+0x1dc>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c64:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     c68:	8f 77       	andi	r24, 0x7F	; 127
     c6a:	79 de       	rcall	.-782    	; 0x95e <Endpoint_SelectEndpoint>
     c6c:	e0 91 40 20 	lds	r30, 0x2040
     c70:	f0 91 41 20 	lds	r31, 0x2041

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
     c74:	80 81       	ld	r24, Z
     c76:	85 ff       	sbrs	r24, 5
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <Endpoint_Write_Control_PStream_LE+0xd0>
     c7a:	a0 91 3e 20 	lds	r26, 0x203E
     c7e:	b0 91 3f 20 	lds	r27, 0x203F
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	93 81       	ldd	r25, Z+3	; 0x03
     c86:	a0 5c       	subi	r26, 0xC0	; 192
     c88:	bf 4f       	sbci	r27, 0xFF	; 255
     c8a:	8c 93       	st	X, r24
     c8c:	67 c0       	rjmp	.+206    	; 0xd5c <Endpoint_Write_Control_PStream_LE+0x19e>
     c8e:	80 91 42 20 	lds	r24, 0x2042
     c92:	80 68       	ori	r24, 0x80	; 128
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     c94:	64 de       	rcall	.-824    	; 0x95e <Endpoint_SelectEndpoint>
     c96:	e0 91 40 20 	lds	r30, 0x2040
     c9a:	f0 91 41 20 	lds	r31, 0x2041

				return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
     c9e:	80 81       	ld	r24, Z
     ca0:	81 ff       	sbrs	r24, 1
     ca2:	52 c0       	rjmp	.+164    	; 0xd48 <Endpoint_Write_Control_PStream_LE+0x18a>
     ca4:	80 91 42 20 	lds	r24, 0x2042
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     ca8:	20 91 3e 20 	lds	r18, 0x203E
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
     cac:	30 91 3f 20 	lds	r19, 0x203F
     cb0:	87 ff       	sbrs	r24, 7
     cb2:	06 c0       	rjmp	.+12     	; 0xcc0 <Endpoint_Write_Control_PStream_LE+0x102>
     cb4:	2f 5b       	subi	r18, 0xBF	; 191
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	f9 01       	movw	r30, r18
     cba:	80 81       	ld	r24, Z
				  return USB_Endpoint_SelectedFIFO->Position;
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	1e c0       	rjmp	.+60     	; 0xcfc <Endpoint_Write_Control_PStream_LE+0x13e>
     cc0:	f9 01       	movw	r30, r18
     cc2:	e0 5c       	subi	r30, 0xC0	; 192
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	80 81       	ld	r24, Z
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
     cc8:	2f 5b       	subi	r18, 0xBF	; 191
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	f9 01       	movw	r30, r18
     cce:	20 81       	ld	r18, Z
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	82 1b       	sub	r24, r18
     cd4:	91 09       	sbc	r25, r1
     cd6:	12 c0       	rjmp	.+36     	; 0xcfc <Endpoint_Write_Control_PStream_LE+0x13e>
     cd8:	f7 01       	movw	r30, r14
     cda:	54 91       	lpm	r21, Z+
     cdc:	d9 01       	movw	r26, r18
     cde:	af 5b       	subi	r26, 0xBF	; 191
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ce0:	bf 4f       	sbci	r27, 0xFF	; 255
     ce2:	4c 91       	ld	r20, X
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
     ce4:	f9 01       	movw	r30, r18
     ce6:	e4 0f       	add	r30, r20
     ce8:	f1 1d       	adc	r31, r1
     cea:	50 83       	st	Z, r21
     cec:	4f 5f       	subi	r20, 0xFF	; 255
     cee:	4c 93       	st	X, r20
     cf0:	08 94       	sec
     cf2:	e1 1c       	adc	r14, r1
     cf4:	f1 1c       	adc	r15, r1
     cf6:	01 50       	subi	r16, 0x01	; 1
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     cf8:	10 40       	sbci	r17, 0x00	; 0
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	20 91 3e 20 	lds	r18, 0x203E
				Length--;
     d00:	30 91 3f 20 	lds	r19, 0x203F
				BytesInEndpoint++;
     d04:	01 15       	cp	r16, r1
     d06:	11 05       	cpc	r17, r1
     d08:	19 f0       	breq	.+6      	; 0xd10 <Endpoint_Write_Control_PStream_LE+0x152>
     d0a:	88 30       	cpi	r24, 0x08	; 8

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d0c:	91 05       	cpc	r25, r1
     d0e:	20 f3       	brcs	.-56     	; 0xcd8 <Endpoint_Write_Control_PStream_LE+0x11a>
     d10:	c1 e0       	ldi	r28, 0x01	; 1
     d12:	88 30       	cpi	r24, 0x08	; 8
     d14:	91 05       	cpc	r25, r1
     d16:	09 f0       	breq	.+2      	; 0xd1a <Endpoint_Write_Control_PStream_LE+0x15c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     d18:	c0 e0       	ldi	r28, 0x00	; 0
     d1a:	a0 91 40 20 	lds	r26, 0x2040
     d1e:	b0 91 41 20 	lds	r27, 0x2041
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
     d22:	f9 01       	movw	r30, r18
     d24:	ef 5b       	subi	r30, 0xBF	; 191
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	80 81       	ld	r24, Z
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	12 96       	adiw	r26, 0x02	; 2
     d2e:	8d 93       	st	X+, r24
     d30:	9c 93       	st	X, r25
     d32:	13 97       	sbiw	r26, 0x03	; 3
     d34:	8c 91       	ld	r24, X
     d36:	8d 79       	andi	r24, 0x9D	; 157
     d38:	8c 93       	st	X, r24
     d3a:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     d3e:	f0 91 3f 20 	lds	r31, 0x203F
				USB_Endpoint_SelectedFIFO->Position  = 0;
     d42:	ef 5b       	subi	r30, 0xBF	; 191
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	10 82       	st	Z, r1
     d48:	01 15       	cp	r16, r1
     d4a:	11 05       	cpc	r17, r1
     d4c:	09 f0       	breq	.+2      	; 0xd50 <Endpoint_Write_Control_PStream_LE+0x192>
     d4e:	6c cf       	rjmp	.-296    	; 0xc28 <Endpoint_Write_Control_PStream_LE+0x6a>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     d50:	cc 23       	and	r28, r28
     d52:	09 f0       	breq	.+2      	; 0xd56 <Endpoint_Write_Control_PStream_LE+0x198>
     d54:	69 cf       	rjmp	.-302    	; 0xc28 <Endpoint_Write_Control_PStream_LE+0x6a>
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <Endpoint_Write_Control_PStream_LE+0x19e>
     d58:	85 30       	cpi	r24, 0x05	; 5
     d5a:	f1 f0       	breq	.+60     	; 0xd98 <Endpoint_Write_Control_PStream_LE+0x1da>
     d5c:	80 91 42 20 	lds	r24, 0x2042
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d60:	8f 77       	andi	r24, 0x7F	; 127
     d62:	fd dd       	rcall	.-1030   	; 0x95e <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     d64:	a0 91 40 20 	lds	r26, 0x2040
     d68:	b0 91 41 20 	lds	r27, 0x2041
     d6c:	8c 91       	ld	r24, X

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
     d6e:	85 ff       	sbrs	r24, 5
     d70:	0d c0       	rjmp	.+26     	; 0xd8c <Endpoint_Write_Control_PStream_LE+0x1ce>
     d72:	e0 91 3e 20 	lds	r30, 0x203E
     d76:	f0 91 3f 20 	lds	r31, 0x203F
     d7a:	12 96       	adiw	r26, 0x02	; 2
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     d7c:	8d 91       	ld	r24, X+
     d7e:	9c 91       	ld	r25, X
     d80:	13 97       	sbiw	r26, 0x03	; 3
     d82:	e0 5c       	subi	r30, 0xC0	; 192
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 83       	st	Z, r24
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <Endpoint_Write_Control_PStream_LE+0x1dc>
     d8c:	80 91 8a 29 	lds	r24, 0x298A
     d90:	88 23       	and	r24, r24
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     d92:	11 f7       	brne	.-60     	; 0xd58 <Endpoint_Write_Control_PStream_LE+0x19a>
     d94:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <Endpoint_Write_Control_PStream_LE+0x1dc>
     d98:	83 e0       	ldi	r24, 0x03	; 3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     da2:	ff 90       	pop	r15
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     da4:	ef 90       	pop	r14
     da6:	08 95       	ret

00000da8 <Endpoint_SelectEndpoint>:
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address);
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
     da8:	28 2f       	mov	r18, r24
     daa:	2f 70       	andi	r18, 0x0F	; 15

				USB_Endpoint_SelectedEndpoint = Address;
     dac:	80 93 42 20 	sts	0x2042, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0

				if (Address & ENDPOINT_DIR_IN)
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
     db2:	44 e8       	ldi	r20, 0x84	; 132
     db4:	50 e0       	ldi	r21, 0x00	; 0
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

				USB_Endpoint_SelectedEndpoint = Address;

				if (Address & ENDPOINT_DIR_IN)
     db6:	87 ff       	sbrs	r24, 7
     db8:	19 c0       	rjmp	.+50     	; 0xdec <Endpoint_SelectEndpoint+0x44>
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
     dba:	24 9f       	mul	r18, r20
     dbc:	c0 01       	movw	r24, r0
     dbe:	25 9f       	mul	r18, r21
     dc0:	90 0d       	add	r25, r0
     dc2:	34 9f       	mul	r19, r20
     dc4:	90 0d       	add	r25, r0
     dc6:	11 24       	eor	r1, r1
     dc8:	8b 57       	subi	r24, 0x7B	; 123
     dca:	9f 4d       	sbci	r25, 0xDF	; 223
     dcc:	80 93 3e 20 	sts	0x203E, r24
     dd0:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].IN;
     dd4:	80 91 c6 04 	lds	r24, 0x04C6
     dd8:	90 91 c7 04 	lds	r25, 0x04C7
     ddc:	74 e0       	ldi	r23, 0x04	; 4
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	7a 95       	dec	r23
     de4:	e1 f7       	brne	.-8      	; 0xdde <Endpoint_SelectEndpoint+0x36>
     de6:	28 5f       	subi	r18, 0xF8	; 248
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
     dea:	16 c0       	rjmp	.+44     	; 0xe18 <Endpoint_SelectEndpoint+0x70>
				}
				else
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].OUT;
     dec:	24 9f       	mul	r18, r20
     dee:	c0 01       	movw	r24, r0
     df0:	25 9f       	mul	r18, r21
     df2:	90 0d       	add	r25, r0
     df4:	34 9f       	mul	r19, r20
     df6:	90 0d       	add	r25, r0
     df8:	11 24       	eor	r1, r1
     dfa:	8d 5b       	subi	r24, 0xBD	; 189
     dfc:	9f 4d       	sbci	r25, 0xDF	; 223
     dfe:	80 93 3e 20 	sts	0x203E, r24
     e02:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].OUT;
     e06:	80 91 c6 04 	lds	r24, 0x04C6
     e0a:	90 91 c7 04 	lds	r25, 0x04C7
     e0e:	64 e0       	ldi	r22, 0x04	; 4
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	6a 95       	dec	r22
     e16:	e1 f7       	brne	.-8      	; 0xe10 <Endpoint_SelectEndpoint+0x68>
     e18:	82 0f       	add	r24, r18
     e1a:	93 1f       	adc	r25, r19
     e1c:	80 93 40 20 	sts	0x2040, r24
     e20:	90 93 41 20 	sts	0x2041, r25
     e24:	08 95       	ret

00000e26 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	ec 97       	sbiw	r28, 0x3c	; 60
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	28 e0       	ldi	r18, 0x08	; 8
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     e3a:	4b e8       	ldi	r20, 0x8B	; 139
     e3c:	59 e2       	ldi	r21, 0x29	; 41
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
     e3e:	80 91 3e 20 	lds	r24, 0x203E
     e42:	90 91 3f 20 	lds	r25, 0x203F
     e46:	dc 01       	movw	r26, r24
     e48:	af 5b       	subi	r26, 0xBF	; 191
     e4a:	bf 4f       	sbci	r27, 0xFF	; 255
     e4c:	3c 91       	ld	r19, X
     e4e:	83 0f       	add	r24, r19
     e50:	91 1d       	adc	r25, r1
     e52:	fc 01       	movw	r30, r24
     e54:	80 81       	ld	r24, Z
     e56:	3f 5f       	subi	r19, 0xFF	; 255
     e58:	3c 93       	st	X, r19

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     e5a:	da 01       	movw	r26, r20
     e5c:	8d 93       	st	X+, r24
     e5e:	ad 01       	movw	r20, r26
     e60:	21 50       	subi	r18, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     e62:	69 f7       	brne	.-38     	; 0xe3e <USB_Device_ProcessControlRequest+0x18>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     e64:	30 da       	rcall	.-2976   	; 0x2c6 <EVENT_USB_Device_ControlRequest>
     e66:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     e6a:	8f 77       	andi	r24, 0x7F	; 127
     e6c:	9d df       	rcall	.-198    	; 0xda8 <Endpoint_SelectEndpoint>
     e6e:	a0 91 40 20 	lds	r26, 0x2040

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
     e72:	b0 91 41 20 	lds	r27, 0x2041
     e76:	8c 91       	ld	r24, X
     e78:	84 ff       	sbrs	r24, 4
     e7a:	9f c2       	rjmp	.+1342   	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
     e7c:	e0 91 3e 20 	lds	r30, 0x203E
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     e80:	f0 91 3f 20 	lds	r31, 0x203F
     e84:	12 96       	adiw	r26, 0x02	; 2
     e86:	8d 91       	ld	r24, X+
     e88:	9c 91       	ld	r25, X
     e8a:	13 97       	sbiw	r26, 0x03	; 3
     e8c:	e0 5c       	subi	r30, 0xC0	; 192
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 83       	st	Z, r24
     e92:	80 91 8b 29 	lds	r24, 0x298B

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     e96:	20 91 8c 29 	lds	r18, 0x298C

		switch (USB_ControlRequest.bRequest)
     e9a:	25 30       	cpi	r18, 0x05	; 5
     e9c:	09 f4       	brne	.+2      	; 0xea0 <USB_Device_ProcessControlRequest+0x7a>
     e9e:	f4 c0       	rjmp	.+488    	; 0x1088 <USB_Device_ProcessControlRequest+0x262>
     ea0:	26 30       	cpi	r18, 0x06	; 6
     ea2:	48 f4       	brcc	.+18     	; 0xeb6 <USB_Device_ProcessControlRequest+0x90>
     ea4:	21 30       	cpi	r18, 0x01	; 1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <USB_Device_ProcessControlRequest+0x84>
     ea8:	6c c0       	rjmp	.+216    	; 0xf82 <USB_Device_ProcessControlRequest+0x15c>
     eaa:	21 30       	cpi	r18, 0x01	; 1
     eac:	70 f0       	brcs	.+28     	; 0xeca <USB_Device_ProcessControlRequest+0xa4>
     eae:	23 30       	cpi	r18, 0x03	; 3
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <USB_Device_ProcessControlRequest+0x8e>
     eb2:	83 c2       	rjmp	.+1286   	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
     eb4:	66 c0       	rjmp	.+204    	; 0xf82 <USB_Device_ProcessControlRequest+0x15c>
     eb6:	28 30       	cpi	r18, 0x08	; 8
     eb8:	09 f4       	brne	.+2      	; 0xebc <USB_Device_ProcessControlRequest+0x96>
     eba:	e6 c1       	rjmp	.+972    	; 0x1288 <USB_Device_ProcessControlRequest+0x462>
     ebc:	29 30       	cpi	r18, 0x09	; 9
     ebe:	09 f4       	brne	.+2      	; 0xec2 <USB_Device_ProcessControlRequest+0x9c>
     ec0:	35 c2       	rjmp	.+1130   	; 0x132c <USB_Device_ProcessControlRequest+0x506>
     ec2:	26 30       	cpi	r18, 0x06	; 6
     ec4:	09 f0       	breq	.+2      	; 0xec8 <USB_Device_ProcessControlRequest+0xa2>
     ec6:	79 c2       	rjmp	.+1266   	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
     ec8:	2a c1       	rjmp	.+596    	; 0x111e <USB_Device_ProcessControlRequest+0x2f8>
     eca:	80 38       	cpi	r24, 0x80	; 128
     ecc:	21 f0       	breq	.+8      	; 0xed6 <USB_Device_ProcessControlRequest+0xb0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ece:	82 38       	cpi	r24, 0x82	; 130
     ed0:	09 f0       	breq	.+2      	; 0xed4 <USB_Device_ProcessControlRequest+0xae>
     ed2:	73 c2       	rjmp	.+1254   	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <USB_Device_ProcessControlRequest+0xc0>
     ed6:	10 91 87 29 	lds	r17, 0x2987
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     eda:	80 91 88 29 	lds	r24, 0x2988
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ede:	88 23       	and	r24, r24
     ee0:	81 f0       	breq	.+32     	; 0xf02 <USB_Device_ProcessControlRequest+0xdc>
     ee2:	12 60       	ori	r17, 0x02	; 2
     ee4:	0e c0       	rjmp	.+28     	; 0xf02 <USB_Device_ProcessControlRequest+0xdc>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ee6:	80 91 8f 29 	lds	r24, 0x298F
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     eea:	8f 70       	andi	r24, 0x0F	; 15
     eec:	5d df       	rcall	.-326    	; 0xda8 <Endpoint_SelectEndpoint>
     eee:	e0 91 40 20 	lds	r30, 0x2040
     ef2:	f0 91 41 20 	lds	r31, 0x2041
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	11 e0       	ldi	r17, 0x01	; 1
     efa:	82 ff       	sbrs	r24, 2
     efc:	10 e0       	ldi	r17, 0x00	; 0

			CurrentStatus = Endpoint_IsStalled();
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	53 df       	rcall	.-346    	; 0xda8 <Endpoint_SelectEndpoint>
     f02:	80 91 42 20 	lds	r24, 0x2042

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     f06:	8f 77       	andi	r24, 0x7F	; 127
     f08:	4f df       	rcall	.-354    	; 0xda8 <Endpoint_SelectEndpoint>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     f0a:	e0 91 40 20 	lds	r30, 0x2040
     f0e:	f0 91 41 20 	lds	r31, 0x2041
     f12:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     f14:	8d 78       	andi	r24, 0x8D	; 141
     f16:	80 83       	st	Z, r24
     f18:	e0 91 40 20 	lds	r30, 0x2040
     f1c:	f0 91 41 20 	lds	r31, 0x2041
     f20:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
     f22:	81 60       	ori	r24, 0x01	; 1
     f24:	80 83       	st	Z, r24
     f26:	e0 91 3e 20 	lds	r30, 0x203E
     f2a:	f0 91 3f 20 	lds	r31, 0x203F
     f2e:	ef 5b       	subi	r30, 0xBF	; 191
				USB_Endpoint_SelectedFIFO->Position  = 0;
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	10 82       	st	Z, r1
     f34:	80 91 42 20 	lds	r24, 0x2042
     f38:	80 68       	ori	r24, 0x80	; 128
     f3a:	36 df       	rcall	.-404    	; 0xda8 <Endpoint_SelectEndpoint>
     f3c:	e0 91 40 20 	lds	r30, 0x2040

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     f40:	f0 91 41 20 	lds	r31, 0x2041
     f44:	80 81       	ld	r24, Z
     f46:	81 60       	ori	r24, 0x01	; 1
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
     f48:	80 83       	st	Z, r24
     f4a:	80 91 3e 20 	lds	r24, 0x203E
     f4e:	90 91 3f 20 	lds	r25, 0x203F
     f52:	fc 01       	movw	r30, r24
     f54:	ef 5b       	subi	r30, 0xBF	; 191
				USB_Endpoint_SelectedFIFO->Position  = 0;
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	10 82       	st	Z, r1
     f5a:	20 81       	ld	r18, Z
     f5c:	82 0f       	add	r24, r18
     f5e:	91 1d       	adc	r25, r1
     f60:	dc 01       	movw	r26, r24
     f62:	1c 93       	st	X, r17
     f64:	2f 5f       	subi	r18, 0xFF	; 255
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
     f66:	20 83       	st	Z, r18
     f68:	80 91 3e 20 	lds	r24, 0x203E
     f6c:	90 91 3f 20 	lds	r25, 0x203F
     f70:	fc 01       	movw	r30, r24
     f72:	ef 5b       	subi	r30, 0xBF	; 191
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	20 81       	ld	r18, Z
     f78:	82 0f       	add	r24, r18
     f7a:	91 1d       	adc	r25, r1
     f7c:	dc 01       	movw	r26, r24
     f7e:	1c 92       	st	X, r1
     f80:	b9 c1       	rjmp	.+882    	; 0x12f4 <USB_Device_ProcessControlRequest+0x4ce>
     f82:	88 23       	and	r24, r24
     f84:	19 f0       	breq	.+6      	; 0xf8c <USB_Device_ProcessControlRequest+0x166>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	09 f0       	breq	.+2      	; 0xf8c <USB_Device_ProcessControlRequest+0x166>
     f8a:	17 c2       	rjmp	.+1070   	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
     f8c:	90 e0       	ldi	r25, 0x00	; 0
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f8e:	8f 71       	andi	r24, 0x1F	; 31
     f90:	90 70       	andi	r25, 0x00	; 0
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <USB_Device_ProcessControlRequest+0x17a>
     f96:	82 30       	cpi	r24, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     f98:	91 05       	cpc	r25, r1
     f9a:	09 f0       	breq	.+2      	; 0xf9e <USB_Device_ProcessControlRequest+0x178>
     f9c:	0e c2       	rjmp	.+1052   	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
     f9e:	0b c0       	rjmp	.+22     	; 0xfb6 <USB_Device_ProcessControlRequest+0x190>
     fa0:	80 91 8d 29 	lds	r24, 0x298D
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	09 f0       	breq	.+2      	; 0xfaa <USB_Device_ProcessControlRequest+0x184>
     fa8:	08 c2       	rjmp	.+1040   	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
     faa:	23 30       	cpi	r18, 0x03	; 3
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     fac:	09 f0       	breq	.+2      	; 0xfb0 <USB_Device_ProcessControlRequest+0x18a>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	80 93 88 29 	sts	0x2988, r24
     fb4:	43 c0       	rjmp	.+134    	; 0x103c <USB_Device_ProcessControlRequest+0x216>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     fb6:	80 91 8d 29 	lds	r24, 0x298D
     fba:	88 23       	and	r24, r24
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <USB_Device_ProcessControlRequest+0x19a>
     fbe:	3e c0       	rjmp	.+124    	; 0x103c <USB_Device_ProcessControlRequest+0x216>
     fc0:	10 91 8f 29 	lds	r17, 0x298F

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     fc4:	1f 70       	andi	r17, 0x0F	; 15
     fc6:	09 f4       	brne	.+2      	; 0xfca <USB_Device_ProcessControlRequest+0x1a4>
     fc8:	f8 c1       	rjmp	.+1008   	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
     fca:	81 2f       	mov	r24, r17
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     fcc:	ed de       	rcall	.-550    	; 0xda8 <Endpoint_SelectEndpoint>
     fce:	80 91 8c 29 	lds	r24, 0x298C

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     fd2:	e0 91 40 20 	lds	r30, 0x2040
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
     fd6:	f0 91 41 20 	lds	r31, 0x2041
     fda:	83 30       	cpi	r24, 0x03	; 3

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     fdc:	b9 f4       	brne	.+46     	; 0x100c <USB_Device_ProcessControlRequest+0x1e6>
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	84 60       	ori	r24, 0x04	; 4
     fe2:	81 83       	std	Z+1, r24	; 0x01
     fe4:	e0 91 40 20 	lds	r30, 0x2040
     fe8:	f0 91 41 20 	lds	r31, 0x2041
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
     fec:	81 81       	ldd	r24, Z+1	; 0x01
     fee:	80 7c       	andi	r24, 0xC0	; 192
     ff0:	80 34       	cpi	r24, 0x40	; 64

				if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
     ff2:	21 f5       	brne	.+72     	; 0x103c <USB_Device_ProcessControlRequest+0x216>
     ff4:	80 91 42 20 	lds	r24, 0x2042
     ff8:	80 58       	subi	r24, 0x80	; 128
     ffa:	d6 de       	rcall	.-596    	; 0xda8 <Endpoint_SelectEndpoint>
     ffc:	e0 91 40 20 	lds	r30, 0x2040
    1000:	f0 91 41 20 	lds	r31, 0x2041
				{
					Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    1004:	81 81       	ldd	r24, Z+1	; 0x01
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	81 83       	std	Z+1, r24	; 0x01
    100a:	18 c0       	rjmp	.+48     	; 0x103c <USB_Device_ProcessControlRequest+0x216>
					USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    100c:	81 81       	ldd	r24, Z+1	; 0x01
    100e:	8b 7f       	andi	r24, 0xFB	; 251
    1010:	81 83       	std	Z+1, r24	; 0x01
    1012:	81 2f       	mov	r24, r17
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	24 e8       	ldi	r18, 0x84	; 132
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	82 9f       	mul	r24, r18
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    101c:	f0 01       	movw	r30, r0
    101e:	83 9f       	mul	r24, r19
    1020:	f0 0d       	add	r31, r0
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    1022:	92 9f       	mul	r25, r18
    1024:	f0 0d       	add	r31, r0
    1026:	11 24       	eor	r1, r1
    1028:	ec 57       	subi	r30, 0x7C	; 124
    102a:	ff 4d       	sbci	r31, 0xDF	; 223
    102c:	10 82       	st	Z, r1
    102e:	e0 91 40 20 	lds	r30, 0x2040
    1032:	f0 91 41 20 	lds	r31, 0x2041
    1036:	80 81       	ld	r24, Z
    1038:	8e 7f       	andi	r24, 0xFE	; 254
    103a:	80 83       	st	Z, r24
    103c:	80 e0       	ldi	r24, 0x00	; 0

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    103e:	b4 de       	rcall	.-664    	; 0xda8 <Endpoint_SelectEndpoint>
    1040:	80 91 42 20 	lds	r24, 0x2042
    1044:	8f 77       	andi	r24, 0x7F	; 127
    1046:	b0 de       	rcall	.-672    	; 0xda8 <Endpoint_SelectEndpoint>
    1048:	e0 91 40 20 	lds	r30, 0x2040
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    104c:	f0 91 41 20 	lds	r31, 0x2041
    1050:	80 81       	ld	r24, Z
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1052:	8d 78       	andi	r24, 0x8D	; 141
    1054:	80 83       	st	Z, r24
    1056:	e0 91 40 20 	lds	r30, 0x2040
    105a:	f0 91 41 20 	lds	r31, 0x2041
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    105e:	80 81       	ld	r24, Z
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	80 83       	st	Z, r24
    1064:	e0 91 3e 20 	lds	r30, 0x203E
    1068:	f0 91 3f 20 	lds	r31, 0x203F
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    106c:	ef 5b       	subi	r30, 0xBF	; 191
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	10 82       	st	Z, r1
    1072:	80 91 42 20 	lds	r24, 0x2042
    1076:	80 68       	ori	r24, 0x80	; 128
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1078:	97 de       	rcall	.-722    	; 0xda8 <Endpoint_SelectEndpoint>
    107a:	e0 91 40 20 	lds	r30, 0x2040
    107e:	f0 91 41 20 	lds	r31, 0x2041
    1082:	80 81       	ld	r24, Z
    1084:	81 60       	ori	r24, 0x01	; 1

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1086:	48 c1       	rjmp	.+656    	; 0x1318 <USB_Device_ProcessControlRequest+0x4f2>
    1088:	88 23       	and	r24, r24
    108a:	09 f0       	breq	.+2      	; 0x108e <USB_Device_ProcessControlRequest+0x268>
    108c:	96 c1       	rjmp	.+812    	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
    108e:	00 91 8d 29 	lds	r16, 0x298D
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1092:	0f 77       	andi	r16, 0x7F	; 127
    1094:	1f b7       	in	r17, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	80 91 42 20 	lds	r24, 0x2042
    109c:	8f 77       	andi	r24, 0x7F	; 127
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    109e:	84 de       	rcall	.-760    	; 0xda8 <Endpoint_SelectEndpoint>
    10a0:	e0 91 40 20 	lds	r30, 0x2040
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    10a4:	f0 91 41 20 	lds	r31, 0x2041
    10a8:	80 81       	ld	r24, Z
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    10aa:	8d 78       	andi	r24, 0x8D	; 141
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    10ac:	80 83       	st	Z, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    10ae:	e0 91 40 20 	lds	r30, 0x2040
    10b2:	f0 91 41 20 	lds	r31, 0x2041
    10b6:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	80 83       	st	Z, r24
    10bc:	e0 91 3e 20 	lds	r30, 0x203E
    10c0:	f0 91 3f 20 	lds	r31, 0x203F
    10c4:	ef 5b       	subi	r30, 0xBF	; 191
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	10 82       	st	Z, r1
    10ca:	80 91 42 20 	lds	r24, 0x2042
    10ce:	80 68       	ori	r24, 0x80	; 128
    10d0:	6b de       	rcall	.-810    	; 0xda8 <Endpoint_SelectEndpoint>
    10d2:	e0 91 40 20 	lds	r30, 0x2040
				USB_Endpoint_SelectedFIFO->Position  = 0;
    10d6:	f0 91 41 20 	lds	r31, 0x2041
    10da:	80 81       	ld	r24, Z
    10dc:	81 60       	ori	r24, 0x01	; 1
    10de:	80 83       	st	Z, r24
    10e0:	e0 91 3e 20 	lds	r30, 0x203E

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    10e4:	f0 91 3f 20 	lds	r31, 0x203F
    10e8:	ef 5b       	subi	r30, 0xBF	; 191
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    10ec:	10 82       	st	Z, r1
    10ee:	bd da       	rcall	.-2694   	; 0x66a <Endpoint_ClearStatusStage>
    10f0:	80 91 42 20 	lds	r24, 0x2042
    10f4:	80 68       	ori	r24, 0x80	; 128
    10f6:	58 de       	rcall	.-848    	; 0xda8 <Endpoint_SelectEndpoint>
    10f8:	e0 91 40 20 	lds	r30, 0x2040
				USB_Endpoint_SelectedFIFO->Position  = 0;
    10fc:	f0 91 41 20 	lds	r31, 0x2041
    1100:	80 81       	ld	r24, Z
    1102:	81 ff       	sbrs	r24, 1
    1104:	f5 cf       	rjmp	.-22     	; 0x10f0 <USB_Device_ProcessControlRequest+0x2ca>
    1106:	e0 ec       	ldi	r30, 0xC0	; 192
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1108:	f4 e0       	ldi	r31, 0x04	; 4
    110a:	03 83       	std	Z+3, r16	; 0x03
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    110c:	00 23       	and	r16, r16
    110e:	11 f0       	breq	.+4      	; 0x1114 <USB_Device_ProcessControlRequest+0x2ee>
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <USB_Device_ProcessControlRequest+0x2f0>
    1114:	82 e0       	ldi	r24, 0x02	; 2

				return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    1116:	80 93 8a 29 	sts	0x298A, r24
    111a:	1f bf       	out	0x3f, r17	; 63
    111c:	4e c1       	rjmp	.+668    	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
    111e:	80 58       	subi	r24, 0x80	; 128

	while (!(Endpoint_IsINReady()));
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	08 f0       	brcs	.+2      	; 0x1126 <USB_Device_ProcessControlRequest+0x300>
			}

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1124:	4a c1       	rjmp	.+660    	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
    1126:	80 91 8d 29 	lds	r24, 0x298D

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    112a:	90 91 8e 29 	lds	r25, 0x298E
    112e:	b3 e0       	ldi	r27, 0x03	; 3
    1130:	8c 3d       	cpi	r24, 0xDC	; 220
    1132:	9b 07       	cpc	r25, r27
    1134:	09 f0       	breq	.+2      	; 0x1138 <USB_Device_ProcessControlRequest+0x312>
    1136:	60 c0       	rjmp	.+192    	; 0x11f8 <USB_Device_ProcessControlRequest+0x3d2>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1138:	83 e0       	ldi	r24, 0x03	; 3
				#endif

				GCC_MEMORY_BARRIER();
    113a:	8c 83       	std	Y+4, r24	; 0x04
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    113c:	8a e3       	ldi	r24, 0x3A	; 58
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	0f b7       	in	r16, 0x3f	; 63
    1142:	f8 94       	cli
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1144:	de 01       	movw	r26, r28
    1146:	13 96       	adiw	r26, 0x03	; 3
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	48 e0       	ldi	r20, 0x08	; 8
    114e:	60 ec       	ldi	r22, 0xC0	; 192
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	52 e0       	ldi	r21, 0x02	; 2
    1154:	fb 01       	movw	r30, r22
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1156:	52 87       	std	Z+10, r21	; 0x0a
    1158:	e4 2f       	mov	r30, r20
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	24 91       	lpm	r18, Z+
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    115e:	fb 01       	movw	r30, r22
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    1160:	12 86       	std	Z+10, r1	; 0x0a
				#endif

				GCC_MEMORY_BARRIER();
    1162:	80 ff       	sbrs	r24, 0
    1164:	03 c0       	rjmp	.+6      	; 0x116c <USB_Device_ProcessControlRequest+0x346>
    1166:	22 95       	swap	r18
    1168:	2f 70       	andi	r18, 0x0F	; 15
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    116a:	4f 5f       	subi	r20, 0xFF	; 255

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    116c:	e2 2f       	mov	r30, r18
    116e:	ef 70       	andi	r30, 0x0F	; 15
    1170:	2e 2f       	mov	r18, r30
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	ea 30       	cpi	r30, 0x0A	; 10
					SerialByte = pgm_read_byte(SigReadAddress);
    1176:	18 f0       	brcs	.+6      	; 0x117e <USB_Device_ProcessControlRequest+0x358>
    1178:	29 5c       	subi	r18, 0xC9	; 201
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
					NVM.CMD    = 0;
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <USB_Device_ProcessControlRequest+0x35c>
    117e:	20 5d       	subi	r18, 0xD0	; 208

					if (SerialCharNum & 0x01)
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	12 96       	adiw	r26, 0x02	; 2
					{
						SerialByte >>= 4;
    1184:	2d 93       	st	X+, r18
    1186:	3c 93       	st	X, r19
						SigReadAddress++;
    1188:	13 97       	sbiw	r26, 0x03	; 3
					}

					SerialByte &= 0x0F;
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	12 96       	adiw	r26, 0x02	; 2
    118e:	8c 31       	cpi	r24, 0x1C	; 28
    1190:	91 05       	cpc	r25, r1

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1192:	01 f7       	brne	.-64     	; 0x1154 <USB_Device_ProcessControlRequest+0x32e>
    1194:	0f bf       	out	0x3f, r16	; 63
    1196:	80 91 42 20 	lds	r24, 0x2042
    119a:	8f 77       	andi	r24, 0x7F	; 127
    119c:	05 de       	rcall	.-1014   	; 0xda8 <Endpoint_SelectEndpoint>
    119e:	e0 91 40 20 	lds	r30, 0x2040
    11a2:	f0 91 41 20 	lds	r31, 0x2041
    11a6:	80 81       	ld	r24, Z
    11a8:	8d 78       	andi	r24, 0x8D	; 141
    11aa:	80 83       	st	Z, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11ac:	e0 91 40 20 	lds	r30, 0x2040
    11b0:	f0 91 41 20 	lds	r31, 0x2041
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    11b4:	80 81       	ld	r24, Z
    11b6:	81 60       	ori	r24, 0x01	; 1
    11b8:	80 83       	st	Z, r24
    11ba:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    11be:	f0 91 3f 20 	lds	r31, 0x203F
    11c2:	ef 5b       	subi	r30, 0xBF	; 191
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	10 82       	st	Z, r1
    11c8:	80 91 42 20 	lds	r24, 0x2042
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    11cc:	80 68       	ori	r24, 0x80	; 128
    11ce:	ec dd       	rcall	.-1064   	; 0xda8 <Endpoint_SelectEndpoint>
    11d0:	e0 91 40 20 	lds	r30, 0x2040
    11d4:	f0 91 41 20 	lds	r31, 0x2041
    11d8:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedFIFO->Position  = 0;
    11da:	81 60       	ori	r24, 0x01	; 1
    11dc:	80 83       	st	Z, r24
    11de:	e0 91 3e 20 	lds	r30, 0x203E
    11e2:	f0 91 3f 20 	lds	r31, 0x203F
    11e6:	ef 5b       	subi	r30, 0xBF	; 191

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	10 82       	st	Z, r1
    11ec:	ce 01       	movw	r24, r28
    11ee:	03 96       	adiw	r24, 0x03	; 3
    11f0:	6a e3       	ldi	r22, 0x3A	; 58
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	f3 db       	rcall	.-2074   	; 0x9dc <Endpoint_Write_Control_Stream_LE>
    11f6:	39 c0       	rjmp	.+114    	; 0x126a <USB_Device_ProcessControlRequest+0x444>
    11f8:	60 91 8f 29 	lds	r22, 0x298F
    11fc:	ae 01       	movw	r20, r28
    11fe:	4f 5f       	subi	r20, 0xFF	; 255
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
    1202:	15 d9       	rcall	.-3542   	; 0x42e <CALLBACK_USB_GetDescriptor>
    1204:	8c 01       	movw	r16, r24
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	09 f4       	brne	.+2      	; 0x120c <USB_Device_ProcessControlRequest+0x3e6>
    120a:	d7 c0       	rjmp	.+430    	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
    120c:	80 91 42 20 	lds	r24, 0x2042

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1210:	8f 77       	andi	r24, 0x7F	; 127
    1212:	ca dd       	rcall	.-1132   	; 0xda8 <Endpoint_SelectEndpoint>
    1214:	e0 91 40 20 	lds	r30, 0x2040
    1218:	f0 91 41 20 	lds	r31, 0x2041
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    121c:	80 81       	ld	r24, Z
    121e:	8d 78       	andi	r24, 0x8D	; 141
    1220:	80 83       	st	Z, r24
    1222:	e0 91 40 20 	lds	r30, 0x2040
    1226:	f0 91 41 20 	lds	r31, 0x2041
    122a:	80 81       	ld	r24, Z
    122c:	81 60       	ori	r24, 0x01	; 1
    122e:	80 83       	st	Z, r24
    1230:	e0 91 3e 20 	lds	r30, 0x203E
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1234:	f0 91 3f 20 	lds	r31, 0x203F
    1238:	ef 5b       	subi	r30, 0xBF	; 191
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    123c:	10 82       	st	Z, r1
    123e:	80 91 42 20 	lds	r24, 0x2042
    1242:	80 68       	ori	r24, 0x80	; 128
    1244:	b1 dd       	rcall	.-1182   	; 0xda8 <Endpoint_SelectEndpoint>
    1246:	e0 91 40 20 	lds	r30, 0x2040
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    124a:	f0 91 41 20 	lds	r31, 0x2041
    124e:	80 81       	ld	r24, Z
    1250:	81 60       	ori	r24, 0x01	; 1
    1252:	80 83       	st	Z, r24
    1254:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1258:	f0 91 3f 20 	lds	r31, 0x203F
    125c:	ef 5b       	subi	r30, 0xBF	; 191
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	10 82       	st	Z, r1
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1266:	b8 01       	movw	r22, r16
    1268:	aa dc       	rcall	.-1708   	; 0xbbe <Endpoint_Write_Control_PStream_LE>
    126a:	e0 91 40 20 	lds	r30, 0x2040
    126e:	f0 91 41 20 	lds	r31, 0x2041
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1272:	80 81       	ld	r24, Z
    1274:	8d 79       	andi	r24, 0x9D	; 157
    1276:	80 83       	st	Z, r24
    1278:	e0 91 3e 20 	lds	r30, 0x203E
    127c:	f0 91 3f 20 	lds	r31, 0x203F
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1280:	ef 5b       	subi	r30, 0xBF	; 191
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	10 82       	st	Z, r1
    1286:	99 c0       	rjmp	.+306    	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
    1288:	80 38       	cpi	r24, 0x80	; 128
    128a:	09 f0       	breq	.+2      	; 0x128e <USB_Device_ProcessControlRequest+0x468>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    128c:	96 c0       	rjmp	.+300    	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
    128e:	80 91 42 20 	lds	r24, 0x2042
    1292:	8f 77       	andi	r24, 0x7F	; 127
    1294:	89 dd       	rcall	.-1262   	; 0xda8 <Endpoint_SelectEndpoint>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1296:	e0 91 40 20 	lds	r30, 0x2040
    129a:	f0 91 41 20 	lds	r31, 0x2041
    129e:	80 81       	ld	r24, Z
    12a0:	8d 78       	andi	r24, 0x8D	; 141
    12a2:	80 83       	st	Z, r24
				USB_Endpoint_SelectedFIFO->Position  = 0;
    12a4:	e0 91 40 20 	lds	r30, 0x2040
    12a8:	f0 91 41 20 	lds	r31, 0x2041
    12ac:	80 81       	ld	r24, Z
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	80 83       	st	Z, r24
    12b2:	e0 91 3e 20 	lds	r30, 0x203E
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    12b6:	f0 91 3f 20 	lds	r31, 0x203F
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    12ba:	ef 5b       	subi	r30, 0xBF	; 191
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	10 82       	st	Z, r1
    12c0:	80 91 42 20 	lds	r24, 0x2042
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    12c4:	80 68       	ori	r24, 0x80	; 128
    12c6:	70 dd       	rcall	.-1312   	; 0xda8 <Endpoint_SelectEndpoint>
    12c8:	e0 91 40 20 	lds	r30, 0x2040
    12cc:	f0 91 41 20 	lds	r31, 0x2041
    12d0:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	80 83       	st	Z, r24
    12d6:	80 91 3e 20 	lds	r24, 0x203E
    12da:	90 91 3f 20 	lds	r25, 0x203F
    12de:	fc 01       	movw	r30, r24
				USB_Endpoint_SelectedFIFO->Position  = 0;
    12e0:	ef 5b       	subi	r30, 0xBF	; 191
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	10 82       	st	Z, r1
    12e6:	30 91 86 29 	lds	r19, 0x2986
    12ea:	20 81       	ld	r18, Z
    12ec:	82 0f       	add	r24, r18

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    12ee:	91 1d       	adc	r25, r1
    12f0:	dc 01       	movw	r26, r24
    12f2:	3c 93       	st	X, r19
    12f4:	2f 5f       	subi	r18, 0xFF	; 255
    12f6:	20 83       	st	Z, r18
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    12f8:	e0 91 40 20 	lds	r30, 0x2040
    12fc:	f0 91 41 20 	lds	r31, 0x2041
    1300:	a0 91 3e 20 	lds	r26, 0x203E
    1304:	b0 91 3f 20 	lds	r27, 0x203F
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1308:	af 5b       	subi	r26, 0xBF	; 191
    130a:	bf 4f       	sbci	r27, 0xFF	; 255
    130c:	8c 91       	ld	r24, X
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	82 83       	std	Z+2, r24	; 0x02
    1312:	93 83       	std	Z+3, r25	; 0x03
    1314:	80 81       	ld	r24, Z

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1316:	8d 79       	andi	r24, 0x9D	; 157
    1318:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    131a:	e0 91 3e 20 	lds	r30, 0x203E
    131e:	f0 91 3f 20 	lds	r31, 0x203F
    1322:	ef 5b       	subi	r30, 0xBF	; 191
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	10 82       	st	Z, r1
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1328:	a0 d9       	rcall	.-3264   	; 0x66a <Endpoint_ClearStatusStage>
    132a:	47 c0       	rjmp	.+142    	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
    132c:	88 23       	and	r24, r24
    132e:	09 f0       	breq	.+2      	; 0x1332 <USB_Device_ProcessControlRequest+0x50c>
    1330:	44 c0       	rjmp	.+136    	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
    1332:	80 91 8d 29 	lds	r24, 0x298D
    1336:	82 30       	cpi	r24, 0x02	; 2
    1338:	08 f0       	brcs	.+2      	; 0x133c <USB_Device_ProcessControlRequest+0x516>
    133a:	3f c0       	rjmp	.+126    	; 0x13ba <USB_Device_ProcessControlRequest+0x594>
    133c:	80 91 42 20 	lds	r24, 0x2042
    1340:	8f 77       	andi	r24, 0x7F	; 127
    1342:	32 dd       	rcall	.-1436   	; 0xda8 <Endpoint_SelectEndpoint>
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1344:	e0 91 40 20 	lds	r30, 0x2040
    1348:	f0 91 41 20 	lds	r31, 0x2041
				USB_Endpoint_SelectedFIFO->Position  = 0;
    134c:	80 81       	ld	r24, Z
    134e:	8d 78       	andi	r24, 0x8D	; 141
    1350:	80 83       	st	Z, r24
    1352:	e0 91 40 20 	lds	r30, 0x2040
    1356:	f0 91 41 20 	lds	r31, 0x2041
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    135a:	80 81       	ld	r24, Z
    135c:	81 60       	ori	r24, 0x01	; 1
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    135e:	80 83       	st	Z, r24
    1360:	e0 91 3e 20 	lds	r30, 0x203E
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1364:	f0 91 3f 20 	lds	r31, 0x203F
    1368:	ef 5b       	subi	r30, 0xBF	; 191
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    136e:	80 91 42 20 	lds	r24, 0x2042
    1372:	80 68       	ori	r24, 0x80	; 128
    1374:	19 dd       	rcall	.-1486   	; 0xda8 <Endpoint_SelectEndpoint>
    1376:	e0 91 40 20 	lds	r30, 0x2040
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    137a:	f0 91 41 20 	lds	r31, 0x2041
    137e:	80 81       	ld	r24, Z
    1380:	81 60       	ori	r24, 0x01	; 1
    1382:	80 83       	st	Z, r24
    1384:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1388:	f0 91 3f 20 	lds	r31, 0x203F
    138c:	ef 5b       	subi	r30, 0xBF	; 191
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	10 82       	st	Z, r1
    1392:	80 91 8d 29 	lds	r24, 0x298D
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1396:	80 93 86 29 	sts	0x2986, r24
    139a:	67 d9       	rcall	.-3378   	; 0x66a <Endpoint_ClearStatusStage>
    139c:	80 91 86 29 	lds	r24, 0x2986
    13a0:	88 23       	and	r24, r24

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    13a2:	21 f4       	brne	.+8      	; 0x13ac <USB_Device_ProcessControlRequest+0x586>
    13a4:	80 91 c3 04 	lds	r24, 0x04C3
    13a8:	88 23       	and	r24, r24
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <USB_Device_ProcessControlRequest+0x58a>
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    13ac:	84 e0       	ldi	r24, 0x04	; 4
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <USB_Device_ProcessControlRequest+0x58c>
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 8a 29 	sts	0x298A, r24
    13b6:	0e 94 8a 01 	call	0x314	; 0x314 <EVENT_USB_Device_ConfigurationChanged>
				USB_Endpoint_SelectedFIFO->Position  = 0;
    13ba:	80 91 42 20 	lds	r24, 0x2042
    13be:	8f 77       	andi	r24, 0x7F	; 127
    13c0:	f3 dc       	rcall	.-1562   	; 0xda8 <Endpoint_SelectEndpoint>
    13c2:	e0 91 40 20 	lds	r30, 0x2040
    13c6:	f0 91 41 20 	lds	r31, 0x2041
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    13ca:	80 81       	ld	r24, Z
    13cc:	84 ff       	sbrs	r24, 4
    13ce:	4a c0       	rjmp	.+148    	; 0x1464 <USB_Device_ProcessControlRequest+0x63e>

	Endpoint_ClearStatusStage();
    13d0:	a0 91 3e 20 	lds	r26, 0x203E

	if (USB_Device_ConfigurationNumber)
    13d4:	b0 91 3f 20 	lds	r27, 0x203F
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	93 81       	ldd	r25, Z+3	; 0x03
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    13dc:	a0 5c       	subi	r26, 0xC0	; 192
    13de:	bf 4f       	sbci	r27, 0xFF	; 255
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    13e0:	8c 93       	st	X, r24
    13e2:	81 81       	ldd	r24, Z+1	; 0x01
    13e4:	84 60       	ori	r24, 0x04	; 4
    13e6:	81 83       	std	Z+1, r24	; 0x01
    13e8:	e0 91 40 20 	lds	r30, 0x2040
    13ec:	f0 91 41 20 	lds	r31, 0x2041

	EVENT_USB_Device_ConfigurationChanged();
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    13f2:	80 7c       	andi	r24, 0xC0	; 192
    13f4:	80 34       	cpi	r24, 0x40	; 64
    13f6:	59 f4       	brne	.+22     	; 0x140e <USB_Device_ProcessControlRequest+0x5e8>
    13f8:	80 91 42 20 	lds	r24, 0x2042

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    13fc:	80 58       	subi	r24, 0x80	; 128
    13fe:	d4 dc       	rcall	.-1624   	; 0xda8 <Endpoint_SelectEndpoint>
    1400:	e0 91 40 20 	lds	r30, 0x2040
    1404:	f0 91 41 20 	lds	r31, 0x2041
    1408:	81 81       	ldd	r24, Z+1	; 0x01
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    140a:	84 60       	ori	r24, 0x04	; 4
    140c:	81 83       	std	Z+1, r24	; 0x01
    140e:	80 91 42 20 	lds	r24, 0x2042
    1412:	8f 77       	andi	r24, 0x7F	; 127
    1414:	c9 dc       	rcall	.-1646   	; 0xda8 <Endpoint_SelectEndpoint>
    1416:	e0 91 40 20 	lds	r30, 0x2040
    141a:	f0 91 41 20 	lds	r31, 0x2041
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    141e:	80 81       	ld	r24, Z
    1420:	8d 78       	andi	r24, 0x8D	; 141

				if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    1422:	80 83       	st	Z, r24
    1424:	e0 91 40 20 	lds	r30, 0x2040
    1428:	f0 91 41 20 	lds	r31, 0x2041
    142c:	80 81       	ld	r24, Z
    142e:	81 60       	ori	r24, 0x01	; 1
    1430:	80 83       	st	Z, r24
				{
					Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    1432:	e0 91 3e 20 	lds	r30, 0x203E
    1436:	f0 91 3f 20 	lds	r31, 0x203F
    143a:	ef 5b       	subi	r30, 0xBF	; 191
					USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	10 82       	st	Z, r1
    1440:	80 91 42 20 	lds	r24, 0x2042
    1444:	80 68       	ori	r24, 0x80	; 128
    1446:	b0 dc       	rcall	.-1696   	; 0xda8 <Endpoint_SelectEndpoint>
    1448:	e0 91 40 20 	lds	r30, 0x2040
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    144c:	f0 91 41 20 	lds	r31, 0x2041
    1450:	80 81       	ld	r24, Z
    1452:	81 60       	ori	r24, 0x01	; 1
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1454:	80 83       	st	Z, r24
    1456:	e0 91 3e 20 	lds	r30, 0x203E
    145a:	f0 91 3f 20 	lds	r31, 0x203F
    145e:	ef 5b       	subi	r30, 0xBF	; 191
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1462:	10 82       	st	Z, r1
    1464:	ec 96       	adiw	r28, 0x3c	; 60
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1470:	0f 91       	pop	r16
    1472:	08 95       	ret

00001474 <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
    1474:	08 95       	ret

00001476 <Endpoint_SelectEndpoint>:
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address);
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    1476:	28 2f       	mov	r18, r24
    1478:	2f 70       	andi	r18, 0x0F	; 15

				USB_Endpoint_SelectedEndpoint = Address;
    147a:	80 93 42 20 	sts	0x2042, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0

				if (Address & ENDPOINT_DIR_IN)
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
    1480:	44 e8       	ldi	r20, 0x84	; 132
    1482:	50 e0       	ldi	r21, 0x00	; 0
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

				USB_Endpoint_SelectedEndpoint = Address;

				if (Address & ENDPOINT_DIR_IN)
    1484:	87 ff       	sbrs	r24, 7
    1486:	19 c0       	rjmp	.+50     	; 0x14ba <Endpoint_SelectEndpoint+0x44>
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
    1488:	24 9f       	mul	r18, r20
    148a:	c0 01       	movw	r24, r0
    148c:	25 9f       	mul	r18, r21
    148e:	90 0d       	add	r25, r0
    1490:	34 9f       	mul	r19, r20
    1492:	90 0d       	add	r25, r0
    1494:	11 24       	eor	r1, r1
    1496:	8b 57       	subi	r24, 0x7B	; 123
    1498:	9f 4d       	sbci	r25, 0xDF	; 223
    149a:	80 93 3e 20 	sts	0x203E, r24
    149e:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].IN;
    14a2:	80 91 c6 04 	lds	r24, 0x04C6
    14a6:	90 91 c7 04 	lds	r25, 0x04C7
    14aa:	74 e0       	ldi	r23, 0x04	; 4
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	7a 95       	dec	r23
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <Endpoint_SelectEndpoint+0x36>
    14b4:	28 5f       	subi	r18, 0xF8	; 248
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	16 c0       	rjmp	.+44     	; 0x14e6 <Endpoint_SelectEndpoint+0x70>
				}
				else
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].OUT;
    14ba:	24 9f       	mul	r18, r20
    14bc:	c0 01       	movw	r24, r0
    14be:	25 9f       	mul	r18, r21
    14c0:	90 0d       	add	r25, r0
    14c2:	34 9f       	mul	r19, r20
    14c4:	90 0d       	add	r25, r0
    14c6:	11 24       	eor	r1, r1
    14c8:	8d 5b       	subi	r24, 0xBD	; 189
    14ca:	9f 4d       	sbci	r25, 0xDF	; 223
    14cc:	80 93 3e 20 	sts	0x203E, r24
    14d0:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].OUT;
    14d4:	80 91 c6 04 	lds	r24, 0x04C6
    14d8:	90 91 c7 04 	lds	r25, 0x04C7
    14dc:	64 e0       	ldi	r22, 0x04	; 4
    14de:	22 0f       	add	r18, r18
    14e0:	33 1f       	adc	r19, r19
    14e2:	6a 95       	dec	r22
    14e4:	e1 f7       	brne	.-8      	; 0x14de <Endpoint_SelectEndpoint+0x68>
    14e6:	82 0f       	add	r24, r18
    14e8:	93 1f       	adc	r25, r19
    14ea:	80 93 40 20 	sts	0x2040, r24
    14ee:	90 93 41 20 	sts	0x2041, r25
    14f2:	08 95       	ret

000014f4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    14f4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    14f6:	80 91 8a 29 	lds	r24, 0x298A
    14fa:	88 23       	and	r24, r24
    14fc:	e9 f0       	breq	.+58     	; 0x1538 <USB_USBTask+0x44>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    14fe:	c0 91 42 20 	lds	r28, 0x2042
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	b8 df       	rcall	.-144    	; 0x1476 <Endpoint_SelectEndpoint>
    1506:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    150a:	8f 77       	andi	r24, 0x7F	; 127
    150c:	b4 df       	rcall	.-152    	; 0x1476 <Endpoint_SelectEndpoint>
    150e:	a0 91 40 20 	lds	r26, 0x2040

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    1512:	b0 91 41 20 	lds	r27, 0x2041
    1516:	8c 91       	ld	r24, X
    1518:	84 ff       	sbrs	r24, 4
    151a:	0c c0       	rjmp	.+24     	; 0x1534 <USB_USBTask+0x40>
    151c:	e0 91 3e 20 	lds	r30, 0x203E
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1520:	f0 91 3f 20 	lds	r31, 0x203F
    1524:	12 96       	adiw	r26, 0x02	; 2
    1526:	2d 91       	ld	r18, X+
    1528:	3c 91       	ld	r19, X
    152a:	13 97       	sbiw	r26, 0x03	; 3
    152c:	e0 5c       	subi	r30, 0xC0	; 192
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	20 83       	st	Z, r18
    1532:	79 dc       	rcall	.-1806   	; 0xe26 <USB_Device_ProcessControlRequest>
    1534:	8c 2f       	mov	r24, r28

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    1536:	9f df       	rcall	.-194    	; 0x1476 <Endpoint_SelectEndpoint>
    1538:	cf 91       	pop	r28

	Endpoint_SelectEndpoint(PrevEndpoint);
    153a:	08 95       	ret

0000153c <Endpoint_SelectEndpoint>:
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address);
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    153c:	28 2f       	mov	r18, r24
    153e:	2f 70       	andi	r18, 0x0F	; 15

				USB_Endpoint_SelectedEndpoint = Address;
    1540:	80 93 42 20 	sts	0x2042, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0

				if (Address & ENDPOINT_DIR_IN)
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
    1546:	44 e8       	ldi	r20, 0x84	; 132
    1548:	50 e0       	ldi	r21, 0x00	; 0
			{
				uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

				USB_Endpoint_SelectedEndpoint = Address;

				if (Address & ENDPOINT_DIR_IN)
    154a:	87 ff       	sbrs	r24, 7
    154c:	19 c0       	rjmp	.+50     	; 0x1580 <Endpoint_SelectEndpoint+0x44>
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].IN;
    154e:	24 9f       	mul	r18, r20
    1550:	c0 01       	movw	r24, r0
    1552:	25 9f       	mul	r18, r21
    1554:	90 0d       	add	r25, r0
    1556:	34 9f       	mul	r19, r20
    1558:	90 0d       	add	r25, r0
    155a:	11 24       	eor	r1, r1
    155c:	8b 57       	subi	r24, 0x7B	; 123
    155e:	9f 4d       	sbci	r25, 0xDF	; 223
    1560:	80 93 3e 20 	sts	0x203E, r24
    1564:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].IN;
    1568:	80 91 c6 04 	lds	r24, 0x04C6
    156c:	90 91 c7 04 	lds	r25, 0x04C7
    1570:	74 e0       	ldi	r23, 0x04	; 4
    1572:	22 0f       	add	r18, r18
    1574:	33 1f       	adc	r19, r19
    1576:	7a 95       	dec	r23
    1578:	e1 f7       	brne	.-8      	; 0x1572 <Endpoint_SelectEndpoint+0x36>
    157a:	28 5f       	subi	r18, 0xF8	; 248
    157c:	3f 4f       	sbci	r19, 0xFF	; 255
    157e:	16 c0       	rjmp	.+44     	; 0x15ac <Endpoint_SelectEndpoint+0x70>
				}
				else
				{
					USB_Endpoint_SelectedFIFO   = &USB_Endpoint_FIFOs[EndpointNumber].OUT;
    1580:	24 9f       	mul	r18, r20
    1582:	c0 01       	movw	r24, r0
    1584:	25 9f       	mul	r18, r21
    1586:	90 0d       	add	r25, r0
    1588:	34 9f       	mul	r19, r20
    158a:	90 0d       	add	r25, r0
    158c:	11 24       	eor	r1, r1
    158e:	8d 5b       	subi	r24, 0xBD	; 189
    1590:	9f 4d       	sbci	r25, 0xDF	; 223
    1592:	80 93 3e 20 	sts	0x203E, r24
    1596:	90 93 3f 20 	sts	0x203F, r25
					USB_Endpoint_SelectedHandle = &((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EndpointNumber].OUT;
    159a:	80 91 c6 04 	lds	r24, 0x04C6
    159e:	90 91 c7 04 	lds	r25, 0x04C7
    15a2:	64 e0       	ldi	r22, 0x04	; 4
    15a4:	22 0f       	add	r18, r18
    15a6:	33 1f       	adc	r19, r19
    15a8:	6a 95       	dec	r22
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <Endpoint_SelectEndpoint+0x68>
    15ac:	82 0f       	add	r24, r18
    15ae:	93 1f       	adc	r25, r19
    15b0:	80 93 40 20 	sts	0x2040, r24
    15b4:	90 93 41 20 	sts	0x2041, r25
    15b8:	08 95       	ret

000015ba <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	7c 01       	movw	r14, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    15cc:	80 91 42 20 	lds	r24, 0x2042
    15d0:	8f 77       	andi	r24, 0x7F	; 127
    15d2:	b4 df       	rcall	.-152    	; 0x153c <Endpoint_SelectEndpoint>
    15d4:	a0 91 40 20 	lds	r26, 0x2040

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    15d8:	b0 91 41 20 	lds	r27, 0x2041
    15dc:	8c 91       	ld	r24, X
    15de:	84 ff       	sbrs	r24, 4
    15e0:	28 c2       	rjmp	.+1104   	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    15e2:	e0 91 3e 20 	lds	r30, 0x203E
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    15e6:	f0 91 3f 20 	lds	r31, 0x203F
    15ea:	12 96       	adiw	r26, 0x02	; 2
    15ec:	8d 91       	ld	r24, X+
    15ee:	9c 91       	ld	r25, X
    15f0:	13 97       	sbiw	r26, 0x03	; 3
    15f2:	e0 5c       	subi	r30, 0xC0	; 192
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 83       	st	Z, r24
    15f8:	d7 01       	movw	r26, r14
	if (!(Endpoint_IsSETUPReceived()))
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    15fa:	8c 91       	ld	r24, X
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	20 91 8f 29 	lds	r18, 0x298F
    1602:	30 91 90 29 	lds	r19, 0x2990
    1606:	28 17       	cp	r18, r24
    1608:	39 07       	cpc	r19, r25
    160a:	09 f0       	breq	.+2      	; 0x160e <CDC_Device_ProcessControlRequest+0x54>
    160c:	12 c2       	rjmp	.+1060   	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    160e:	80 91 8c 29 	lds	r24, 0x298C
	  return;

	switch (USB_ControlRequest.bRequest)
    1612:	81 32       	cpi	r24, 0x21	; 33
    1614:	69 f0       	breq	.+26     	; 0x1630 <CDC_Device_ProcessControlRequest+0x76>
    1616:	82 32       	cpi	r24, 0x22	; 34
    1618:	20 f4       	brcc	.+8      	; 0x1622 <CDC_Device_ProcessControlRequest+0x68>
    161a:	80 32       	cpi	r24, 0x20	; 32
    161c:	09 f0       	breq	.+2      	; 0x1620 <CDC_Device_ProcessControlRequest+0x66>
    161e:	09 c2       	rjmp	.+1042   	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    1620:	d4 c0       	rjmp	.+424    	; 0x17ca <CDC_Device_ProcessControlRequest+0x210>
    1622:	82 32       	cpi	r24, 0x22	; 34
    1624:	09 f4       	brne	.+2      	; 0x1628 <CDC_Device_ProcessControlRequest+0x6e>
    1626:	94 c1       	rjmp	.+808    	; 0x1950 <CDC_Device_ProcessControlRequest+0x396>
    1628:	83 32       	cpi	r24, 0x23	; 35
    162a:	09 f0       	breq	.+2      	; 0x162e <CDC_Device_ProcessControlRequest+0x74>
    162c:	02 c2       	rjmp	.+1028   	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    162e:	cc c1       	rjmp	.+920    	; 0x19c8 <CDC_Device_ProcessControlRequest+0x40e>
    1630:	80 91 8b 29 	lds	r24, 0x298B
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1634:	81 3a       	cpi	r24, 0xA1	; 161
    1636:	09 f0       	breq	.+2      	; 0x163a <CDC_Device_ProcessControlRequest+0x80>
    1638:	fc c1       	rjmp	.+1016   	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    163a:	80 91 42 20 	lds	r24, 0x2042
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    163e:	8f 77       	andi	r24, 0x7F	; 127
    1640:	7d df       	rcall	.-262    	; 0x153c <Endpoint_SelectEndpoint>
    1642:	e0 91 40 20 	lds	r30, 0x2040
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1646:	f0 91 41 20 	lds	r31, 0x2041
    164a:	80 81       	ld	r24, Z
    164c:	8d 78       	andi	r24, 0x8D	; 141
    164e:	80 83       	st	Z, r24
    1650:	e0 91 40 20 	lds	r30, 0x2040
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1654:	f0 91 41 20 	lds	r31, 0x2041
    1658:	80 81       	ld	r24, Z
    165a:	81 60       	ori	r24, 0x01	; 1
    165c:	80 83       	st	Z, r24
    165e:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1662:	f0 91 3f 20 	lds	r31, 0x203F
    1666:	ef 5b       	subi	r30, 0xBF	; 191
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	10 82       	st	Z, r1
    166c:	80 91 42 20 	lds	r24, 0x2042

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1670:	80 68       	ori	r24, 0x80	; 128
    1672:	64 df       	rcall	.-312    	; 0x153c <Endpoint_SelectEndpoint>
    1674:	e0 91 40 20 	lds	r30, 0x2040
    1678:	f0 91 41 20 	lds	r31, 0x2041
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    167c:	80 81       	ld	r24, Z
    167e:	81 60       	ori	r24, 0x01	; 1
    1680:	80 83       	st	Z, r24
    1682:	e0 91 3e 20 	lds	r30, 0x203E
    1686:	f0 91 3f 20 	lds	r31, 0x203F
				USB_Endpoint_SelectedFIFO->Position  = 0;
    168a:	ef 5b       	subi	r30, 0xBF	; 191
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	10 82       	st	Z, r1
    1690:	80 91 42 20 	lds	r24, 0x2042
    1694:	80 68       	ori	r24, 0x80	; 128
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1696:	52 df       	rcall	.-348    	; 0x153c <Endpoint_SelectEndpoint>
    1698:	e0 91 40 20 	lds	r30, 0x2040
    169c:	f0 91 41 20 	lds	r31, 0x2041

				return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    16a0:	80 81       	ld	r24, Z
    16a2:	81 ff       	sbrs	r24, 1
    16a4:	f5 cf       	rjmp	.-22     	; 0x1690 <CDC_Device_ProcessControlRequest+0xd6>
    16a6:	e7 01       	movw	r28, r14
    16a8:	4c 89       	ldd	r20, Y+20	; 0x14
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    16aa:	5d 89       	ldd	r21, Y+21	; 0x15
    16ac:	6e 89       	ldd	r22, Y+22	; 0x16

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    16ae:	7f 89       	ldd	r23, Y+23	; 0x17
    16b0:	80 91 3e 20 	lds	r24, 0x203E
    16b4:	90 91 3f 20 	lds	r25, 0x203F
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    16b8:	fc 01       	movw	r30, r24
    16ba:	ef 5b       	subi	r30, 0xBF	; 191
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	20 81       	ld	r18, Z
    16c0:	82 0f       	add	r24, r18
    16c2:	91 1d       	adc	r25, r1
    16c4:	dc 01       	movw	r26, r24
    16c6:	4c 93       	st	X, r20
    16c8:	2f 5f       	subi	r18, 0xFF	; 255
    16ca:	20 83       	st	Z, r18
    16cc:	05 2f       	mov	r16, r21
    16ce:	16 2f       	mov	r17, r22
    16d0:	27 2f       	mov	r18, r23
    16d2:	33 27       	eor	r19, r19
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
				Endpoint_Write_8(Data >> 8);
    16d4:	80 91 3e 20 	lds	r24, 0x203E
    16d8:	90 91 3f 20 	lds	r25, 0x203F
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    16dc:	fc 01       	movw	r30, r24
    16de:	ef 5b       	subi	r30, 0xBF	; 191
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	a0 81       	ld	r26, Z
    16e4:	8a 0f       	add	r24, r26
    16e6:	91 1d       	adc	r25, r1
    16e8:	ec 01       	movw	r28, r24
    16ea:	08 83       	st	Y, r16
    16ec:	af 5f       	subi	r26, 0xFF	; 255
    16ee:	a0 83       	st	Z, r26
    16f0:	8b 01       	movw	r16, r22
    16f2:	22 27       	eor	r18, r18
    16f4:	33 27       	eor	r19, r19
    16f6:	80 91 3e 20 	lds	r24, 0x203E
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
				Endpoint_Write_8(Data >> 8);
				Endpoint_Write_8(Data >> 16);
    16fa:	90 91 3f 20 	lds	r25, 0x203F
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    16fe:	fc 01       	movw	r30, r24
    1700:	ef 5b       	subi	r30, 0xBF	; 191
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	a0 81       	ld	r26, Z
    1706:	8a 0f       	add	r24, r26
    1708:	91 1d       	adc	r25, r1
    170a:	ec 01       	movw	r28, r24
    170c:	08 83       	st	Y, r16
    170e:	af 5f       	subi	r26, 0xFF	; 255
    1710:	a0 83       	st	Z, r26
    1712:	47 2f       	mov	r20, r23
    1714:	55 27       	eor	r21, r21
    1716:	66 27       	eor	r22, r22
    1718:	77 27       	eor	r23, r23
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
				Endpoint_Write_8(Data >> 8);
				Endpoint_Write_8(Data >> 16);
				Endpoint_Write_8(Data >> 24);
    171a:	80 91 3e 20 	lds	r24, 0x203E
    171e:	90 91 3f 20 	lds	r25, 0x203F
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    1722:	fc 01       	movw	r30, r24
    1724:	ef 5b       	subi	r30, 0xBF	; 191
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	20 81       	ld	r18, Z
    172a:	82 0f       	add	r24, r18
    172c:	91 1d       	adc	r25, r1
    172e:	dc 01       	movw	r26, r24
    1730:	4c 93       	st	X, r20
    1732:	2f 5f       	subi	r18, 0xFF	; 255
    1734:	20 83       	st	Z, r18
    1736:	e7 01       	movw	r28, r14
    1738:	38 8d       	ldd	r19, Y+24	; 0x18
    173a:	80 91 3e 20 	lds	r24, 0x203E
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    173e:	90 91 3f 20 	lds	r25, 0x203F
    1742:	fc 01       	movw	r30, r24
    1744:	ef 5b       	subi	r30, 0xBF	; 191
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	20 81       	ld	r18, Z
    174a:	82 0f       	add	r24, r18
    174c:	91 1d       	adc	r25, r1
    174e:	dc 01       	movw	r26, r24
    1750:	3c 93       	st	X, r19
    1752:	2f 5f       	subi	r18, 0xFF	; 255
    1754:	20 83       	st	Z, r18
    1756:	39 8d       	ldd	r19, Y+25	; 0x19
    1758:	80 91 3e 20 	lds	r24, 0x203E
    175c:	90 91 3f 20 	lds	r25, 0x203F
    1760:	fc 01       	movw	r30, r24
    1762:	ef 5b       	subi	r30, 0xBF	; 191
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	20 81       	ld	r18, Z
    1768:	82 0f       	add	r24, r18
    176a:	91 1d       	adc	r25, r1
    176c:	ec 01       	movw	r28, r24
    176e:	38 83       	st	Y, r19
    1770:	2f 5f       	subi	r18, 0xFF	; 255
    1772:	20 83       	st	Z, r18
    1774:	f7 01       	movw	r30, r14
    1776:	32 8d       	ldd	r19, Z+26	; 0x1a
    1778:	80 91 3e 20 	lds	r24, 0x203E
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    177c:	90 91 3f 20 	lds	r25, 0x203F
    1780:	fc 01       	movw	r30, r24
    1782:	ef 5b       	subi	r30, 0xBF	; 191
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	20 81       	ld	r18, Z
    1788:	82 0f       	add	r24, r18
    178a:	91 1d       	adc	r25, r1
    178c:	dc 01       	movw	r26, r24
    178e:	3c 93       	st	X, r19
    1790:	2f 5f       	subi	r18, 0xFF	; 255
    1792:	20 83       	st	Z, r18
    1794:	e0 91 40 20 	lds	r30, 0x2040
    1798:	f0 91 41 20 	lds	r31, 0x2041
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    179c:	a0 91 3e 20 	lds	r26, 0x203E
    17a0:	b0 91 3f 20 	lds	r27, 0x203F
    17a4:	af 5b       	subi	r26, 0xBF	; 191
    17a6:	bf 4f       	sbci	r27, 0xFF	; 255
    17a8:	8c 91       	ld	r24, X
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	82 83       	std	Z+2, r24	; 0x02
    17ae:	93 83       	std	Z+3, r25	; 0x03
    17b0:	80 81       	ld	r24, Z
    17b2:	8d 79       	andi	r24, 0x9D	; 157
    17b4:	80 83       	st	Z, r24
    17b6:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    17ba:	f0 91 3f 20 	lds	r31, 0x203F
				USB_Endpoint_SelectedFIFO->Position  = 0;
    17be:	ef 5b       	subi	r30, 0xBF	; 191
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	10 82       	st	Z, r1
    17c4:	0e 94 35 03 	call	0x66a	; 0x66a <Endpoint_ClearStatusStage>
    17c8:	34 c1       	rjmp	.+616    	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    17ca:	80 91 8b 29 	lds	r24, 0x298B

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    17ce:	81 32       	cpi	r24, 0x21	; 33
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <CDC_Device_ProcessControlRequest+0x21a>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    17d2:	2f c1       	rjmp	.+606    	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    17d4:	80 91 42 20 	lds	r24, 0x2042
    17d8:	8f 77       	andi	r24, 0x7F	; 127
    17da:	b0 de       	rcall	.-672    	; 0x153c <Endpoint_SelectEndpoint>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    17dc:	e0 91 40 20 	lds	r30, 0x2040
    17e0:	f0 91 41 20 	lds	r31, 0x2041
    17e4:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    17e6:	8d 78       	andi	r24, 0x8D	; 141
    17e8:	80 83       	st	Z, r24
    17ea:	e0 91 40 20 	lds	r30, 0x2040
    17ee:	f0 91 41 20 	lds	r31, 0x2041
    17f2:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    17f4:	81 60       	ori	r24, 0x01	; 1
    17f6:	80 83       	st	Z, r24
    17f8:	e0 91 3e 20 	lds	r30, 0x203E
    17fc:	f0 91 3f 20 	lds	r31, 0x203F
    1800:	ef 5b       	subi	r30, 0xBF	; 191
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	10 82       	st	Z, r1
    1806:	80 91 42 20 	lds	r24, 0x2042
    180a:	80 68       	ori	r24, 0x80	; 128
    180c:	97 de       	rcall	.-722    	; 0x153c <Endpoint_SelectEndpoint>
    180e:	e0 91 40 20 	lds	r30, 0x2040

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1812:	f0 91 41 20 	lds	r31, 0x2041
    1816:	80 81       	ld	r24, Z
    1818:	81 60       	ori	r24, 0x01	; 1
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    181a:	80 83       	st	Z, r24
    181c:	e0 91 3e 20 	lds	r30, 0x203E
    1820:	f0 91 3f 20 	lds	r31, 0x203F
    1824:	ef 5b       	subi	r30, 0xBF	; 191
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1828:	10 82       	st	Z, r1
    182a:	80 91 42 20 	lds	r24, 0x2042
    182e:	8f 77       	andi	r24, 0x7F	; 127
    1830:	85 de       	rcall	.-758    	; 0x153c <Endpoint_SelectEndpoint>
    1832:	c0 90 40 20 	lds	r12, 0x2040
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1836:	d0 90 41 20 	lds	r13, 0x2041
    183a:	e6 01       	movw	r28, r12
    183c:	88 81       	ld	r24, Y
    183e:	85 ff       	sbrs	r24, 5

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    1840:	81 c0       	rjmp	.+258    	; 0x1944 <CDC_Device_ProcessControlRequest+0x38a>
    1842:	20 91 3e 20 	lds	r18, 0x203E
    1846:	30 91 3f 20 	lds	r19, 0x203F
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	f9 01       	movw	r30, r18
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1850:	e0 5c       	subi	r30, 0xC0	; 192
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 83       	st	Z, r24
    1856:	e9 01       	movw	r28, r18
    1858:	cf 5b       	subi	r28, 0xBF	; 191
    185a:	df 4f       	sbci	r29, 0xFF	; 255
    185c:	88 81       	ld	r24, Y
    185e:	f9 01       	movw	r30, r18
    1860:	e8 0f       	add	r30, r24
    1862:	f1 1d       	adc	r31, r1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    1864:	00 81       	ld	r16, Z
    1866:	8f 5f       	subi	r24, 0xFF	; 255
    1868:	88 83       	st	Y, r24
    186a:	88 81       	ld	r24, Y
    186c:	f9 01       	movw	r30, r18
    186e:	e8 0f       	add	r30, r24
    1870:	f1 1d       	adc	r31, r1
    1872:	10 81       	ld	r17, Z
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	88 83       	st	Y, r24
    1878:	98 81       	ld	r25, Y
    187a:	f9 01       	movw	r30, r18
    187c:	e9 0f       	add	r30, r25
    187e:	f1 1d       	adc	r31, r1
    1880:	80 81       	ld	r24, Z
    1882:	9f 5f       	subi	r25, 0xFF	; 255
    1884:	98 83       	st	Y, r25
    1886:	98 81       	ld	r25, Y
    1888:	f9 01       	movw	r30, r18
    188a:	e9 0f       	add	r30, r25
    188c:	f1 1d       	adc	r31, r1
    188e:	40 81       	ld	r20, Z
    1890:	9f 5f       	subi	r25, 0xFF	; 255
    1892:	98 83       	st	Y, r25
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	74 2f       	mov	r23, r20
    189c:	66 27       	eor	r22, r22
    189e:	55 27       	eor	r21, r21
    18a0:	44 27       	eor	r20, r20
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
				uint32_t Byte3 = Endpoint_Read_8();
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 e0       	ldi	r26, 0x00	; 0
    18a6:	b0 e0       	ldi	r27, 0x00	; 0

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    18a8:	dc 01       	movw	r26, r24
    18aa:	99 27       	eor	r25, r25
    18ac:	88 27       	eor	r24, r24
    18ae:	48 2b       	or	r20, r24
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    18b0:	59 2b       	or	r21, r25
    18b2:	6a 2b       	or	r22, r26
    18b4:	7b 2b       	or	r23, r27
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    18b6:	80 2f       	mov	r24, r16
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a0 e0       	ldi	r26, 0x00	; 0
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	48 2b       	or	r20, r24
    18c0:	59 2b       	or	r21, r25
    18c2:	6a 2b       	or	r22, r26
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    18c4:	7b 2b       	or	r23, r27
    18c6:	81 2f       	mov	r24, r17
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 e0       	ldi	r26, 0x00	; 0
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ba 2f       	mov	r27, r26
    18d0:	a9 2f       	mov	r26, r25
    18d2:	98 2f       	mov	r25, r24
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
    18d4:	88 27       	eor	r24, r24
    18d6:	48 2b       	or	r20, r24
    18d8:	59 2b       	or	r21, r25
    18da:	6a 2b       	or	r22, r26
				uint32_t Byte2 = Endpoint_Read_8();
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    18dc:	7b 2b       	or	r23, r27
    18de:	f7 01       	movw	r30, r14
    18e0:	44 8b       	std	Z+20, r20	; 0x14
    18e2:	55 8b       	std	Z+21, r21	; 0x15
    18e4:	66 8b       	std	Z+22, r22	; 0x16
    18e6:	77 8b       	std	Z+23, r23	; 0x17
    18e8:	88 81       	ld	r24, Y
    18ea:	f9 01       	movw	r30, r18
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    18ec:	e8 0f       	add	r30, r24
    18ee:	f1 1d       	adc	r31, r1
    18f0:	90 81       	ld	r25, Z
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	88 83       	st	Y, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    18f6:	d7 01       	movw	r26, r14
    18f8:	58 96       	adiw	r26, 0x18	; 24
    18fa:	9c 93       	st	X, r25
    18fc:	58 97       	sbiw	r26, 0x18	; 24
    18fe:	88 81       	ld	r24, Y
    1900:	f9 01       	movw	r30, r18
    1902:	e8 0f       	add	r30, r24
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1904:	f1 1d       	adc	r31, r1
    1906:	90 81       	ld	r25, Z
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	88 83       	st	Y, r24
    190c:	59 96       	adiw	r26, 0x19	; 25
    190e:	9c 93       	st	X, r25
    1910:	59 97       	sbiw	r26, 0x19	; 25
    1912:	88 81       	ld	r24, Y
    1914:	28 0f       	add	r18, r24
    1916:	31 1d       	adc	r19, r1
    1918:	f9 01       	movw	r30, r18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    191a:	90 81       	ld	r25, Z
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	88 83       	st	Y, r24
    1920:	5a 96       	adiw	r26, 0x1a	; 26
    1922:	9c 93       	st	X, r25
    1924:	d6 01       	movw	r26, r12
    1926:	8c 91       	ld	r24, X
    1928:	8d 79       	andi	r24, 0x9D	; 157
    192a:	8c 93       	st	X, r24
    192c:	e0 91 3e 20 	lds	r30, 0x203E
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1930:	f0 91 3f 20 	lds	r31, 0x203F
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1934:	ef 5b       	subi	r30, 0xBF	; 191
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	10 82       	st	Z, r1
				USB_Endpoint_SelectedFIFO->Position  = 0;
    193a:	0e 94 35 03 	call	0x66a	; 0x66a <Endpoint_ClearStatusStage>
    193e:	c7 01       	movw	r24, r14
    1940:	1d d2       	rcall	.+1082   	; 0x1d7c <CDC_Device_Event_Stub>
    1942:	77 c0       	rjmp	.+238    	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    1944:	80 91 8a 29 	lds	r24, 0x298A

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1948:	88 23       	and	r24, r24
    194a:	09 f0       	breq	.+2      	; 0x194e <CDC_Device_ProcessControlRequest+0x394>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    194c:	6e cf       	rjmp	.-292    	; 0x182a <CDC_Device_ProcessControlRequest+0x270>
    194e:	71 c0       	rjmp	.+226    	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    1950:	80 91 8b 29 	lds	r24, 0x298B
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1954:	81 32       	cpi	r24, 0x21	; 33
    1956:	09 f0       	breq	.+2      	; 0x195a <CDC_Device_ProcessControlRequest+0x3a0>
    1958:	6c c0       	rjmp	.+216    	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    195a:	80 91 42 20 	lds	r24, 0x2042
    195e:	8f 77       	andi	r24, 0x7F	; 127
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1960:	ed dd       	rcall	.-1062   	; 0x153c <Endpoint_SelectEndpoint>
    1962:	e0 91 40 20 	lds	r30, 0x2040
    1966:	f0 91 41 20 	lds	r31, 0x2041
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    196a:	80 81       	ld	r24, Z
    196c:	8d 78       	andi	r24, 0x8D	; 141
    196e:	80 83       	st	Z, r24
    1970:	e0 91 40 20 	lds	r30, 0x2040
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1974:	f0 91 41 20 	lds	r31, 0x2041
    1978:	80 81       	ld	r24, Z
    197a:	81 60       	ori	r24, 0x01	; 1
    197c:	80 83       	st	Z, r24
    197e:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1982:	f0 91 3f 20 	lds	r31, 0x203F
    1986:	ef 5b       	subi	r30, 0xBF	; 191
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	10 82       	st	Z, r1
    198c:	80 91 42 20 	lds	r24, 0x2042
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1990:	80 68       	ori	r24, 0x80	; 128
    1992:	d4 dd       	rcall	.-1112   	; 0x153c <Endpoint_SelectEndpoint>
    1994:	e0 91 40 20 	lds	r30, 0x2040
    1998:	f0 91 41 20 	lds	r31, 0x2041
    199c:	80 81       	ld	r24, Z

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    199e:	81 60       	ori	r24, 0x01	; 1
    19a0:	80 83       	st	Z, r24
    19a2:	e0 91 3e 20 	lds	r30, 0x203E
    19a6:	f0 91 3f 20 	lds	r31, 0x203F
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    19aa:	ef 5b       	subi	r30, 0xBF	; 191
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	10 82       	st	Z, r1
    19b0:	0e 94 35 03 	call	0x66a	; 0x66a <Endpoint_ClearStatusStage>
    19b4:	80 91 8d 29 	lds	r24, 0x298D
				USB_Endpoint_SelectedFIFO->Position  = 0;
    19b8:	90 91 8e 29 	lds	r25, 0x298E
    19bc:	e7 01       	movw	r28, r14
    19be:	88 8b       	std	Y+16, r24	; 0x10
    19c0:	99 8b       	std	Y+17, r25	; 0x11
    19c2:	c7 01       	movw	r24, r14
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    19c4:	db d1       	rcall	.+950    	; 0x1d7c <CDC_Device_Event_Stub>
    19c6:	35 c0       	rjmp	.+106    	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    19c8:	80 91 8b 29 	lds	r24, 0x298B
    19cc:	81 32       	cpi	r24, 0x21	; 33
    19ce:	89 f5       	brne	.+98     	; 0x1a32 <CDC_Device_ProcessControlRequest+0x478>
    19d0:	80 91 42 20 	lds	r24, 0x2042
    19d4:	8f 77       	andi	r24, 0x7F	; 127

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    19d6:	b2 dd       	rcall	.-1180   	; 0x153c <Endpoint_SelectEndpoint>
    19d8:	e0 91 40 20 	lds	r30, 0x2040
    19dc:	f0 91 41 20 	lds	r31, 0x2041
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19e0:	80 81       	ld	r24, Z
    19e2:	8d 78       	andi	r24, 0x8D	; 141
    19e4:	80 83       	st	Z, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    19e6:	e0 91 40 20 	lds	r30, 0x2040
    19ea:	f0 91 41 20 	lds	r31, 0x2041
    19ee:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    19f0:	81 60       	ori	r24, 0x01	; 1
    19f2:	80 83       	st	Z, r24
    19f4:	e0 91 3e 20 	lds	r30, 0x203E
    19f8:	f0 91 3f 20 	lds	r31, 0x203F
    19fc:	ef 5b       	subi	r30, 0xBF	; 191
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	10 82       	st	Z, r1
    1a02:	80 91 42 20 	lds	r24, 0x2042
    1a06:	80 68       	ori	r24, 0x80	; 128
    1a08:	99 dd       	rcall	.-1230   	; 0x153c <Endpoint_SelectEndpoint>
    1a0a:	e0 91 40 20 	lds	r30, 0x2040
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1a0e:	f0 91 41 20 	lds	r31, 0x2041
    1a12:	80 81       	ld	r24, Z
    1a14:	81 60       	ori	r24, 0x01	; 1
    1a16:	80 83       	st	Z, r24
    1a18:	e0 91 3e 20 	lds	r30, 0x203E

				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1a1c:	f0 91 3f 20 	lds	r31, 0x203F
    1a20:	ef 5b       	subi	r30, 0xBF	; 191
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
				USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1a24:	10 82       	st	Z, r1
    1a26:	0e 94 35 03 	call	0x66a	; 0x66a <Endpoint_ClearStatusStage>
    1a2a:	c7 01       	movw	r24, r14
    1a2c:	60 91 8d 29 	lds	r22, 0x298D
    1a30:	a5 d1       	rcall	.+842    	; 0x1d7c <CDC_Device_Event_Stub>
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a40:	cf 90       	pop	r12
    1a42:	08 95       	ret

00001a44 <CDC_Device_ConfigureEndpoints>:

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	ec 01       	movw	r28, r24
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1a4a:	40 96       	adiw	r24, 0x10	; 16
    1a4c:	fc 01       	movw	r30, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1a4e:	8b e0       	ldi	r24, 0x0B	; 11
    1a50:	df 01       	movw	r26, r30
    1a52:	1d 92       	st	X+, r1
    1a54:	8a 95       	dec	r24
    1a56:	e9 f7       	brne	.-6      	; 0x1a52 <CDC_Device_ConfigureEndpoints+0xe>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    1a5c:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	0e 94 c0 02 	call	0x580	; 0x580 <Endpoint_ConfigureEndpointTable>
    1a6c:	88 23       	and	r24, r24
    1a6e:	69 f0       	breq	.+26     	; 0x1a8a <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1a70:	ce 01       	movw	r24, r28
    1a72:	06 96       	adiw	r24, 0x06	; 6
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	0e 94 c0 02 	call	0x580	; 0x580 <Endpoint_ConfigureEndpointTable>
    1a7a:	88 23       	and	r24, r24
    1a7c:	31 f0       	breq	.+12     	; 0x1a8a <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1a7e:	ce 01       	movw	r24, r28
    1a80:	0b 96       	adiw	r24, 0x0b	; 11
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	0e 94 c0 02 	call	0x580	; 0x580 <Endpoint_ConfigureEndpointTable>
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <CDC_Device_ConfigureEndpoints+0x48>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    1a8a:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1a92:	cf 93       	push	r28
    1a94:	fc 01       	movw	r30, r24
    1a96:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1a98:	80 91 8a 29 	lds	r24, 0x298A
    1a9c:	84 30       	cpi	r24, 0x04	; 4
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <CDC_Device_SendByte+0x10>
    1aa0:	41 c0       	rjmp	.+130    	; 0x1b24 <CDC_Device_SendByte+0x92>
    1aa2:	44 89       	ldd	r20, Z+20	; 0x14
    1aa4:	55 89       	ldd	r21, Z+21	; 0x15
    1aa6:	66 89       	ldd	r22, Z+22	; 0x16
    1aa8:	77 89       	ldd	r23, Z+23	; 0x17
    1aaa:	41 15       	cp	r20, r1
    1aac:	51 05       	cpc	r21, r1
    1aae:	61 05       	cpc	r22, r1
    1ab0:	71 05       	cpc	r23, r1
    1ab2:	c1 f1       	breq	.+112    	; 0x1b24 <CDC_Device_SendByte+0x92>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    1ab4:	81 81       	ldd	r24, Z+1	; 0x01
    1ab6:	42 dd       	rcall	.-1404   	; 0x153c <Endpoint_SelectEndpoint>
    1ab8:	80 91 3e 20 	lds	r24, 0x203E
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    1abc:	90 91 3f 20 	lds	r25, 0x203F
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	ef 5b       	subi	r30, 0xBF	; 191
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	20 81       	ld	r18, Z
    1ac8:	80 5c       	subi	r24, 0xC0	; 192
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	dc 01       	movw	r26, r24
    1ace:	8c 91       	ld	r24, X
    1ad0:	28 17       	cp	r18, r24

	if (!(Endpoint_IsReadWriteAllowed()))
    1ad2:	c0 f0       	brcs	.+48     	; 0x1b04 <CDC_Device_SendByte+0x72>
    1ad4:	a0 91 40 20 	lds	r26, 0x2040
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1ad8:	b0 91 41 20 	lds	r27, 0x2041
    1adc:	80 81       	ld	r24, Z
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	12 96       	adiw	r26, 0x02	; 2
    1ae2:	8d 93       	st	X+, r24
    1ae4:	9c 93       	st	X, r25
    1ae6:	13 97       	sbiw	r26, 0x03	; 3
    1ae8:	8c 91       	ld	r24, X
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1aea:	8d 79       	andi	r24, 0x9D	; 157
    1aec:	8c 93       	st	X, r24
    1aee:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1af2:	f0 91 3f 20 	lds	r31, 0x203F
    1af6:	ef 5b       	subi	r30, 0xBF	; 191
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	10 82       	st	Z, r1
    1afc:	0e 94 81 03 	call	0x702	; 0x702 <Endpoint_WaitUntilReady>
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1b00:	88 23       	and	r24, r24
    1b02:	89 f4       	brne	.+34     	; 0x1b26 <CDC_Device_SendByte+0x94>
    1b04:	80 91 3e 20 	lds	r24, 0x203E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    1b08:	90 91 3f 20 	lds	r25, 0x203F
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	ef 5b       	subi	r30, 0xBF	; 191
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	20 81       	ld	r18, Z
    1b14:	82 0f       	add	r24, r18
    1b16:	91 1d       	adc	r25, r1
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cc 93       	st	X, r28
    1b1c:	2f 5f       	subi	r18, 0xFF	; 255
    1b1e:	20 83       	st	Z, r18
    1b20:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <CDC_Device_SendByte+0x94>
    1b24:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1b26:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1b28:	08 95       	ret

00001b2a <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    1b2e:	84 85       	ldd	r24, Z+12	; 0x0c
    1b30:	95 85       	ldd	r25, Z+13	; 0x0d
    1b32:	62 2f       	mov	r22, r18
    1b34:	ae df       	rcall	.-164    	; 0x1a92 <CDC_Device_SendByte>
    1b36:	88 23       	and	r24, r24
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <CDC_Device_putchar+0x16>
    1b3a:	8f ef       	ldi	r24, 0xFF	; 255
    1b3c:	9f ef       	ldi	r25, 0xFF	; 255
    1b3e:	08 95       	ret
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	08 95       	ret

00001b46 <CDC_Device_Flush>:
}
    1b46:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1b48:	80 91 8a 29 	lds	r24, 0x298A
    1b4c:	84 30       	cpi	r24, 0x04	; 4
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <CDC_Device_Flush+0xc>
    1b50:	65 c0       	rjmp	.+202    	; 0x1c1c <CDC_Device_Flush+0xd6>
    1b52:	44 89       	ldd	r20, Z+20	; 0x14
    1b54:	55 89       	ldd	r21, Z+21	; 0x15
    1b56:	66 89       	ldd	r22, Z+22	; 0x16
    1b58:	77 89       	ldd	r23, Z+23	; 0x17
    1b5a:	41 15       	cp	r20, r1
    1b5c:	51 05       	cpc	r21, r1
    1b5e:	61 05       	cpc	r22, r1
    1b60:	71 05       	cpc	r23, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <CDC_Device_Flush+0x20>
    1b64:	5b c0       	rjmp	.+182    	; 0x1c1c <CDC_Device_Flush+0xd6>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    1b66:	81 81       	ldd	r24, Z+1	; 0x01
    1b68:	e9 dc       	rcall	.-1582   	; 0x153c <Endpoint_SelectEndpoint>
    1b6a:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1b6e:	20 91 3e 20 	lds	r18, 0x203E
    1b72:	30 91 3f 20 	lds	r19, 0x203F
    1b76:	87 ff       	sbrs	r24, 7
    1b78:	06 c0       	rjmp	.+12     	; 0x1b86 <CDC_Device_Flush+0x40>
    1b7a:	2f 5b       	subi	r18, 0xBF	; 191
				  return USB_Endpoint_SelectedFIFO->Position;
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	f9 01       	movw	r30, r18
    1b80:	80 81       	ld	r24, Z
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0b c0       	rjmp	.+22     	; 0x1b9c <CDC_Device_Flush+0x56>
    1b86:	f9 01       	movw	r30, r18
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1b88:	e0 5c       	subi	r30, 0xC0	; 192
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	2f 5b       	subi	r18, 0xBF	; 191
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	f9 01       	movw	r30, r18
    1b94:	20 81       	ld	r18, Z
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	82 1b       	sub	r24, r18
    1b9a:	91 09       	sbc	r25, r1
    1b9c:	00 97       	sbiw	r24, 0x00	; 0

	if (!(Endpoint_BytesInEndpoint()))
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <CDC_Device_Flush+0x5c>
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <CDC_Device_Flush+0xda>
    1ba2:	80 91 3e 20 	lds	r24, 0x203E
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    1ba6:	90 91 3f 20 	lds	r25, 0x203F
    1baa:	dc 01       	movw	r26, r24
    1bac:	af 5b       	subi	r26, 0xBF	; 191
    1bae:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb0:	3c 91       	ld	r19, X
    1bb2:	80 5c       	subi	r24, 0xC0	; 192
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	20 81       	ld	r18, Z
    1bba:	e0 91 40 20 	lds	r30, 0x2040
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1bbe:	f0 91 41 20 	lds	r31, 0x2041
    1bc2:	8c 91       	ld	r24, X
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	82 83       	std	Z+2, r24	; 0x02
    1bc8:	93 83       	std	Z+3, r25	; 0x03
    1bca:	80 81       	ld	r24, Z
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1bcc:	8d 79       	andi	r24, 0x9D	; 157
    1bce:	80 83       	st	Z, r24
    1bd0:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1bd4:	f0 91 3f 20 	lds	r31, 0x203F
    1bd8:	ef 5b       	subi	r30, 0xBF	; 191
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	10 82       	st	Z, r1
    1bde:	32 17       	cp	r19, r18

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1be0:	08 f1       	brcs	.+66     	; 0x1c24 <CDC_Device_Flush+0xde>
    1be2:	0e 94 81 03 	call	0x702	; 0x702 <Endpoint_WaitUntilReady>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1be6:	88 23       	and	r24, r24
    1be8:	f1 f4       	brne	.+60     	; 0x1c26 <CDC_Device_Flush+0xe0>
    1bea:	e0 91 40 20 	lds	r30, 0x2040
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1bee:	f0 91 41 20 	lds	r31, 0x2041
    1bf2:	a0 91 3e 20 	lds	r26, 0x203E
    1bf6:	b0 91 3f 20 	lds	r27, 0x203F
    1bfa:	af 5b       	subi	r26, 0xBF	; 191
    1bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfe:	2c 91       	ld	r18, X
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	22 83       	std	Z+2, r18	; 0x02
    1c04:	33 83       	std	Z+3, r19	; 0x03
    1c06:	90 81       	ld	r25, Z
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1c08:	9d 79       	andi	r25, 0x9D	; 157
    1c0a:	90 83       	st	Z, r25
    1c0c:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1c10:	f0 91 3f 20 	lds	r31, 0x203F
    1c14:	ef 5b       	subi	r30, 0xBF	; 191
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	10 82       	st	Z, r1
    1c1a:	08 95       	ret
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1c1e:	08 95       	ret
    1c20:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    1c22:	08 95       	ret
    1c24:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    1c26:	08 95       	ret

00001c28 <CDC_Device_USBTask>:
}
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	ec 01       	movw	r28, r24
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1c2e:	80 91 8a 29 	lds	r24, 0x298A
    1c32:	84 30       	cpi	r24, 0x04	; 4
    1c34:	b9 f4       	brne	.+46     	; 0x1c64 <CDC_Device_USBTask+0x3c>
    1c36:	8c 89       	ldd	r24, Y+20	; 0x14
    1c38:	9d 89       	ldd	r25, Y+21	; 0x15
    1c3a:	ae 89       	ldd	r26, Y+22	; 0x16
    1c3c:	bf 89       	ldd	r27, Y+23	; 0x17
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	a1 05       	cpc	r26, r1
    1c42:	b1 05       	cpc	r27, r1
    1c44:	79 f0       	breq	.+30     	; 0x1c64 <CDC_Device_USBTask+0x3c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	79 dc       	rcall	.-1806   	; 0x153c <Endpoint_SelectEndpoint>
    1c4a:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1c4e:	80 68       	ori	r24, 0x80	; 128
    1c50:	75 dc       	rcall	.-1814   	; 0x153c <Endpoint_SelectEndpoint>
    1c52:	e0 91 40 20 	lds	r30, 0x2040

				return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    1c56:	f0 91 41 20 	lds	r31, 0x2041
    1c5a:	80 81       	ld	r24, Z
    1c5c:	81 ff       	sbrs	r24, 1
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <CDC_Device_USBTask+0x3c>
	
	if (Endpoint_IsINReady())
    1c60:	ce 01       	movw	r24, r28
    1c62:	71 df       	rcall	.-286    	; 0x1b46 <CDC_Device_Flush>
	  CDC_Device_Flush(CDCInterfaceInfo);
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <CDC_Device_ReceiveByte>:
	#endif
}
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	fc 01       	movw	r30, r24
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1c70:	80 91 8a 29 	lds	r24, 0x298A
    1c74:	84 30       	cpi	r24, 0x04	; 4
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <CDC_Device_ReceiveByte+0x10>
    1c78:	60 c0       	rjmp	.+192    	; 0x1d3a <CDC_Device_ReceiveByte+0xd0>
    1c7a:	44 89       	ldd	r20, Z+20	; 0x14
    1c7c:	55 89       	ldd	r21, Z+21	; 0x15
    1c7e:	66 89       	ldd	r22, Z+22	; 0x16
    1c80:	77 89       	ldd	r23, Z+23	; 0x17
    1c82:	41 15       	cp	r20, r1
    1c84:	51 05       	cpc	r21, r1
    1c86:	61 05       	cpc	r22, r1
    1c88:	71 05       	cpc	r23, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <CDC_Device_ReceiveByte+0x24>
    1c8c:	56 c0       	rjmp	.+172    	; 0x1d3a <CDC_Device_ReceiveByte+0xd0>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
    1c8e:	86 81       	ldd	r24, Z+6	; 0x06
    1c90:	55 dc       	rcall	.-1878   	; 0x153c <Endpoint_SelectEndpoint>
    1c92:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1c96:	8f 77       	andi	r24, 0x7F	; 127
    1c98:	51 dc       	rcall	.-1886   	; 0x153c <Endpoint_SelectEndpoint>
    1c9a:	c0 91 40 20 	lds	r28, 0x2040

				if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    1c9e:	d0 91 41 20 	lds	r29, 0x2041
    1ca2:	88 81       	ld	r24, Y
    1ca4:	85 ff       	sbrs	r24, 5
    1ca6:	49 c0       	rjmp	.+146    	; 0x1d3a <CDC_Device_ReceiveByte+0xd0>
    1ca8:	20 91 3e 20 	lds	r18, 0x203E
				{
					USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1cac:	30 91 3f 20 	lds	r19, 0x203F
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb4:	f9 01       	movw	r30, r18
    1cb6:	e0 5c       	subi	r30, 0xC0	; 192
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 83       	st	Z, r24
    1cbc:	80 91 42 20 	lds	r24, 0x2042
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1cc0:	d9 01       	movw	r26, r18
    1cc2:	af 5b       	subi	r26, 0xBF	; 191
    1cc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc6:	87 ff       	sbrs	r24, 7
    1cc8:	03 c0       	rjmp	.+6      	; 0x1cd0 <CDC_Device_ReceiveByte+0x66>
    1cca:	8c 91       	ld	r24, X
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
				  return USB_Endpoint_SelectedFIFO->Position;
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <CDC_Device_ReceiveByte+0x70>
    1cd0:	80 81       	ld	r24, Z
    1cd2:	4c 91       	ld	r20, X
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	84 1b       	sub	r24, r20
    1cd8:	91 09       	sbc	r25, r1
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	61 f0       	breq	.+24     	; 0x1cf6 <CDC_Device_ReceiveByte+0x8c>

	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
    1cde:	f9 01       	movw	r30, r18
    1ce0:	ef 5b       	subi	r30, 0xBF	; 191
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	90 81       	ld	r25, Z
    1ce6:	d9 01       	movw	r26, r18
    1ce8:	a9 0f       	add	r26, r25
    1cea:	b1 1d       	adc	r27, r1
    1cec:	8c 91       	ld	r24, X
    1cee:	9f 5f       	subi	r25, 0xFF	; 255
    1cf0:	90 83       	st	Z, r25
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <CDC_Device_ReceiveByte+0x90>
		  ReceivedByte = Endpoint_Read_8();
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	9f ef       	ldi	r25, 0xFF	; 255
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1cfa:	40 91 42 20 	lds	r20, 0x2042
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1cfe:	f9 01       	movw	r30, r18
    1d00:	ef 5b       	subi	r30, 0xBF	; 191
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	47 ff       	sbrs	r20, 7
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <CDC_Device_ReceiveByte+0xa4>
    1d08:	20 81       	ld	r18, Z
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
				  return USB_Endpoint_SelectedFIFO->Position;
    1d0c:	08 c0       	rjmp	.+16     	; 0x1d1e <CDC_Device_ReceiveByte+0xb4>
    1d0e:	20 5c       	subi	r18, 0xC0	; 192
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1d12:	d9 01       	movw	r26, r18
    1d14:	2c 91       	ld	r18, X
    1d16:	40 81       	ld	r20, Z
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	24 1b       	sub	r18, r20
    1d1c:	31 09       	sbc	r19, r1
    1d1e:	21 15       	cp	r18, r1
    1d20:	31 05       	cpc	r19, r1
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1d22:	69 f4       	brne	.+26     	; 0x1d3e <CDC_Device_ReceiveByte+0xd4>
    1d24:	28 81       	ld	r18, Y
    1d26:	2d 79       	andi	r18, 0x9D	; 157
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1d28:	28 83       	st	Y, r18
    1d2a:	e0 91 3e 20 	lds	r30, 0x203E
				USB_Endpoint_SelectedFIFO->Position  = 0;
    1d2e:	f0 91 3f 20 	lds	r31, 0x203F
    1d32:	ef 5b       	subi	r30, 0xBF	; 191
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	10 82       	st	Z, r1
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <CDC_Device_ReceiveByte+0xd4>
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	9f ef       	ldi	r25, 0xFF	; 255
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1d42:	08 95       	ret

00001d44 <CDC_Device_getchar>:
{
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
    1d44:	fc 01       	movw	r30, r24
    1d46:	84 85       	ldd	r24, Z+12	; 0x0c
    1d48:	95 85       	ldd	r25, Z+13	; 0x0d
    1d4a:	8f df       	rcall	.-226    	; 0x1c6a <CDC_Device_ReceiveByte>
    1d4c:	97 ff       	sbrs	r25, 7
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));

	if (ReceivedByte < 0)
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <CDC_Device_getchar+0x10>
    1d50:	8e ef       	ldi	r24, 0xFE	; 254
	  return _FDEV_EOF;
    1d52:	9f ef       	ldi	r25, 0xFF	; 255
    1d54:	08 95       	ret

00001d56 <CDC_Device_CreateStream>:

	return ReceivedByte;
}
    1d56:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    1d58:	2e e0       	ldi	r18, 0x0E	; 14
    1d5a:	db 01       	movw	r26, r22
    1d5c:	1d 92       	st	X+, r1
    1d5e:	2a 95       	dec	r18
    1d60:	e9 f7       	brne	.-6      	; 0x1d5c <CDC_Device_CreateStream+0x6>
    1d62:	23 e0       	ldi	r18, 0x03	; 3
    1d64:	23 83       	std	Z+3, r18	; 0x03
    1d66:	25 e9       	ldi	r18, 0x95	; 149
    1d68:	3d e0       	ldi	r19, 0x0D	; 13
    1d6a:	20 87       	std	Z+8, r18	; 0x08
    1d6c:	31 87       	std	Z+9, r19	; 0x09
    1d6e:	22 ea       	ldi	r18, 0xA2	; 162
    1d70:	3e e0       	ldi	r19, 0x0E	; 14
    1d72:	22 87       	std	Z+10, r18	; 0x0a
    1d74:	33 87       	std	Z+11, r19	; 0x0b
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1d76:	84 87       	std	Z+12, r24	; 0x0c
    1d78:	95 87       	std	Z+13, r25	; 0x0d
}
    1d7a:	08 95       	ret

00001d7c <CDC_Device_Event_Stub>:

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{

}
    1d7c:	08 95       	ret

00001d7e <_exit>:
    1d7e:	f8 94       	cli

00001d80 <__stop_program>:
    1d80:	ff cf       	rjmp	.-2      	; 0x1d80 <__stop_program>
